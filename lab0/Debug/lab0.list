
lab0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000644c  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000147  08006680  08006680  00016680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080067d0  080067d0  000167d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080067d4  080067d4  000167d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  080067d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001c1  20000070  08006848  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000607  20000231  08006848  00020231  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fcb4  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000202c  00000000  00000000  0002fd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bc0  00000000  00000000  00031d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000af8  00000000  00000000  00032948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031b60  00000000  00000000  00033440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000f276  00000000  00000000  00064fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00136ca6  00000000  00000000  00074216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001aaebc  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000033a0  00000000  00000000  001aaf0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000070 	.word	0x20000070
 8000250:	00000000 	.word	0x00000000
 8000254:	08006668 	.word	0x08006668

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000074 	.word	0x20000074
 8000270:	08006668 	.word	0x08006668

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 faf2 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f81a 	bl	80005d4 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80005a0:	f000 f874 	bl	800068c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f8d8 	bl	8000758 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005a8:	f000 f88a 	bl	80006c0 <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 80005ac:	f000 f87c 	bl	80006a8 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 80005b0:	2201      	movs	r2, #1
 80005b2:	2140      	movs	r1, #64	; 0x40
 80005b4:	4806      	ldr	r0, [pc, #24]	; (80005d0 <main+0x3c>)
 80005b6:	f000 fe23 	bl	8001200 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, GPIO_PIN_SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2180      	movs	r1, #128	; 0x80
 80005be:	4804      	ldr	r0, [pc, #16]	; (80005d0 <main+0x3c>)
 80005c0:	f000 fe1e 	bl	8001200 <HAL_GPIO_WritePin>

    /* USER CODE BEGIN 3 */
  //task_2();
  //task_3();
  //task_4();
  task_5();
 80005c4:	f000 fa6e 	bl	8000aa4 <task_5>
 80005c8:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	42021c00 	.word	0x42021c00

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b09e      	sub	sp, #120	; 0x78
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	2260      	movs	r2, #96	; 0x60
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 fba0 	bl	8005d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	463b      	mov	r3, r7
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]
 80005f6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005f8:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80005fc:	f000 fe42 	bl	8001284 <HAL_PWREx_ControlVoltageScaling>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8000606:	f000 f8eb 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800060a:	2310      	movs	r3, #16
 800060c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800060e:	2301      	movs	r3, #1
 8000610:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000612:	2310      	movs	r3, #16
 8000614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8000616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000620:	2301      	movs	r3, #1
 8000622:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000628:	2301      	movs	r3, #1
 800062a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 800062c:	2350      	movs	r3, #80	; 0x50
 800062e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000630:	2302      	movs	r3, #2
 8000632:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000634:	2302      	movs	r3, #2
 8000636:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 800063c:	2300      	movs	r3, #0
 800063e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fefd 	bl	8001448 <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000654:	f000 f8c4 	bl	80007e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	231f      	movs	r3, #31
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	2104      	movs	r1, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fdbd 	bl	80021f4 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000680:	f000 f8ae 	bl	80007e0 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3778      	adds	r7, #120	; 0x78
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000690:	f000 feca 	bl	8001428 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000694:	2002      	movs	r0, #2
 8000696:	f000 fe77 	bl	8001388 <HAL_PWREx_ConfigSupply>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80006a0:	f000 f89e 	bl	80007e0 <Error_Handler>
  }
}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80006ac:	f000 fdda 	bl	8001264 <HAL_ICACHE_Enable>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80006b6:	f000 f893 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006c6:	4a23      	ldr	r2, [pc, #140]	; (8000754 <MX_USART1_UART_Init+0x94>)
 80006c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e4:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006e6:	220c      	movs	r2, #12
 80006e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f0:	4b17      	ldr	r3, [pc, #92]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006f6:	4b16      	ldr	r3, [pc, #88]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART1_UART_Init+0x90>)
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART1_UART_Init+0x90>)
 8000704:	2200      	movs	r2, #0
 8000706:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000708:	4811      	ldr	r0, [pc, #68]	; (8000750 <MX_USART1_UART_Init+0x90>)
 800070a:	f004 fd93 	bl	8005234 <HAL_UART_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000714:	f000 f864 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_USART1_UART_Init+0x90>)
 800071c:	f005 fa10 	bl	8005b40 <HAL_UARTEx_SetTxFifoThreshold>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000726:	f000 f85b 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072a:	2100      	movs	r1, #0
 800072c:	4808      	ldr	r0, [pc, #32]	; (8000750 <MX_USART1_UART_Init+0x90>)
 800072e:	f005 fa45 	bl	8005bbc <HAL_UARTEx_SetRxFifoThreshold>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000738:	f000 f852 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800073c:	4804      	ldr	r0, [pc, #16]	; (8000750 <MX_USART1_UART_Init+0x90>)
 800073e:	f005 f9c6 	bl	8005ace <HAL_UARTEx_DisableFifoMode>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000748:	f000 f84a 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000008c 	.word	0x2000008c
 8000754:	40013800 	.word	0x40013800

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000774:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_GPIO_Init+0x80>)
 800078e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800079c:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_GPIO_Init+0x80>)
 800079e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	21c0      	movs	r1, #192	; 0xc0
 80007ae:	480b      	ldr	r0, [pc, #44]	; (80007dc <MX_GPIO_Init+0x84>)
 80007b0:	f000 fd26 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007b4:	23c0      	movs	r3, #192	; 0xc0
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_GPIO_Init+0x84>)
 80007cc:	f000 fb40 	bl	8000e50 <HAL_GPIO_Init>

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	46020c00 	.word	0x46020c00
 80007dc:	42021c00 	.word	0x42021c00

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <HAL_MspInit+0x30>)
 80007f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80007f8:	4a08      	ldr	r2, [pc, #32]	; (800081c <HAL_MspInit+0x30>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000802:	4b06      	ldr	r3, [pc, #24]	; (800081c <HAL_MspInit+0x30>)
 8000804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081a:	4770      	bx	lr
 800081c:	46020c00 	.word	0x46020c00

08000820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b0bc      	sub	sp, #240	; 0xf0
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
 8000836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	22c8      	movs	r2, #200	; 0xc8
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f005 fa71 	bl	8005d28 <memset>
  if(huart->Instance==USART1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a26      	ldr	r2, [pc, #152]	; (80008e4 <HAL_UART_MspInit+0xc4>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d145      	bne.n	80008dc <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000850:	f04f 0201 	mov.w	r2, #1
 8000854:	f04f 0300 	mov.w	r3, #0
 8000858:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800085c:	2300      	movs	r3, #0
 800085e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	4618      	mov	r0, r3
 8000866:	f002 f89b 	bl	80029a0 <HAL_RCCEx_PeriphCLKConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000870:	f7ff ffb6 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000874:	4b1c      	ldr	r3, [pc, #112]	; (80008e8 <HAL_UART_MspInit+0xc8>)
 8000876:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800087a:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <HAL_UART_MspInit+0xc8>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000884:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <HAL_UART_MspInit+0xc8>)
 8000886:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <HAL_UART_MspInit+0xc8>)
 8000894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000898:	4a13      	ldr	r2, [pc, #76]	; (80008e8 <HAL_UART_MspInit+0xc8>)
 800089a:	f043 0301 	orr.w	r3, r3, #1
 800089e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <HAL_UART_MspInit+0xc8>)
 80008a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008a8:	f003 0301 	and.w	r3, r3, #1
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80008b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b8:	2302      	movs	r3, #2
 80008ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008ca:	2307      	movs	r3, #7
 80008cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80008d4:	4619      	mov	r1, r3
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <HAL_UART_MspInit+0xcc>)
 80008d8:	f000 faba 	bl	8000e50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008dc:	bf00      	nop
 80008de:	37f0      	adds	r7, #240	; 0xf0
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40013800 	.word	0x40013800
 80008e8:	46020c00 	.word	0x46020c00
 80008ec:	42020000 	.word	0x42020000

080008f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <NMI_Handler+0x4>

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 f984 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}

08000944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800094c:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <_sbrk+0x5c>)
 800094e:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <_sbrk+0x60>)
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000958:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <_sbrk+0x64>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <_sbrk+0x68>)
 8000964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <_sbrk+0x64>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	429a      	cmp	r2, r3
 8000972:	d207      	bcs.n	8000984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000974:	f005 f9ae 	bl	8005cd4 <__errno>
 8000978:	4603      	mov	r3, r0
 800097a:	220c      	movs	r2, #12
 800097c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
 8000982:	e009      	b.n	8000998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <_sbrk+0x64>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4413      	add	r3, r2
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <_sbrk+0x64>)
 8000994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3718      	adds	r7, #24
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200c0000 	.word	0x200c0000
 80009a4:	00000400 	.word	0x00000400
 80009a8:	2000011c 	.word	0x2000011c
 80009ac:	20000238 	.word	0x20000238

080009b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <SystemInit+0x68>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ba:	4a17      	ldr	r2, [pc, #92]	; (8000a18 <SystemInit+0x68>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <SystemInit+0x6c>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <SystemInit+0x6c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <SystemInit+0x6c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <SystemInit+0x6c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80009dc:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <SystemInit+0x6c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <SystemInit+0x6c>)
 80009e2:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80009e6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80009ea:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 80009ec:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <SystemInit+0x6c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <SystemInit+0x6c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <SystemInit+0x6c>)
 80009f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009fc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <SystemInit+0x6c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a04:	4b04      	ldr	r3, [pc, #16]	; (8000a18 <SystemInit+0x68>)
 8000a06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a0a:	609a      	str	r2, [r3, #8]
  #endif
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	46020c00 	.word	0x46020c00

08000a20 <toggle>:
#define DELAY_10US { volatile unsigned j; for(j = 0; j < 105; j++); }

extern UART_HandleTypeDef huart1;

static inline void toggle(uint16_t GPIO_Pin)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GPIOH, GPIO_Pin);
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4803      	ldr	r0, [pc, #12]	; (8000a3c <toggle+0x1c>)
 8000a30:	f000 fbfe 	bl	8001230 <HAL_GPIO_TogglePin>
}
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	42021c00 	.word	0x42021c00

08000a40 <uart_println>:

static inline void uart_println(const char* str, ...)
{
 8000a40:	b40f      	push	{r0, r1, r2, r3}
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b082      	sub	sp, #8
 8000a46:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;

	va_start(args, str);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, 256, str, args);
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a56:	4810      	ldr	r0, [pc, #64]	; (8000a98 <uart_println+0x58>)
 8000a58:	f005 f99a 	bl	8005d90 <vsniprintf>

	uint8_t *p = (uint8_t *) buffer;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <uart_println+0x58>)
 8000a5e:	607b      	str	r3, [r7, #4]
	while(*p)
 8000a60:	e008      	b.n	8000a74 <uart_println+0x34>
	{
		HAL_UART_Transmit(&huart1, p++, 1, 0xFFFF);
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	1c4b      	adds	r3, r1, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	480b      	ldr	r0, [pc, #44]	; (8000a9c <uart_println+0x5c>)
 8000a70:	f004 fc30 	bl	80052d4 <HAL_UART_Transmit>
	while(*p)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d1f2      	bne.n	8000a62 <uart_println+0x22>
	}

	HAL_UART_Transmit(&huart1, (uint8_t *)"\r\n", 2, 0xFFFF);
 8000a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a80:	2202      	movs	r2, #2
 8000a82:	4907      	ldr	r1, [pc, #28]	; (8000aa0 <uart_println+0x60>)
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <uart_println+0x5c>)
 8000a86:	f004 fc25 	bl	80052d4 <HAL_UART_Transmit>
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a94:	b004      	add	sp, #16
 8000a96:	4770      	bx	lr
 8000a98:	20000120 	.word	0x20000120
 8000a9c:	2000008c 	.word	0x2000008c
 8000aa0:	08006680 	.word	0x08006680

08000aa4 <task_5>:

#define LED_RED		(0x040)
#define LED_GREEN	(0x080)

void task_5(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
	// Declare a delay counter
	volatile uint32_t i;

	// Define a toggling counter
	uint32_t counter = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
	 * Set the bits in activeLED to toggle the corresponding LEDs
	 */

	//
	// TODO: Change the definition of activeLED
	uint8_t activeLED = 192;
 8000aae:	23c0      	movs	r3, #192	; 0xc0
 8000ab0:	74fb      	strb	r3, [r7, #19]
		//
		// TODO: For Task 5.2 (set value for activeLED)
		//

		// Toggle an LED
		toggle(activeLED);
 8000ab2:	7cfb      	ldrb	r3, [r7, #19]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffb2 	bl	8000a20 <toggle>

		// Delay of ~300ms
		for (i = 0; i < 30000; i++) {DELAY_10US}
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	e00b      	b.n	8000ada <task_5+0x36>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	e002      	b.n	8000ace <task_5+0x2a>
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	3301      	adds	r3, #1
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
 8000ad0:	2b68      	cmp	r3, #104	; 0x68
 8000ad2:	d9f9      	bls.n	8000ac8 <task_5+0x24>
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	f247 522f 	movw	r2, #29999	; 0x752f
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d9ee      	bls.n	8000ac2 <task_5+0x1e>

		// Toggle an LED
		toggle(activeLED);
 8000ae4:	7cfb      	ldrb	r3, [r7, #19]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff99 	bl	8000a20 <toggle>

		// Delay of ~300ms
		for (i = 0; i < 30000; i++) {DELAY_10US}
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	e00b      	b.n	8000b0c <task_5+0x68>
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	e002      	b.n	8000b00 <task_5+0x5c>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	3301      	adds	r3, #1
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b68      	cmp	r3, #104	; 0x68
 8000b04:	d9f9      	bls.n	8000afa <task_5+0x56>
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	f247 522f 	movw	r2, #29999	; 0x752f
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d9ee      	bls.n	8000af4 <task_5+0x50>

		// Print counter value and increment it
		uart_println("counter = %u",counter);
 8000b16:	6979      	ldr	r1, [r7, #20]
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <task_5+0x84>)
 8000b1a:	f7ff ff91 	bl	8000a40 <uart_println>
		counter += 1;
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
		toggle(activeLED);
 8000b24:	e7c5      	b.n	8000ab2 <task_5+0xe>
 8000b26:	bf00      	nop
 8000b28:	08006684 	.word	0x08006684

08000b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b32:	e003      	b.n	8000b3c <LoopCopyDataInit>

08000b34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b3a:	3104      	adds	r1, #4

08000b3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b44:	d3f6      	bcc.n	8000b34 <CopyDataInit>
	ldr	r2, =_sbss
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b48:	e002      	b.n	8000b50 <LoopFillZerobss>

08000b4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b4c:	f842 3b04 	str.w	r3, [r2], #4

08000b50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b50:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <LoopForever+0x16>)
	cmp	r2, r3
 8000b52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b54:	d3f9      	bcc.n	8000b4a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b56:	f7ff ff2b 	bl	80009b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f005 f8c1 	bl	8005ce0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5e:	f7ff fd19 	bl	8000594 <main>

08000b62 <LoopForever>:

LoopForever:
    b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000b64:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000b68:	080067d8 	.word	0x080067d8
	ldr	r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b70:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8000b74:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8000b78:	20000231 	.word	0x20000231

08000b7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC1_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_Init+0x4c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_Init+0x4c>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f92b 	bl	8000dec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000b96:	f001 fd1f 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <HAL_Init+0x50>)
 8000b9e:	6a1b      	ldr	r3, [r3, #32]
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	490b      	ldr	r1, [pc, #44]	; (8000bd4 <HAL_Init+0x54>)
 8000ba6:	5ccb      	ldrb	r3, [r1, r3]
 8000ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bac:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_Init+0x58>)
 8000bae:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb0:	200f      	movs	r0, #15
 8000bb2:	f000 f813 	bl	8000bdc <HAL_InitTick>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e002      	b.n	8000bc6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fe14 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40022000 	.word	0x40022000
 8000bd0:	46020c00 	.word	0x46020c00
 8000bd4:	08006694 	.word	0x08006694
 8000bd8:	20000000 	.word	0x20000000

08000bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_InitTick+0x60>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d101      	bne.n	8000bf0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bec:	2301      	movs	r3, #1
 8000bee:	e021      	b.n	8000c34 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <HAL_InitTick+0x64>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_InitTick+0x60>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f915 	bl	8000e36 <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 f8ed 	bl	8000e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_InitTick+0x68>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000008 	.word	0x20000008
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000004 	.word	0x20000004

08000c48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	20000008 	.word	0x20000008
 8000c6c:	20000220 	.word	0x20000220

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	20000220 	.word	0x20000220

08000c88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000c9a:	68db      	ldr	r3, [r3, #12]
 8000c9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cba:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <__NVIC_SetPriorityGrouping+0x44>)
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	60d3      	str	r3, [r2, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd4:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	0a1b      	lsrs	r3, r3, #8
 8000cda:	f003 0307 	and.w	r3, r3, #7
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	6039      	str	r1, [r7, #0]
 8000cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	db0a      	blt.n	8000d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	490c      	ldr	r1, [pc, #48]	; (8000d38 <__NVIC_SetPriority+0x4c>)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	0112      	lsls	r2, r2, #4
 8000d0c:	b2d2      	uxtb	r2, r2
 8000d0e:	440b      	add	r3, r1
 8000d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d14:	e00a      	b.n	8000d2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b2da      	uxtb	r2, r3
 8000d1a:	4908      	ldr	r1, [pc, #32]	; (8000d3c <__NVIC_SetPriority+0x50>)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	f003 030f 	and.w	r3, r3, #15
 8000d22:	3b04      	subs	r3, #4
 8000d24:	0112      	lsls	r2, r2, #4
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	440b      	add	r3, r1
 8000d2a:	761a      	strb	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr
 8000d38:	e000e100 	.word	0xe000e100
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	f1c3 0307 	rsb	r3, r3, #7
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	bf28      	it	cs
 8000d5e:	2304      	movcs	r3, #4
 8000d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	3304      	adds	r3, #4
 8000d66:	2b06      	cmp	r3, #6
 8000d68:	d902      	bls.n	8000d70 <NVIC_EncodePriority+0x30>
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	e000      	b.n	8000d72 <NVIC_EncodePriority+0x32>
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	401a      	ands	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d88:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d92:	43d9      	mvns	r1, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d98:	4313      	orrs	r3, r2
         );
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3724      	adds	r7, #36	; 0x24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000db8:	d301      	bcc.n	8000dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00f      	b.n	8000dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <SysTick_Config+0x40>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc6:	210f      	movs	r1, #15
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f7ff ff8e 	bl	8000cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <SysTick_Config+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd6:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x40>)
 8000dd8:	2207      	movs	r2, #7
 8000dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff ff47 	bl	8000c88 <__NVIC_SetPriorityGrouping>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b086      	sub	sp, #24
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
 8000e0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e10:	f7ff ff5e 	bl	8000cd0 <__NVIC_GetPriorityGrouping>
 8000e14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f7ff ff90 	bl	8000d40 <NVIC_EncodePriority>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff5f 	bl	8000cec <__NVIC_SetPriority>
}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff ffb2 	bl	8000da8 <SysTick_Config>
 8000e44:	4603      	mov	r3, r0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	; 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e62:	e1ba      	b.n	80011da <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	2101      	movs	r1, #1
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	4013      	ands	r3, r2
 8000e72:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 81aa 	beq.w	80011d4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a55      	ldr	r2, [pc, #340]	; (8000fd8 <HAL_GPIO_Init+0x188>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d15d      	bne.n	8000f44 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 0201 	and.w	r2, r3, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000eb8:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <HAL_GPIO_Init+0x18c>)
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ec0:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000ec2:	4a46      	ldr	r2, [pc, #280]	; (8000fdc <HAL_GPIO_Init+0x18c>)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4413      	add	r3, r2
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000ece:	69bb      	ldr	r3, [r7, #24]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eda:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69fa      	ldr	r2, [r7, #28]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	f003 0307 	and.w	r3, r3, #7
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220b      	movs	r2, #11
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69fa      	ldr	r2, [r7, #28]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	08da      	lsrs	r2, r3, #3
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	3208      	adds	r2, #8
 8000f0e:	69f9      	ldr	r1, [r7, #28]
 8000f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2202      	movs	r2, #2
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	69fa      	ldr	r2, [r7, #28]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	e067      	b.n	8001014 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x104>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b12      	cmp	r3, #18
 8000f52:	d145      	bne.n	8000fe0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	f003 0307 	and.w	r3, r3, #7
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69fa      	ldr	r2, [r7, #28]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	f003 020f 	and.w	r2, r3, #15
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	69f9      	ldr	r1, [r7, #28]
 8000f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000fa6:	69bb      	ldr	r3, [r7, #24]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0203 	and.w	r2, r3, #3
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	69fa      	ldr	r2, [r7, #28]
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e01e      	b.n	8001014 <HAL_GPIO_Init+0x1c4>
 8000fd6:	bf00      	nop
 8000fd8:	46020000 	.word	0x46020000
 8000fdc:	080066ec 	.word	0x080066ec
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0203 	and.w	r2, r3, #3
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69fa      	ldr	r2, [r7, #28]
 800100a:	4313      	orrs	r3, r2
 800100c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	69fa      	ldr	r2, [r7, #28]
 8001012:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d00b      	beq.n	8001034 <HAL_GPIO_Init+0x1e4>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d007      	beq.n	8001034 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001028:	2b11      	cmp	r3, #17
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b12      	cmp	r3, #18
 8001032:	d130      	bne.n	8001096 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	4013      	ands	r3, r2
 800104a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69fa      	ldr	r2, [r7, #28]
 800105a:	4313      	orrs	r3, r2
 800105c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800106a:	2201      	movs	r2, #1
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	4013      	ands	r3, r2
 8001078:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	f003 0201 	and.w	r2, r3, #1
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	4313      	orrs	r3, r2
 800108e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d017      	beq.n	80010ce <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	69fa      	ldr	r2, [r7, #28]
 80010b2:	4013      	ands	r3, r2
 80010b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	69fa      	ldr	r2, [r7, #28]
 80010cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d07c      	beq.n	80011d4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80010da:	4a47      	ldr	r2, [pc, #284]	; (80011f8 <HAL_GPIO_Init+0x3a8>)
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3318      	adds	r3, #24
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	0a9a      	lsrs	r2, r3, #10
 8001102:	4b3e      	ldr	r3, [pc, #248]	; (80011fc <HAL_GPIO_Init+0x3ac>)
 8001104:	4013      	ands	r3, r2
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	f002 0203 	and.w	r2, r2, #3
 800110c:	00d2      	lsls	r2, r2, #3
 800110e:	4093      	lsls	r3, r2
 8001110:	69fa      	ldr	r2, [r7, #28]
 8001112:	4313      	orrs	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001116:	4938      	ldr	r1, [pc, #224]	; (80011f8 <HAL_GPIO_Init+0x3a8>)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	089b      	lsrs	r3, r3, #2
 800111c:	3318      	adds	r3, #24
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001124:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <HAL_GPIO_Init+0x3a8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	43db      	mvns	r3, r3
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	4013      	ands	r3, r2
 8001132:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	4313      	orrs	r3, r2
 8001146:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8001148:	4a2b      	ldr	r2, [pc, #172]	; (80011f8 <HAL_GPIO_Init+0x3a8>)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800114e:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <HAL_GPIO_Init+0x3a8>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43db      	mvns	r3, r3
 8001158:	69fa      	ldr	r2, [r7, #28]
 800115a:	4013      	ands	r3, r2
 800115c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001172:	4a21      	ldr	r2, [pc, #132]	; (80011f8 <HAL_GPIO_Init+0x3a8>)
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8001178:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <HAL_GPIO_Init+0x3a8>)
 800117a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800117e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43db      	mvns	r3, r3
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	4013      	ands	r3, r2
 8001188:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800119e:	4a16      	ldr	r2, [pc, #88]	; (80011f8 <HAL_GPIO_Init+0x3a8>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_GPIO_Init+0x3a8>)
 80011a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80011c4:	69fa      	ldr	r2, [r7, #28]
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_GPIO_Init+0x3a8>)
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	3301      	adds	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f47f ae3d 	bne.w	8000e64 <HAL_GPIO_Init+0x14>
  }
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	3724      	adds	r7, #36	; 0x24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	46022000 	.word	0x46022000
 80011fc:	002f7f7f 	.word	0x002f7f7f

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
 800120c:	4613      	mov	r3, r2
 800120e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001210:	787b      	ldrb	r3, [r7, #1]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 800121c:	e002      	b.n	8001224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4013      	ands	r3, r2
 8001248:	041a      	lsls	r2, r3, #16
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43d9      	mvns	r1, r3
 800124e:	887b      	ldrh	r3, [r7, #2]
 8001250:	400b      	ands	r3, r1
 8001252:	431a      	orrs	r2, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
}
 8001258:	bf00      	nop
 800125a:	3714      	adds	r7, #20
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_ICACHE_Enable+0x1c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_ICACHE_Enable+0x1c>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40030400 	.word	0x40030400

08001284 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 800128c:	4b34      	ldr	r3, [pc, #208]	; (8001360 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800128e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001290:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001294:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	d101      	bne.n	80012a2 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e057      	b.n	8001352 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d90a      	bls.n	80012c0 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	4a2a      	ldr	r2, [pc, #168]	; (8001360 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	60d3      	str	r3, [r2, #12]
 80012be:	e007      	b.n	80012d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80012c0:	4b27      	ldr	r3, [pc, #156]	; (8001360 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80012c8:	4925      	ldr	r1, [pc, #148]	; (8001360 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a24      	ldr	r2, [pc, #144]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	099b      	lsrs	r3, r3, #6
 80012dc:	2232      	movs	r2, #50	; 0x32
 80012de:	fb02 f303 	mul.w	r3, r2, r3
 80012e2:	4a21      	ldr	r2, [pc, #132]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80012e4:	fba2 2303 	umull	r2, r3, r2, r3
 80012e8:	099b      	lsrs	r3, r3, #6
 80012ea:	3301      	adds	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80012ee:	e002      	b.n	80012f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d102      	bne.n	8001308 <HAL_PWREx_ControlVoltageScaling+0x84>
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1f3      	bne.n	80012f0 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d01b      	beq.n	8001346 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a15      	ldr	r2, [pc, #84]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001314:	fba2 2303 	umull	r2, r3, r2, r3
 8001318:	099b      	lsrs	r3, r3, #6
 800131a:	2232      	movs	r2, #50	; 0x32
 800131c:	fb02 f303 	mul.w	r3, r2, r3
 8001320:	4a11      	ldr	r2, [pc, #68]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	099b      	lsrs	r3, r3, #6
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800132c:	e002      	b.n	8001334 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	3b01      	subs	r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8001334:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8001336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001338:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d102      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f3      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e000      	b.n	8001352 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	46020800 	.word	0x46020800
 8001364:	20000000 	.word	0x20000000
 8001368:	10624dd3 	.word	0x10624dd3

0800136c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8001370:	4b04      	ldr	r3, [pc, #16]	; (8001384 <HAL_PWREx_GetVoltageRange+0x18>)
 8001372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001374:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001378:	4618      	mov	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	46020800 	.word	0x46020800

08001388 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8001390:	4b22      	ldr	r3, [pc, #136]	; (800141c <HAL_PWREx_ConfigSupply+0x94>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a22      	ldr	r2, [pc, #136]	; (8001420 <HAL_PWREx_ConfigSupply+0x98>)
 8001396:	fba2 2303 	umull	r2, r3, r2, r3
 800139a:	099b      	lsrs	r3, r3, #6
 800139c:	2232      	movs	r2, #50	; 0x32
 800139e:	fb02 f303 	mul.w	r3, r2, r3
 80013a2:	4a1f      	ldr	r2, [pc, #124]	; (8001420 <HAL_PWREx_ConfigSupply+0x98>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	099b      	lsrs	r3, r3, #6
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d113      	bne.n	80013dc <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80013b4:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_PWREx_ConfigSupply+0x9c>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a1a      	ldr	r2, [pc, #104]	; (8001424 <HAL_PWREx_ConfigSupply+0x9c>)
 80013ba:	f023 0302 	bic.w	r3, r3, #2
 80013be:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80013c0:	e002      	b.n	80013c8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_PWREx_ConfigSupply+0x9c>)
 80013ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d116      	bne.n	8001402 <HAL_PWREx_ConfigSupply+0x7a>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f3      	bne.n	80013c2 <HAL_PWREx_ConfigSupply+0x3a>
 80013da:	e012      	b.n	8001402 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <HAL_PWREx_ConfigSupply+0x9c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a10      	ldr	r2, [pc, #64]	; (8001424 <HAL_PWREx_ConfigSupply+0x9c>)
 80013e2:	f043 0302 	orr.w	r3, r3, #2
 80013e6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80013e8:	e002      	b.n	80013f0 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_PWREx_ConfigSupply+0x9c>)
 80013f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f4:	f003 0302 	and.w	r3, r3, #2
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d102      	bne.n	8001402 <HAL_PWREx_ConfigSupply+0x7a>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f3      	bne.n	80013ea <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e000      	b.n	800140e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000000 	.word	0x20000000
 8001420:	10624dd3 	.word	0x10624dd3
 8001424:	46020800 	.word	0x46020800

08001428 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 800142c:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800142e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	46020800 	.word	0x46020800

08001448 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08e      	sub	sp, #56	; 0x38
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	f000 bec3 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001462:	4b9c      	ldr	r3, [pc, #624]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	f003 030c 	and.w	r3, r3, #12
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800146c:	4b99      	ldr	r3, [pc, #612]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 800146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001470:	f003 0303 	and.w	r3, r3, #3
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8172 	beq.w	8001768 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001486:	2b00      	cmp	r3, #0
 8001488:	d007      	beq.n	800149a <HAL_RCC_OscConfig+0x52>
 800148a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148c:	2b0c      	cmp	r3, #12
 800148e:	f040 80e4 	bne.w	800165a <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	2b01      	cmp	r3, #1
 8001496:	f040 80e0 	bne.w	800165a <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800149a:	4b8e      	ldr	r3, [pc, #568]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <HAL_RCC_OscConfig+0x6c>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d102      	bne.n	80014b4 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	f000 be9a 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b8:	4b86      	ldr	r3, [pc, #536]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d004      	beq.n	80014ce <HAL_RCC_OscConfig+0x86>
 80014c4:	4b83      	ldr	r3, [pc, #524]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80014cc:	e005      	b.n	80014da <HAL_RCC_OscConfig+0x92>
 80014ce:	4b81      	ldr	r3, [pc, #516]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80014d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80014d4:	041b      	lsls	r3, r3, #16
 80014d6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80014da:	4293      	cmp	r3, r2
 80014dc:	d255      	bcs.n	800158a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80014de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d10a      	bne.n	80014fa <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	4618      	mov	r0, r3
 80014ea:	f001 f9d3 	bl	8002894 <RCC_SetFlashLatencyFromMSIRange>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	f000 be77 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80014fa:	4b76      	ldr	r3, [pc, #472]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	4a75      	ldr	r2, [pc, #468]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001500:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001504:	6093      	str	r3, [r2, #8]
 8001506:	4b73      	ldr	r3, [pc, #460]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	4970      	ldr	r1, [pc, #448]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001514:	4313      	orrs	r3, r2
 8001516:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001520:	d309      	bcc.n	8001536 <HAL_RCC_OscConfig+0xee>
 8001522:	4b6c      	ldr	r3, [pc, #432]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	f023 021f 	bic.w	r2, r3, #31
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4969      	ldr	r1, [pc, #420]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001530:	4313      	orrs	r3, r2
 8001532:	60cb      	str	r3, [r1, #12]
 8001534:	e07e      	b.n	8001634 <HAL_RCC_OscConfig+0x1ec>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	2b00      	cmp	r3, #0
 800153c:	da0a      	bge.n	8001554 <HAL_RCC_OscConfig+0x10c>
 800153e:	4b65      	ldr	r3, [pc, #404]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	015b      	lsls	r3, r3, #5
 800154c:	4961      	ldr	r1, [pc, #388]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 800154e:	4313      	orrs	r3, r2
 8001550:	60cb      	str	r3, [r1, #12]
 8001552:	e06f      	b.n	8001634 <HAL_RCC_OscConfig+0x1ec>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800155c:	d30a      	bcc.n	8001574 <HAL_RCC_OscConfig+0x12c>
 800155e:	4b5d      	ldr	r3, [pc, #372]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	029b      	lsls	r3, r3, #10
 800156c:	4959      	ldr	r1, [pc, #356]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 800156e:	4313      	orrs	r3, r2
 8001570:	60cb      	str	r3, [r1, #12]
 8001572:	e05f      	b.n	8001634 <HAL_RCC_OscConfig+0x1ec>
 8001574:	4b57      	ldr	r3, [pc, #348]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	03db      	lsls	r3, r3, #15
 8001582:	4954      	ldr	r1, [pc, #336]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001584:	4313      	orrs	r3, r2
 8001586:	60cb      	str	r3, [r1, #12]
 8001588:	e054      	b.n	8001634 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800158a:	4b52      	ldr	r3, [pc, #328]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	4a51      	ldr	r2, [pc, #324]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001590:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001594:	6093      	str	r3, [r2, #8]
 8001596:	4b4f      	ldr	r3, [pc, #316]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	494c      	ldr	r1, [pc, #304]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80015b0:	d309      	bcc.n	80015c6 <HAL_RCC_OscConfig+0x17e>
 80015b2:	4b48      	ldr	r3, [pc, #288]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	f023 021f 	bic.w	r2, r3, #31
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4945      	ldr	r1, [pc, #276]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	60cb      	str	r3, [r1, #12]
 80015c4:	e028      	b.n	8001618 <HAL_RCC_OscConfig+0x1d0>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	da0a      	bge.n	80015e4 <HAL_RCC_OscConfig+0x19c>
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	015b      	lsls	r3, r3, #5
 80015dc:	493d      	ldr	r1, [pc, #244]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	60cb      	str	r3, [r1, #12]
 80015e2:	e019      	b.n	8001618 <HAL_RCC_OscConfig+0x1d0>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ec:	d30a      	bcc.n	8001604 <HAL_RCC_OscConfig+0x1bc>
 80015ee:	4b39      	ldr	r3, [pc, #228]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	029b      	lsls	r3, r3, #10
 80015fc:	4935      	ldr	r1, [pc, #212]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	60cb      	str	r3, [r1, #12]
 8001602:	e009      	b.n	8001618 <HAL_RCC_OscConfig+0x1d0>
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	03db      	lsls	r3, r3, #15
 8001612:	4930      	ldr	r1, [pc, #192]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001614:	4313      	orrs	r3, r2
 8001616:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10a      	bne.n	8001634 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	4618      	mov	r0, r3
 8001624:	f001 f936 	bl	8002894 <RCC_SetFlashLatencyFromMSIRange>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d002      	beq.n	8001634 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	f000 bdda 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8001634:	f001 f8d8 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001638:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_RCC_OscConfig+0x290>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff facd 	bl	8000bdc <HAL_InitTick>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 808a 	beq.w	8001766 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8001652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001656:	f000 bdc7 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d066      	beq.n	8001730 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8001662:	4b1c      	ldr	r3, [pc, #112]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1b      	ldr	r2, [pc, #108]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800166e:	f7ff faff 	bl	8000c70 <HAL_GetTick>
 8001672:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001674:	e009      	b.n	800168a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001676:	f7ff fafb 	bl	8000c70 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d902      	bls.n	800168a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	f000 bdaf 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0ef      	beq.n	8001676 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 800169c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016a0:	6093      	str	r3, [r2, #8]
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	4909      	ldr	r1, [pc, #36]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80016bc:	d30e      	bcc.n	80016dc <HAL_RCC_OscConfig+0x294>
 80016be:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f023 021f 	bic.w	r2, r3, #31
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4902      	ldr	r1, [pc, #8]	; (80016d4 <HAL_RCC_OscConfig+0x28c>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	60cb      	str	r3, [r1, #12]
 80016d0:	e04a      	b.n	8001768 <HAL_RCC_OscConfig+0x320>
 80016d2:	bf00      	nop
 80016d4:	46020c00 	.word	0x46020c00
 80016d8:	20000004 	.word	0x20000004
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	da0a      	bge.n	80016fa <HAL_RCC_OscConfig+0x2b2>
 80016e4:	4b9b      	ldr	r3, [pc, #620]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	015b      	lsls	r3, r3, #5
 80016f2:	4998      	ldr	r1, [pc, #608]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	60cb      	str	r3, [r1, #12]
 80016f8:	e036      	b.n	8001768 <HAL_RCC_OscConfig+0x320>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001702:	d30a      	bcc.n	800171a <HAL_RCC_OscConfig+0x2d2>
 8001704:	4b93      	ldr	r3, [pc, #588]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	029b      	lsls	r3, r3, #10
 8001712:	4990      	ldr	r1, [pc, #576]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001714:	4313      	orrs	r3, r2
 8001716:	60cb      	str	r3, [r1, #12]
 8001718:	e026      	b.n	8001768 <HAL_RCC_OscConfig+0x320>
 800171a:	4b8e      	ldr	r3, [pc, #568]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	03db      	lsls	r3, r3, #15
 8001728:	498a      	ldr	r1, [pc, #552]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 800172a:	4313      	orrs	r3, r2
 800172c:	60cb      	str	r3, [r1, #12]
 800172e:	e01b      	b.n	8001768 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001730:	4b88      	ldr	r3, [pc, #544]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a87      	ldr	r2, [pc, #540]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800173c:	f7ff fa98 	bl	8000c70 <HAL_GetTick>
 8001740:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001742:	e009      	b.n	8001758 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001744:	f7ff fa94 	bl	8000c70 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d902      	bls.n	8001758 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	f000 bd48 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001758:	4b7e      	ldr	r3, [pc, #504]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1ef      	bne.n	8001744 <HAL_RCC_OscConfig+0x2fc>
 8001764:	e000      	b.n	8001768 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001766:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 8094 	beq.w	800189e <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001778:	2b08      	cmp	r3, #8
 800177a:	d005      	beq.n	8001788 <HAL_RCC_OscConfig+0x340>
 800177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d110      	bne.n	80017a4 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001784:	2b03      	cmp	r3, #3
 8001786:	d10d      	bne.n	80017a4 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001788:	4b72      	ldr	r3, [pc, #456]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8083 	beq.w	800189c <HAL_RCC_OscConfig+0x454>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d17e      	bne.n	800189c <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	f000 bd22 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d106      	bne.n	80017bc <HAL_RCC_OscConfig+0x374>
 80017ae:	4b69      	ldr	r3, [pc, #420]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a68      	ldr	r2, [pc, #416]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e041      	b.n	8001840 <HAL_RCC_OscConfig+0x3f8>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c4:	d112      	bne.n	80017ec <HAL_RCC_OscConfig+0x3a4>
 80017c6:	4b63      	ldr	r3, [pc, #396]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a62      	ldr	r2, [pc, #392]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b60      	ldr	r3, [pc, #384]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a5f      	ldr	r2, [pc, #380]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80017d8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a5c      	ldr	r2, [pc, #368]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80017e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	e029      	b.n	8001840 <HAL_RCC_OscConfig+0x3f8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80017f4:	d112      	bne.n	800181c <HAL_RCC_OscConfig+0x3d4>
 80017f6:	4b57      	ldr	r3, [pc, #348]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a56      	ldr	r2, [pc, #344]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80017fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b54      	ldr	r3, [pc, #336]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a53      	ldr	r2, [pc, #332]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001808:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b51      	ldr	r3, [pc, #324]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a50      	ldr	r2, [pc, #320]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e011      	b.n	8001840 <HAL_RCC_OscConfig+0x3f8>
 800181c:	4b4d      	ldr	r3, [pc, #308]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a4c      	ldr	r2, [pc, #304]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a49      	ldr	r2, [pc, #292]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 800182e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a46      	ldr	r2, [pc, #280]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 800183a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800183e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d014      	beq.n	8001872 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8001848:	f7ff fa12 	bl	8000c70 <HAL_GetTick>
 800184c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184e:	e009      	b.n	8001864 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001850:	f7ff fa0e 	bl	8000c70 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b64      	cmp	r3, #100	; 0x64
 800185c:	d902      	bls.n	8001864 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	f000 bcc2 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001864:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ef      	beq.n	8001850 <HAL_RCC_OscConfig+0x408>
 8001870:	e015      	b.n	800189e <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001872:	f7ff f9fd 	bl	8000c70 <HAL_GetTick>
 8001876:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001878:	e009      	b.n	800188e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800187a:	f7ff f9f9 	bl	8000c70 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b64      	cmp	r3, #100	; 0x64
 8001886:	d902      	bls.n	800188e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	f000 bcad 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188e:	4b31      	ldr	r3, [pc, #196]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1ef      	bne.n	800187a <HAL_RCC_OscConfig+0x432>
 800189a:	e000      	b.n	800189e <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800189c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d066      	beq.n	8001978 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80018aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ac:	2b04      	cmp	r3, #4
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_OscConfig+0x474>
 80018b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d11a      	bne.n	80018ec <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d117      	bne.n	80018ec <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018bc:	4b25      	ldr	r3, [pc, #148]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d006      	beq.n	80018d6 <HAL_RCC_OscConfig+0x48e>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d102      	bne.n	80018d6 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f000 bc89 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	041b      	lsls	r3, r3, #16
 80018e4:	491b      	ldr	r1, [pc, #108]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ea:	e045      	b.n	8001978 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d024      	beq.n	800193e <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80018f4:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a16      	ldr	r2, [pc, #88]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 80018fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fe:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001900:	f7ff f9b6 	bl	8000c70 <HAL_GetTick>
 8001904:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001906:	e009      	b.n	800191c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001908:	f7ff f9b2 	bl	8000c70 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d902      	bls.n	800191c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	f000 bc66 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ef      	beq.n	8001908 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	041b      	lsls	r3, r3, #16
 8001936:	4907      	ldr	r1, [pc, #28]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001938:	4313      	orrs	r3, r2
 800193a:	610b      	str	r3, [r1, #16]
 800193c:	e01c      	b.n	8001978 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800193e:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <HAL_RCC_OscConfig+0x50c>)
 8001944:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800194a:	f7ff f991 	bl	8000c70 <HAL_GetTick>
 800194e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001950:	e00c      	b.n	800196c <HAL_RCC_OscConfig+0x524>
 8001952:	bf00      	nop
 8001954:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff f98a 	bl	8000c70 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d902      	bls.n	800196c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	f000 bc3e 	b.w	80021e8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800196c:	4baf      	ldr	r3, [pc, #700]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ef      	bne.n	8001958 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80c7 	beq.w	8001b14 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198c:	4ba7      	ldr	r3, [pc, #668]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	2b00      	cmp	r3, #0
 8001998:	d111      	bne.n	80019be <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4ba4      	ldr	r3, [pc, #656]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 800199c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a0:	4aa2      	ldr	r2, [pc, #648]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80019aa:	4ba0      	ldr	r3, [pc, #640]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 80019ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	617b      	str	r3, [r7, #20]
 80019b6:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80019b8:	2301      	movs	r3, #1
 80019ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80019be:	4b9c      	ldr	r3, [pc, #624]	; (8001c30 <HAL_RCC_OscConfig+0x7e8>)
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d118      	bne.n	80019fc <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80019ca:	4b99      	ldr	r3, [pc, #612]	; (8001c30 <HAL_RCC_OscConfig+0x7e8>)
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	4a98      	ldr	r2, [pc, #608]	; (8001c30 <HAL_RCC_OscConfig+0x7e8>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d6:	f7ff f94b 	bl	8000c70 <HAL_GetTick>
 80019da:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019de:	f7ff f947 	bl	8000c70 <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e3fb      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80019f0:	4b8f      	ldr	r3, [pc, #572]	; (8001c30 <HAL_RCC_OscConfig+0x7e8>)
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d05f      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001a04:	4b89      	ldr	r3, [pc, #548]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001a06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a0a:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699a      	ldr	r2, [r3, #24]
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d037      	beq.n	8001a8a <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e3da      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d01b      	beq.n	8001a74 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a3c:	4b7b      	ldr	r3, [pc, #492]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a42:	4a7a      	ldr	r2, [pc, #488]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001a44:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001a48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001a4c:	f7ff f910 	bl	8000c70 <HAL_GetTick>
 8001a50:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a54:	f7ff f90c 	bl	8000c70 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e3c0      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001a66:	4b71      	ldr	r3, [pc, #452]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1ef      	bne.n	8001a54 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001a74:	4b6d      	ldr	r3, [pc, #436]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001a76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	496a      	ldr	r1, [pc, #424]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b68      	ldr	r3, [pc, #416]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a90:	4a66      	ldr	r2, [pc, #408]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001a92:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001a9a:	f7ff f8e9 	bl	8000c70 <HAL_GetTick>
 8001a9e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001aa0:	e008      	b.n	8001ab4 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa2:	f7ff f8e5 	bl	8000c70 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d901      	bls.n	8001ab4 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e399      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001ab4:	4b5d      	ldr	r3, [pc, #372]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001ab6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0ef      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x65a>
 8001ac2:	e01b      	b.n	8001afc <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001ac4:	4b59      	ldr	r3, [pc, #356]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001ac6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001aca:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001acc:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001ad0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001ad4:	f7ff f8cc 	bl	8000c70 <HAL_GetTick>
 8001ad8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff f8c8 	bl	8000c70 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e37c      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001aee:	4b4f      	ldr	r3, [pc, #316]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001af0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001af4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1ef      	bne.n	8001adc <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001afc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b04:	4b49      	ldr	r3, [pc, #292]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b0a:	4a48      	ldr	r2, [pc, #288]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001b0c:	f023 0304 	bic.w	r3, r3, #4
 8001b10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8112 	beq.w	8001d46 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b28:	4b40      	ldr	r3, [pc, #256]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d111      	bne.n	8001b5a <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001b38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001b46:	4b39      	ldr	r3, [pc, #228]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001b48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	613b      	str	r3, [r7, #16]
 8001b52:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001b54:	2301      	movs	r3, #1
 8001b56:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b5a:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <HAL_RCC_OscConfig+0x7e8>)
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d118      	bne.n	8001b98 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001b66:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <HAL_RCC_OscConfig+0x7e8>)
 8001b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6a:	4a31      	ldr	r2, [pc, #196]	; (8001c30 <HAL_RCC_OscConfig+0x7e8>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b72:	f7ff f87d 	bl	8000c70 <HAL_GetTick>
 8001b76:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7a:	f7ff f879 	bl	8000c70 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e32d      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_RCC_OscConfig+0x7e8>)
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d01f      	beq.n	8001be4 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d010      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bb0:	4b1e      	ldr	r3, [pc, #120]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001bb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001bb8:	f043 0304 	orr.w	r3, r3, #4
 8001bbc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bc0:	4b1a      	ldr	r3, [pc, #104]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001bc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc6:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001bd0:	e018      	b.n	8001c04 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bd2:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001bd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bd8:	4a14      	ldr	r2, [pc, #80]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001be2:	e00f      	b.n	8001c04 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001be6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bea:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001bec:	f023 0301 	bic.w	r3, r3, #1
 8001bf0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bf4:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001bf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bfa:	4a0c      	ldr	r2, [pc, #48]	; (8001c2c <HAL_RCC_OscConfig+0x7e4>)
 8001bfc:	f023 0304 	bic.w	r3, r3, #4
 8001c00:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d058      	beq.n	8001cbe <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f830 	bl	8000c70 <HAL_GetTick>
 8001c10:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c12:	e00f      	b.n	8001c34 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c14:	f7ff f82c 	bl	8000c70 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d906      	bls.n	8001c34 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e2de      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
 8001c2a:	bf00      	nop
 8001c2c:	46020c00 	.word	0x46020c00
 8001c30:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c34:	4b9c      	ldr	r3, [pc, #624]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0e8      	beq.n	8001c14 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d01b      	beq.n	8001c86 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c4e:	4b96      	ldr	r3, [pc, #600]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c54:	4a94      	ldr	r2, [pc, #592]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7ff f806 	bl	8000c70 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e2b8      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001c76:	4b8c      	ldr	r3, [pc, #560]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ed      	beq.n	8001c60 <HAL_RCC_OscConfig+0x818>
 8001c84:	e053      	b.n	8001d2e <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001c86:	4b88      	ldr	r3, [pc, #544]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c8c:	4a86      	ldr	r2, [pc, #536]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001c8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001c96:	e00a      	b.n	8001cae <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c98:	f7fe ffea 	bl	8000c70 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e29c      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001cae:	4b7e      	ldr	r3, [pc, #504]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001cb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1ed      	bne.n	8001c98 <HAL_RCC_OscConfig+0x850>
 8001cbc:	e037      	b.n	8001d2e <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001cbe:	f7fe ffd7 	bl	8000c70 <HAL_GetTick>
 8001cc2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7fe ffd3 	bl	8000c70 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e285      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cdc:	4b72      	ldr	r3, [pc, #456]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1ed      	bne.n	8001cc6 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001cea:	4b6f      	ldr	r3, [pc, #444]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001cec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d01a      	beq.n	8001d2e <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001cf8:	4b6b      	ldr	r3, [pc, #428]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001cfa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cfe:	4a6a      	ldr	r2, [pc, #424]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001d00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d04:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7fe ffb1 	bl	8000c70 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e263      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001d20:	4b61      	ldr	r3, [pc, #388]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ed      	bne.n	8001d0a <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d2e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d36:	4b5c      	ldr	r3, [pc, #368]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d3c:	4a5a      	ldr	r2, [pc, #360]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001d3e:	f023 0304 	bic.w	r3, r3, #4
 8001d42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0320 	and.w	r3, r3, #32
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d036      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d019      	beq.n	8001d8e <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001d5a:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d64:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001d66:	f7fe ff83 	bl	8000c70 <HAL_GetTick>
 8001d6a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d6e:	f7fe ff7f 	bl	8000c70 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e233      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001d80:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCC_OscConfig+0x926>
 8001d8c:	e018      	b.n	8001dc0 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001d8e:	4b46      	ldr	r3, [pc, #280]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a45      	ldr	r2, [pc, #276]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d98:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001d9a:	f7fe ff69 	bl	8000c70 <HAL_GetTick>
 8001d9e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001da2:	f7fe ff65 	bl	8000c70 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e219      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001db4:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d036      	beq.n	8001e3a <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d019      	beq.n	8001e08 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001dd4:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a33      	ldr	r2, [pc, #204]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001dda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dde:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001de0:	f7fe ff46 	bl	8000c70 <HAL_GetTick>
 8001de4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001de8:	f7fe ff42 	bl	8000c70 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1f6      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x9a0>
 8001e06:	e018      	b.n	8001e3a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001e0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e12:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001e14:	f7fe ff2c 	bl	8000c70 <HAL_GetTick>
 8001e18:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001e1c:	f7fe ff28 	bl	8000c70 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e1dc      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d07f      	beq.n	8001f46 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d062      	beq.n	8001f14 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001e4e:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	4a15      	ldr	r2, [pc, #84]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001e54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e58:	6093      	str	r3, [r2, #8]
 8001e5a:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	4910      	ldr	r1, [pc, #64]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001e74:	d309      	bcc.n	8001e8a <HAL_RCC_OscConfig+0xa42>
 8001e76:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f023 021f 	bic.w	r2, r3, #31
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a1b      	ldr	r3, [r3, #32]
 8001e82:	4909      	ldr	r1, [pc, #36]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	60cb      	str	r3, [r1, #12]
 8001e88:	e02a      	b.n	8001ee0 <HAL_RCC_OscConfig+0xa98>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	da0c      	bge.n	8001eac <HAL_RCC_OscConfig+0xa64>
 8001e92:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	015b      	lsls	r3, r3, #5
 8001ea0:	4901      	ldr	r1, [pc, #4]	; (8001ea8 <HAL_RCC_OscConfig+0xa60>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60cb      	str	r3, [r1, #12]
 8001ea6:	e01b      	b.n	8001ee0 <HAL_RCC_OscConfig+0xa98>
 8001ea8:	46020c00 	.word	0x46020c00
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb4:	d30a      	bcc.n	8001ecc <HAL_RCC_OscConfig+0xa84>
 8001eb6:	4ba5      	ldr	r3, [pc, #660]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	029b      	lsls	r3, r3, #10
 8001ec4:	49a1      	ldr	r1, [pc, #644]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	60cb      	str	r3, [r1, #12]
 8001eca:	e009      	b.n	8001ee0 <HAL_RCC_OscConfig+0xa98>
 8001ecc:	4b9f      	ldr	r3, [pc, #636]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	03db      	lsls	r3, r3, #15
 8001eda:	499c      	ldr	r1, [pc, #624]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001ee0:	4b9a      	ldr	r3, [pc, #616]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a99      	ldr	r2, [pc, #612]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001ee6:	f043 0310 	orr.w	r3, r3, #16
 8001eea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001eec:	f7fe fec0 	bl	8000c70 <HAL_GetTick>
 8001ef0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001ef4:	f7fe febc 	bl	8000c70 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e170      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001f06:	4b91      	ldr	r3, [pc, #580]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0320 	and.w	r3, r3, #32
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xaac>
 8001f12:	e018      	b.n	8001f46 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001f14:	4b8d      	ldr	r3, [pc, #564]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a8c      	ldr	r2, [pc, #560]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001f1a:	f023 0310 	bic.w	r3, r3, #16
 8001f1e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f20:	f7fe fea6 	bl	8000c70 <HAL_GetTick>
 8001f24:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001f28:	f7fe fea2 	bl	8000c70 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e156      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001f3a:	4b84      	ldr	r3, [pc, #528]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1f0      	bne.n	8001f28 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 814b 	beq.w	80021e6 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f56:	4b7d      	ldr	r3, [pc, #500]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b0c      	cmp	r3, #12
 8001f60:	f000 80fa 	beq.w	8002158 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	f040 80cc 	bne.w	8002106 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001f6e:	4b77      	ldr	r3, [pc, #476]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a76      	ldr	r2, [pc, #472]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001f74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f78:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001f7a:	f7fe fe79 	bl	8000c70 <HAL_GetTick>
 8001f7e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f80:	e008      	b.n	8001f94 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f82:	f7fe fe75 	bl	8000c70 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	2b02      	cmp	r3, #2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e129      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001f94:	4b6d      	ldr	r3, [pc, #436]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1f0      	bne.n	8001f82 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d111      	bne.n	8001fd2 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	4b67      	ldr	r3, [pc, #412]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb4:	4a65      	ldr	r2, [pc, #404]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001fb6:	f043 0304 	orr.w	r3, r3, #4
 8001fba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001fbe:	4b63      	ldr	r3, [pc, #396]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001fd2:	4b5f      	ldr	r3, [pc, #380]	; (8002150 <HAL_RCC_OscConfig+0xd08>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fde:	d102      	bne.n	8001fe6 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001fe6:	4b5a      	ldr	r3, [pc, #360]	; (8002150 <HAL_RCC_OscConfig+0xd08>)
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	4a59      	ldr	r2, [pc, #356]	; (8002150 <HAL_RCC_OscConfig+0xd08>)
 8001fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001ff2:	4b56      	ldr	r3, [pc, #344]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002006:	3a01      	subs	r2, #1
 8002008:	0212      	lsls	r2, r2, #8
 800200a:	4311      	orrs	r1, r2
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002010:	430a      	orrs	r2, r1
 8002012:	494e      	ldr	r1, [pc, #312]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8002014:	4313      	orrs	r3, r2
 8002016:	628b      	str	r3, [r1, #40]	; 0x28
 8002018:	4b4c      	ldr	r3, [pc, #304]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 800201a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201c:	4b4d      	ldr	r3, [pc, #308]	; (8002154 <HAL_RCC_OscConfig+0xd0c>)
 800201e:	4013      	ands	r3, r2
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002024:	3a01      	subs	r2, #1
 8002026:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800202e:	3a01      	subs	r2, #1
 8002030:	0252      	lsls	r2, r2, #9
 8002032:	b292      	uxth	r2, r2
 8002034:	4311      	orrs	r1, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800203a:	3a01      	subs	r2, #1
 800203c:	0412      	lsls	r2, r2, #16
 800203e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002042:	4311      	orrs	r1, r2
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002048:	3a01      	subs	r2, #1
 800204a:	0612      	lsls	r2, r2, #24
 800204c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002050:	430a      	orrs	r2, r1
 8002052:	493e      	ldr	r1, [pc, #248]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8002054:	4313      	orrs	r3, r2
 8002056:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002058:	4b3c      	ldr	r3, [pc, #240]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 800205a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205c:	4a3b      	ldr	r2, [pc, #236]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 800205e:	f023 0310 	bic.w	r3, r3, #16
 8002062:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8002064:	4b39      	ldr	r3, [pc, #228]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800206c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002074:	00d2      	lsls	r2, r2, #3
 8002076:	4935      	ldr	r1, [pc, #212]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8002078:	4313      	orrs	r3, r2
 800207a:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 800207c:	4b33      	ldr	r3, [pc, #204]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 800207e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002080:	4a32      	ldr	r2, [pc, #200]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8002082:	f043 0310 	orr.w	r3, r3, #16
 8002086:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 800208a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208c:	f023 020c 	bic.w	r2, r3, #12
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002094:	492d      	ldr	r1, [pc, #180]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8002096:	4313      	orrs	r3, r2
 8002098:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800209a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d105      	bne.n	80020ae <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80020a2:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_RCC_OscConfig+0xd08>)
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	4a2a      	ldr	r2, [pc, #168]	; (8002150 <HAL_RCC_OscConfig+0xd08>)
 80020a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020ac:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80020ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d107      	bne.n	80020c6 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80020b6:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 80020b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020bc:	4a23      	ldr	r2, [pc, #140]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 80020be:	f023 0304 	bic.w	r3, r3, #4
 80020c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020c6:	4b21      	ldr	r3, [pc, #132]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	4a20      	ldr	r2, [pc, #128]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 80020cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020d0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80020d2:	4b1e      	ldr	r3, [pc, #120]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 80020d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020dc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80020de:	f7fe fdc7 	bl	8000c70 <HAL_GetTick>
 80020e2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e6:	f7fe fdc3 	bl	8000c70 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e077      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0xc9e>
 8002104:	e06f      	b.n	80021e6 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a10      	ldr	r2, [pc, #64]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 800210c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002110:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002112:	f7fe fdad 	bl	8000c70 <HAL_GetTick>
 8002116:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211a:	f7fe fda9 	bl	8000c70 <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e05d      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800212c:	4b07      	ldr	r3, [pc, #28]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f0      	bne.n	800211a <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 800213a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213c:	4a03      	ldr	r2, [pc, #12]	; (800214c <HAL_RCC_OscConfig+0xd04>)
 800213e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8002142:	f023 0303 	bic.w	r3, r3, #3
 8002146:	6293      	str	r3, [r2, #40]	; 0x28
 8002148:	e04d      	b.n	80021e6 <HAL_RCC_OscConfig+0xd9e>
 800214a:	bf00      	nop
 800214c:	46020c00 	.word	0x46020c00
 8002150:	46020800 	.word	0x46020800
 8002154:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <HAL_RCC_OscConfig+0xda8>)
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_RCC_OscConfig+0xda8>)
 8002160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002162:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002168:	2b01      	cmp	r3, #1
 800216a:	d03a      	beq.n	80021e2 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	f003 0203 	and.w	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002176:	429a      	cmp	r2, r3
 8002178:	d133      	bne.n	80021e2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d12a      	bne.n	80021e2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	0b1b      	lsrs	r3, r3, #12
 8002190:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d122      	bne.n	80021e2 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d11a      	bne.n	80021e2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	0a5b      	lsrs	r3, r3, #9
 80021b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d111      	bne.n	80021e2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	0c1b      	lsrs	r3, r3, #16
 80021c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ca:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d108      	bne.n	80021e2 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	0e1b      	lsrs	r3, r3, #24
 80021d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3738      	adds	r7, #56	; 0x38
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	46020c00 	.word	0x46020c00

080021f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e1d9      	b.n	80025bc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002208:	4b9b      	ldr	r3, [pc, #620]	; (8002478 <HAL_RCC_ClockConfig+0x284>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 030f 	and.w	r3, r3, #15
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d910      	bls.n	8002238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002216:	4b98      	ldr	r3, [pc, #608]	; (8002478 <HAL_RCC_ClockConfig+0x284>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f023 020f 	bic.w	r2, r3, #15
 800221e:	4996      	ldr	r1, [pc, #600]	; (8002478 <HAL_RCC_ClockConfig+0x284>)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	4313      	orrs	r3, r2
 8002224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	4b94      	ldr	r3, [pc, #592]	; (8002478 <HAL_RCC_ClockConfig+0x284>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e1c1      	b.n	80025bc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	d010      	beq.n	8002266 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695a      	ldr	r2, [r3, #20]
 8002248:	4b8c      	ldr	r3, [pc, #560]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002250:	429a      	cmp	r2, r3
 8002252:	d908      	bls.n	8002266 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002254:	4b89      	ldr	r3, [pc, #548]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 8002256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002258:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	4986      	ldr	r1, [pc, #536]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 8002262:	4313      	orrs	r3, r2
 8002264:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d012      	beq.n	8002298 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691a      	ldr	r2, [r3, #16]
 8002276:	4b81      	ldr	r3, [pc, #516]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	091b      	lsrs	r3, r3, #4
 800227c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002280:	429a      	cmp	r2, r3
 8002282:	d909      	bls.n	8002298 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002284:	4b7d      	ldr	r3, [pc, #500]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	497a      	ldr	r1, [pc, #488]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 8002294:	4313      	orrs	r3, r2
 8002296:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d010      	beq.n	80022c6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	4b74      	ldr	r3, [pc, #464]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d908      	bls.n	80022c6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80022b4:	4b71      	ldr	r3, [pc, #452]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	496e      	ldr	r1, [pc, #440]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d010      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	4b69      	ldr	r3, [pc, #420]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	429a      	cmp	r2, r3
 80022e0:	d908      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80022e2:	4b66      	ldr	r3, [pc, #408]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	f023 020f 	bic.w	r2, r3, #15
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4963      	ldr	r1, [pc, #396]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80d2 	beq.w	80024a6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d143      	bne.n	8002396 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230e:	4b5b      	ldr	r3, [pc, #364]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 8002310:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d110      	bne.n	800233e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800231c:	4b57      	ldr	r3, [pc, #348]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 800231e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002322:	4a56      	ldr	r2, [pc, #344]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800232c:	4b53      	ldr	r3, [pc, #332]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 800232e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800233a:	2301      	movs	r3, #1
 800233c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800233e:	f7fe fc97 	bl	8000c70 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002344:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <HAL_RCC_ClockConfig+0x28c>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00f      	beq.n	8002370 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002352:	f7fe fc8d 	bl	8000c70 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e12b      	b.n	80025bc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002364:	4b46      	ldr	r3, [pc, #280]	; (8002480 <HAL_RCC_ClockConfig+0x28c>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002370:	7dfb      	ldrb	r3, [r7, #23]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002376:	4b41      	ldr	r3, [pc, #260]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 8002378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800237c:	4a3f      	ldr	r2, [pc, #252]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 800237e:	f023 0304 	bic.w	r3, r3, #4
 8002382:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002386:	4b3d      	ldr	r3, [pc, #244]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d121      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e112      	b.n	80025bc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b02      	cmp	r3, #2
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800239e:	4b37      	ldr	r3, [pc, #220]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d115      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e106      	b.n	80025bc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e0fa      	b.n	80025bc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c6:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d101      	bne.n	80023d6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0f2      	b.n	80025bc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80023d6:	4b29      	ldr	r3, [pc, #164]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	f023 0203 	bic.w	r2, r3, #3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4926      	ldr	r1, [pc, #152]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80023e8:	f7fe fc42 	bl	8000c70 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d112      	bne.n	800241c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7fe fc3a 	bl	8000c70 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e0d6      	b.n	80025bc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800240e:	4b1b      	ldr	r3, [pc, #108]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 030c 	and.w	r3, r3, #12
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d1ee      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x204>
 800241a:	e044      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d112      	bne.n	800244a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002424:	e00a      	b.n	800243c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002426:	f7fe fc23 	bl	8000c70 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0bf      	b.n	80025bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	f003 030c 	and.w	r3, r3, #12
 8002444:	2b08      	cmp	r3, #8
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_ClockConfig+0x232>
 8002448:	e02d      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d123      	bne.n	800249a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7fe fc0c 	bl	8000c70 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e0a8      	b.n	80025bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800246a:	4b04      	ldr	r3, [pc, #16]	; (800247c <HAL_RCC_ClockConfig+0x288>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1ee      	bne.n	8002454 <HAL_RCC_ClockConfig+0x260>
 8002476:	e016      	b.n	80024a6 <HAL_RCC_ClockConfig+0x2b2>
 8002478:	40022000 	.word	0x40022000
 800247c:	46020c00 	.word	0x46020c00
 8002480:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fe fbf4 	bl	8000c70 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e090      	b.n	80025bc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800249a:	4b4a      	ldr	r3, [pc, #296]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	d1ee      	bne.n	8002484 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d010      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	4b43      	ldr	r3, [pc, #268]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	f003 030f 	and.w	r3, r3, #15
 80024be:	429a      	cmp	r2, r3
 80024c0:	d208      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80024c2:	4b40      	ldr	r3, [pc, #256]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	f023 020f 	bic.w	r2, r3, #15
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	493d      	ldr	r1, [pc, #244]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <HAL_RCC_ClockConfig+0x3d4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d210      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b39      	ldr	r3, [pc, #228]	; (80025c8 <HAL_RCC_ClockConfig+0x3d4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 020f 	bic.w	r2, r3, #15
 80024ea:	4937      	ldr	r1, [pc, #220]	; (80025c8 <HAL_RCC_ClockConfig+0x3d4>)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <HAL_RCC_ClockConfig+0x3d4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e05b      	b.n	80025bc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d010      	beq.n	8002532 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	4b2b      	ldr	r3, [pc, #172]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800251c:	429a      	cmp	r2, r3
 800251e:	d208      	bcs.n	8002532 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002520:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4925      	ldr	r1, [pc, #148]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 800252e:	4313      	orrs	r3, r2
 8002530:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d012      	beq.n	8002564 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	691a      	ldr	r2, [r3, #16]
 8002542:	4b20      	ldr	r3, [pc, #128]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800254c:	429a      	cmp	r2, r3
 800254e:	d209      	bcs.n	8002564 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002550:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	4919      	ldr	r1, [pc, #100]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	d010      	beq.n	8002592 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	695a      	ldr	r2, [r3, #20]
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002578:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800257c:	429a      	cmp	r2, r3
 800257e:	d208      	bcs.n	8002592 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	490d      	ldr	r1, [pc, #52]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 800258e:	4313      	orrs	r3, r2
 8002590:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002592:	f000 f821 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8002596:	4602      	mov	r2, r0
 8002598:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_RCC_ClockConfig+0x3d0>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	f003 030f 	and.w	r3, r3, #15
 80025a0:	490a      	ldr	r1, [pc, #40]	; (80025cc <HAL_RCC_ClockConfig+0x3d8>)
 80025a2:	5ccb      	ldrb	r3, [r1, r3]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <HAL_RCC_ClockConfig+0x3dc>)
 80025aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025ac:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_RCC_ClockConfig+0x3e0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe fb13 	bl	8000bdc <HAL_InitTick>
 80025b6:	4603      	mov	r3, r0
 80025b8:	73fb      	strb	r3, [r7, #15]

  return status;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	46020c00 	.word	0x46020c00
 80025c8:	40022000 	.word	0x40022000
 80025cc:	08006694 	.word	0x08006694
 80025d0:	20000000 	.word	0x20000000
 80025d4:	20000004 	.word	0x20000004

080025d8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	b08b      	sub	sp, #44	; 0x2c
 80025dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e6:	4b7b      	ldr	r3, [pc, #492]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f0:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80025f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x34>
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	2b0c      	cmp	r3, #12
 8002604:	d121      	bne.n	800264a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d11e      	bne.n	800264a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800260c:	4b71      	ldr	r3, [pc, #452]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d107      	bne.n	8002628 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002618:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800261a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800261e:	0b1b      	lsrs	r3, r3, #12
 8002620:	f003 030f 	and.w	r3, r3, #15
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
 8002626:	e005      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002628:	4b6a      	ldr	r3, [pc, #424]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	0f1b      	lsrs	r3, r3, #28
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002634:	4a68      	ldr	r2, [pc, #416]	; (80027d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d110      	bne.n	8002666 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002648:	e00d      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800264a:	4b62      	ldr	r3, [pc, #392]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 030c 	and.w	r3, r3, #12
 8002652:	2b04      	cmp	r3, #4
 8002654:	d102      	bne.n	800265c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002656:	4b61      	ldr	r3, [pc, #388]	; (80027dc <HAL_RCC_GetSysClockFreq+0x204>)
 8002658:	623b      	str	r3, [r7, #32]
 800265a:	e004      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b08      	cmp	r3, #8
 8002660:	d101      	bne.n	8002666 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002662:	4b5e      	ldr	r3, [pc, #376]	; (80027dc <HAL_RCC_GetSysClockFreq+0x204>)
 8002664:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	2b0c      	cmp	r3, #12
 800266a:	f040 80ac 	bne.w	80027c6 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800266e:	4b59      	ldr	r3, [pc, #356]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002678:	4b56      	ldr	r3, [pc, #344]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3301      	adds	r3, #1
 8002684:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002686:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268a:	091b      	lsrs	r3, r3, #4
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002692:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	08db      	lsrs	r3, r3, #3
 8002698:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800269c:	68ba      	ldr	r2, [r7, #8]
 800269e:	fb02 f303 	mul.w	r3, r2, r3
 80026a2:	ee07 3a90 	vmov	s15, r3
 80026a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026aa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	f000 8086 	beq.w	80027c2 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d003      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0xec>
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d022      	beq.n	8002708 <HAL_RCC_GetSysClockFreq+0x130>
 80026c2:	e043      	b.n	800274c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	ee07 3a90 	vmov	s15, r3
 80026ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ce:	eddf 6a44 	vldr	s13, [pc, #272]	; 80027e0 <HAL_RCC_GetSysClockFreq+0x208>
 80026d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026d6:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80026d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80026e6:	ed97 6a01 	vldr	s12, [r7, #4]
 80026ea:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80027e4 <HAL_RCC_GetSysClockFreq+0x20c>
 80026ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80026f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80026fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002702:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002706:	e046      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	ee07 3a90 	vmov	s15, r3
 800270e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002712:	eddf 6a33 	vldr	s13, [pc, #204]	; 80027e0 <HAL_RCC_GetSysClockFreq+0x208>
 8002716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800271a:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800271c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800272a:	ed97 6a01 	vldr	s12, [r7, #4]
 800272e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80027e4 <HAL_RCC_GetSysClockFreq+0x20c>
 8002732:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002736:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800273a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800273e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002746:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800274a:	e024      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002760:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002774:	ed97 6a01 	vldr	s12, [r7, #4]
 8002778:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80027e4 <HAL_RCC_GetSysClockFreq+0x20c>
 800277c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002780:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002784:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002788:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800278c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002790:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002794:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002796:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800279a:	0e1b      	lsrs	r3, r3, #24
 800279c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80027a0:	3301      	adds	r3, #1
 80027a2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80027b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027ba:	ee17 3a90 	vmov	r3, s15
 80027be:	623b      	str	r3, [r7, #32]
 80027c0:	e001      	b.n	80027c6 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80027c6:	6a3b      	ldr	r3, [r7, #32]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	372c      	adds	r7, #44	; 0x2c
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	46020c00 	.word	0x46020c00
 80027d8:	080066ac 	.word	0x080066ac
 80027dc:	00f42400 	.word	0x00f42400
 80027e0:	4b742400 	.word	0x4b742400
 80027e4:	46000000 	.word	0x46000000

080027e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80027ec:	f7ff fef4 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b07      	ldr	r3, [pc, #28]	; (8002810 <HAL_RCC_GetHCLKFreq+0x28>)
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	4906      	ldr	r1, [pc, #24]	; (8002814 <HAL_RCC_GetHCLKFreq+0x2c>)
 80027fc:	5ccb      	ldrb	r3, [r1, r3]
 80027fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002802:	4a05      	ldr	r2, [pc, #20]	; (8002818 <HAL_RCC_GetHCLKFreq+0x30>)
 8002804:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <HAL_RCC_GetHCLKFreq+0x30>)
 8002808:	681b      	ldr	r3, [r3, #0]
}
 800280a:	4618      	mov	r0, r3
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	46020c00 	.word	0x46020c00
 8002814:	08006694 	.word	0x08006694
 8002818:	20000000 	.word	0x20000000

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002820:	f7ff ffe2 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	; (800283c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	091b      	lsrs	r3, r3, #4
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	46020c00 	.word	0x46020c00
 8002840:	080066a4 	.word	0x080066a4

08002844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8002848:	f7ff ffce 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	0a1b      	lsrs	r3, r3, #8
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	46020c00 	.word	0x46020c00
 8002868:	080066a4 	.word	0x080066a4

0800286c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8002870:	f7ff ffba 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetPCLK3Freq+0x20>)
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <HAL_RCC_GetPCLK3Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	46020c00 	.word	0x46020c00
 8002890:	080066a4 	.word	0x080066a4

08002894 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800289c:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800289e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d003      	beq.n	80028b2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80028aa:	f7fe fd5f 	bl	800136c <HAL_PWREx_GetVoltageRange>
 80028ae:	6178      	str	r0, [r7, #20]
 80028b0:	e019      	b.n	80028e6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028b2:	4b39      	ldr	r3, [pc, #228]	; (8002998 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80028b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b8:	4a37      	ldr	r2, [pc, #220]	; (8002998 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80028c2:	4b35      	ldr	r3, [pc, #212]	; (8002998 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80028c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80028d0:	f7fe fd4c 	bl	800136c <HAL_PWREx_GetVoltageRange>
 80028d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80028d6:	4b30      	ldr	r3, [pc, #192]	; (8002998 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80028d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028dc:	4a2e      	ldr	r2, [pc, #184]	; (8002998 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80028de:	f023 0304 	bic.w	r3, r3, #4
 80028e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028ec:	d003      	beq.n	80028f6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028f4:	d109      	bne.n	800290a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028fc:	d202      	bcs.n	8002904 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80028fe:	2301      	movs	r3, #1
 8002900:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002902:	e033      	b.n	800296c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002904:	2300      	movs	r3, #0
 8002906:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002908:	e030      	b.n	800296c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002910:	d208      	bcs.n	8002924 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002918:	d102      	bne.n	8002920 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800291a:	2303      	movs	r3, #3
 800291c:	613b      	str	r3, [r7, #16]
 800291e:	e025      	b.n	800296c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e035      	b.n	8002990 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800292a:	d90f      	bls.n	800294c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002938:	d902      	bls.n	8002940 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	e015      	b.n	800296c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002940:	2301      	movs	r3, #1
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	e012      	b.n	800296c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002946:	2300      	movs	r3, #0
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	e00f      	b.n	800296c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002952:	d109      	bne.n	8002968 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800295a:	d102      	bne.n	8002962 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800295c:	2301      	movs	r3, #1
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	e004      	b.n	800296c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002962:	2302      	movs	r3, #2
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	e001      	b.n	800296c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002968:	2301      	movs	r3, #1
 800296a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 020f 	bic.w	r2, r3, #15
 8002974:	4909      	ldr	r1, [pc, #36]	; (800299c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	429a      	cmp	r2, r3
 8002988:	d001      	beq.n	800298e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800298e:	2300      	movs	r3, #0
}
 8002990:	4618      	mov	r0, r3
 8002992:	3718      	adds	r7, #24
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	46020c00 	.word	0x46020c00
 800299c:	40022000 	.word	0x40022000

080029a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80029a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a4:	b0ba      	sub	sp, #232	; 0xe8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029ac:	2300      	movs	r3, #0
 80029ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029b2:	2300      	movs	r3, #0
 80029b4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c0:	f002 0401 	and.w	r4, r2, #1
 80029c4:	2500      	movs	r5, #0
 80029c6:	ea54 0305 	orrs.w	r3, r4, r5
 80029ca:	d00b      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80029cc:	4bcb      	ldr	r3, [pc, #812]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029d2:	f023 0103 	bic.w	r1, r3, #3
 80029d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029dc:	4ac7      	ldr	r2, [pc, #796]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029de:	430b      	orrs	r3, r1
 80029e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	f002 0802 	and.w	r8, r2, #2
 80029f0:	f04f 0900 	mov.w	r9, #0
 80029f4:	ea58 0309 	orrs.w	r3, r8, r9
 80029f8:	d00b      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80029fa:	4bc0      	ldr	r3, [pc, #768]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80029fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a00:	f023 010c 	bic.w	r1, r3, #12
 8002a04:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	4abc      	ldr	r2, [pc, #752]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	f002 0a04 	and.w	sl, r2, #4
 8002a1e:	f04f 0b00 	mov.w	fp, #0
 8002a22:	ea5a 030b 	orrs.w	r3, sl, fp
 8002a26:	d00b      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002a28:	4bb4      	ldr	r3, [pc, #720]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002a32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a38:	4ab0      	ldr	r2, [pc, #704]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a3a:	430b      	orrs	r3, r1
 8002a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a48:	f002 0308 	and.w	r3, r2, #8
 8002a4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	d00b      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002a60:	4ba6      	ldr	r3, [pc, #664]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	4aa2      	ldr	r2, [pc, #648]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a72:	430b      	orrs	r3, r1
 8002a74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f002 0310 	and.w	r3, r2, #16
 8002a84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4313      	orrs	r3, r2
 8002a96:	d00b      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002a98:	4b98      	ldr	r3, [pc, #608]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa8:	4a94      	ldr	r2, [pc, #592]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002aaa:	430b      	orrs	r3, r1
 8002aac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ab0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	f002 0320 	and.w	r3, r2, #32
 8002abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ac6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002aca:	460b      	mov	r3, r1
 8002acc:	4313      	orrs	r3, r2
 8002ace:	d00b      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002ad0:	4b8a      	ldr	r3, [pc, #552]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ad6:	f023 0107 	bic.w	r1, r3, #7
 8002ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ae0:	4a86      	ldr	r2, [pc, #536]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002af4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002af8:	2300      	movs	r3, #0
 8002afa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002afe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002b02:	460b      	mov	r3, r1
 8002b04:	4313      	orrs	r3, r2
 8002b06:	d00b      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002b08:	4b7c      	ldr	r3, [pc, #496]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b18:	4a78      	ldr	r2, [pc, #480]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b1a:	430b      	orrs	r3, r1
 8002b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b28:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b30:	2300      	movs	r3, #0
 8002b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002b36:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	d00b      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002b40:	4b6e      	ldr	r3, [pc, #440]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b50:	4a6a      	ldr	r2, [pc, #424]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b52:	430b      	orrs	r3, r1
 8002b54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002b64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002b6e:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4313      	orrs	r3, r2
 8002b76:	d00b      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002b78:	4b60      	ldr	r3, [pc, #384]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b88:	4a5c      	ldr	r2, [pc, #368]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b98:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002b9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ba6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002baa:	460b      	mov	r3, r1
 8002bac:	4313      	orrs	r3, r2
 8002bae:	d00b      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002bb0:	4b52      	ldr	r3, [pc, #328]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bb6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002bba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bc0:	4a4e      	ldr	r2, [pc, #312]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002bd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002bde:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002be2:	460b      	mov	r3, r1
 8002be4:	4313      	orrs	r3, r2
 8002be6:	d00b      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002be8:	4b44      	ldr	r3, [pc, #272]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bee:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bf6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bf8:	4a40      	ldr	r2, [pc, #256]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002bfa:	430b      	orrs	r3, r1
 8002bfc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002c0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c16:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	d00b      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002c20:	4b36      	ldr	r3, [pc, #216]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c26:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c30:	4a32      	ldr	r2, [pc, #200]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c32:	430b      	orrs	r3, r1
 8002c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002c38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c40:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c4e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002c52:	460b      	mov	r3, r1
 8002c54:	4313      	orrs	r3, r2
 8002c56:	d00c      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002c58:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6a:	4a24      	ldr	r2, [pc, #144]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c6c:	430b      	orrs	r3, r1
 8002c6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002c7e:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c80:	2300      	movs	r3, #0
 8002c82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	d04f      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002c8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	2b80      	cmp	r3, #128	; 0x80
 8002c98:	d02d      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d827      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002c9e:	2b60      	cmp	r3, #96	; 0x60
 8002ca0:	d02e      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002ca2:	2b60      	cmp	r3, #96	; 0x60
 8002ca4:	d823      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d006      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8002caa:	2b40      	cmp	r3, #64	; 0x40
 8002cac:	d81f      	bhi.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d009      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d011      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8002cb6:	e01a      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cb8:	4b10      	ldr	r3, [pc, #64]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002cbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002cc4:	e01d      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002cc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cca:	3308      	adds	r3, #8
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f002 f981 	bl	8004fd4 <RCCEx_PLL2_Config>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002cd8:	e013      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cde:	332c      	adds	r3, #44	; 0x2c
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f002 fa0f 	bl	8005104 <RCCEx_PLL3_Config>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002cec:	e009      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002cf4:	e005      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8002cf6:	bf00      	nop
 8002cf8:	e003      	b.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8002cfa:	bf00      	nop
 8002cfc:	46020c00 	.word	0x46020c00
        break;
 8002d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d02:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10d      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002d0a:	4bb6      	ldr	r3, [pc, #728]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002d0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002d10:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8002d14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d1c:	4ab1      	ldr	r2, [pc, #708]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002d24:	e003      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d26:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002d2a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d36:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002d3a:	673b      	str	r3, [r7, #112]	; 0x70
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	677b      	str	r3, [r7, #116]	; 0x74
 8002d40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002d44:	460b      	mov	r3, r1
 8002d46:	4313      	orrs	r3, r2
 8002d48:	d053      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002d4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d56:	d033      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5c:	d82c      	bhi.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002d5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d62:	d02f      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8002d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d68:	d826      	bhi.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002d6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8002d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d74:	d820      	bhi.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8002d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7e:	d011      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002d80:	e01a      	b.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d82:	4b98      	ldr	r3, [pc, #608]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	4a97      	ldr	r2, [pc, #604]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d8c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002d8e:	e01a      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d94:	3308      	adds	r3, #8
 8002d96:	4618      	mov	r0, r3
 8002d98:	f002 f91c 	bl	8004fd4 <RCCEx_PLL2_Config>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002da2:	e010      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002da4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002da8:	332c      	adds	r3, #44	; 0x2c
 8002daa:	4618      	mov	r0, r3
 8002dac:	f002 f9aa 	bl	8005104 <RCCEx_PLL3_Config>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002db6:	e006      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002dbe:	e002      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8002dc0:	bf00      	nop
 8002dc2:	e000      	b.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8002dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dc6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10d      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002dce:	4b85      	ldr	r3, [pc, #532]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002dd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002dd4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002dd8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002de0:	4a80      	ldr	r2, [pc, #512]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002de2:	430b      	orrs	r3, r1
 8002de4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002de8:	e003      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dea:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002dee:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfa:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002dfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e00:	2300      	movs	r3, #0
 8002e02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e04:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	d046      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8002e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e16:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002e1a:	d028      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002e1c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8002e20:	d821      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002e22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e26:	d022      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002e28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e2c:	d81b      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002e2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e32:	d01c      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002e34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e38:	d815      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e3e:	d008      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8002e40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e44:	d80f      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d011      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e4e:	d00e      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8002e50:	e009      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e56:	3308      	adds	r3, #8
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f002 f8bb 	bl	8004fd4 <RCCEx_PLL2_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002e64:	e004      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002e6c:	e000      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8002e6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e70:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d10d      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002e78:	4b5a      	ldr	r3, [pc, #360]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002e7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e7e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002e82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002e8a:	4a56      	ldr	r2, [pc, #344]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002e8c:	430b      	orrs	r3, r1
 8002e8e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e92:	e003      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002e98:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8002e9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002ea8:	663b      	str	r3, [r7, #96]	; 0x60
 8002eaa:	2300      	movs	r3, #0
 8002eac:	667b      	str	r3, [r7, #100]	; 0x64
 8002eae:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	d03f      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8002eb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d81e      	bhi.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8002ec4:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8002ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eca:	bf00      	nop
 8002ecc:	08002f0b 	.word	0x08002f0b
 8002ed0:	08002ee1 	.word	0x08002ee1
 8002ed4:	08002eef 	.word	0x08002eef
 8002ed8:	08002f0b 	.word	0x08002f0b
 8002edc:	08002f0b 	.word	0x08002f0b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002ee0:	4b40      	ldr	r3, [pc, #256]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee4:	4a3f      	ldr	r2, [pc, #252]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002eec:	e00e      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ef2:	332c      	adds	r3, #44	; 0x2c
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f002 f905 	bl	8005104 <RCCEx_PLL3_Config>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002f00:	e004      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002f08:	e000      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8002f0a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002f0c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10d      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8002f14:	4b33      	ldr	r3, [pc, #204]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f1a:	f023 0107 	bic.w	r1, r3, #7
 8002f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	4a2f      	ldr	r2, [pc, #188]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002f2e:	e003      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002f34:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002f38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002f44:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f46:	2300      	movs	r3, #0
 8002f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4313      	orrs	r3, r2
 8002f52:	d04d      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8002f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f60:	d028      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002f62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f66:	d821      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8002f68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f6c:	d024      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8002f6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f72:	d81b      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8002f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f78:	d00e      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8002f7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f7e:	d815      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01b      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8002f84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f88:	d110      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f8a:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f94:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002f96:	e012      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002f98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f9c:	332c      	adds	r3, #44	; 0x2c
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f002 f8b0 	bl	8005104 <RCCEx_PLL3_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002faa:	e008      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8002fb2:	e004      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8002fb4:	bf00      	nop
 8002fb6:	e002      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8002fb8:	bf00      	nop
 8002fba:	e000      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8002fbc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002fbe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d110      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002fc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fcc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002fd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fd8:	4a02      	ldr	r2, [pc, #8]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8002fda:	430b      	orrs	r3, r1
 8002fdc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fe0:	e006      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8002fe2:	bf00      	nop
 8002fe4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8002fec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002ffc:	653b      	str	r3, [r7, #80]	; 0x50
 8002ffe:	2300      	movs	r3, #0
 8003000:	657b      	str	r3, [r7, #84]	; 0x54
 8003002:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003006:	460b      	mov	r3, r1
 8003008:	4313      	orrs	r3, r2
 800300a:	f000 80b5 	beq.w	8003178 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003014:	4b9d      	ldr	r3, [pc, #628]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b00      	cmp	r3, #0
 8003020:	d113      	bne.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003022:	4b9a      	ldr	r3, [pc, #616]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003024:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003028:	4a98      	ldr	r2, [pc, #608]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800302a:	f043 0304 	orr.w	r3, r3, #4
 800302e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003032:	4b96      	ldr	r3, [pc, #600]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8003044:	2301      	movs	r3, #1
 8003046:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800304a:	4b91      	ldr	r3, [pc, #580]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800304c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304e:	4a90      	ldr	r2, [pc, #576]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003056:	f7fd fe0b 	bl	8000c70 <HAL_GetTick>
 800305a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800305e:	e00b      	b.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003060:	f7fd fe06 	bl	8000c70 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d903      	bls.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8003076:	e005      	b.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003078:	4b85      	ldr	r3, [pc, #532]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ed      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8003084:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d165      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800308c:	4b7f      	ldr	r3, [pc, #508]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800308e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800309a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d023      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80030a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d01b      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030b2:	4b76      	ldr	r3, [pc, #472]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80030b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030bc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030c0:	4b72      	ldr	r3, [pc, #456]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80030c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030c6:	4a71      	ldr	r2, [pc, #452]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030d0:	4b6e      	ldr	r3, [pc, #440]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80030d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80030d6:	4a6d      	ldr	r2, [pc, #436]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80030d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030e0:	4a6a      	ldr	r2, [pc, #424]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80030e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d019      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f6:	f7fd fdbb 	bl	8000c70 <HAL_GetTick>
 80030fa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030fe:	e00d      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003100:	f7fd fdb6 	bl	8000c70 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800310a:	1ad2      	subs	r2, r2, r3
 800310c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003110:	429a      	cmp	r2, r3
 8003112:	d903      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800311a:	e006      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311c:	4b5b      	ldr	r3, [pc, #364]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800311e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0ea      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800312a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10d      	bne.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003132:	4b56      	ldr	r3, [pc, #344]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003134:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003138:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800313c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003140:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003144:	4a51      	ldr	r2, [pc, #324]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003146:	430b      	orrs	r3, r1
 8003148:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800314c:	e008      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800314e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003152:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8003156:	e003      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003158:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800315c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003160:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8003164:	2b01      	cmp	r3, #1
 8003166:	d107      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003168:	4b48      	ldr	r3, [pc, #288]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800316a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800316e:	4a47      	ldr	r2, [pc, #284]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003170:	f023 0304 	bic.w	r3, r3, #4
 8003174:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800317c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003180:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003184:	64bb      	str	r3, [r7, #72]	; 0x48
 8003186:	2300      	movs	r3, #0
 8003188:	64fb      	str	r3, [r7, #76]	; 0x4c
 800318a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800318e:	460b      	mov	r3, r1
 8003190:	4313      	orrs	r3, r2
 8003192:	d042      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003198:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800319c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80031a0:	d022      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80031a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80031a6:	d81b      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80031a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ac:	d011      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80031ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b2:	d815      	bhi.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d019      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80031b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031bc:	d110      	bne.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80031be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031c2:	3308      	adds	r3, #8
 80031c4:	4618      	mov	r0, r3
 80031c6:	f001 ff05 	bl	8004fd4 <RCCEx_PLL2_Config>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80031d0:	e00d      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031d2:	4b2e      	ldr	r3, [pc, #184]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d6:	4a2d      	ldr	r2, [pc, #180]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031dc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80031de:	e006      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80031e6:	e002      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80031e8:	bf00      	nop
 80031ea:	e000      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 80031ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 80031ee:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10d      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80031f6:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031fc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003200:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003204:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003208:	4a20      	ldr	r2, [pc, #128]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800320a:	430b      	orrs	r3, r1
 800320c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003210:	e003      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003212:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003216:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800321a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800321e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003222:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003226:	643b      	str	r3, [r7, #64]	; 0x40
 8003228:	2300      	movs	r3, #0
 800322a:	647b      	str	r3, [r7, #68]	; 0x44
 800322c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003230:	460b      	mov	r3, r1
 8003232:	4313      	orrs	r3, r2
 8003234:	d032      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003236:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800323a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800323e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003242:	d00b      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8003244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003248:	d804      	bhi.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003252:	d007      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800325a:	e004      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800325c:	bf00      	nop
 800325e:	e002      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003260:	bf00      	nop
 8003262:	e000      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8003264:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003266:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d112      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003270:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003274:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003278:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800327c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003280:	4a02      	ldr	r2, [pc, #8]	; (800328c <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003282:	430b      	orrs	r3, r1
 8003284:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003288:	e008      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 800328a:	bf00      	nop
 800328c:	46020c00 	.word	0x46020c00
 8003290:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003294:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003298:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800329c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80032a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80032aa:	2300      	movs	r3, #0
 80032ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80032b2:	460b      	mov	r3, r1
 80032b4:	4313      	orrs	r3, r2
 80032b6:	d00c      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80032b8:	4b98      	ldr	r3, [pc, #608]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80032ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80032be:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80032c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032ca:	4a94      	ldr	r2, [pc, #592]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80032cc:	430b      	orrs	r3, r1
 80032ce:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80032d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032da:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80032de:	633b      	str	r3, [r7, #48]	; 0x30
 80032e0:	2300      	movs	r3, #0
 80032e2:	637b      	str	r3, [r7, #52]	; 0x34
 80032e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80032e8:	460b      	mov	r3, r1
 80032ea:	4313      	orrs	r3, r2
 80032ec:	d019      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80032ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80032f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032fa:	d105      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80032fc:	4b87      	ldr	r3, [pc, #540]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	4a86      	ldr	r2, [pc, #536]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003306:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8003308:	4b84      	ldr	r3, [pc, #528]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800330a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800330e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003312:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003316:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800331a:	4a80      	ldr	r2, [pc, #512]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800331c:	430b      	orrs	r3, r1
 800331e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003334:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003338:	460b      	mov	r3, r1
 800333a:	4313      	orrs	r3, r2
 800333c:	d00c      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800333e:	4b77      	ldr	r3, [pc, #476]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003348:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800334c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003350:	4972      	ldr	r1, [pc, #456]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003360:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003364:	623b      	str	r3, [r7, #32]
 8003366:	2300      	movs	r3, #0
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
 800336a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800336e:	460b      	mov	r3, r1
 8003370:	4313      	orrs	r3, r2
 8003372:	d00c      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003374:	4b69      	ldr	r3, [pc, #420]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800337a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800337e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003382:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003386:	4965      	ldr	r1, [pc, #404]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800338e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80033a4:	460b      	mov	r3, r1
 80033a6:	4313      	orrs	r3, r2
 80033a8:	d00c      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80033aa:	4b5c      	ldr	r3, [pc, #368]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80033ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033b0:	f023 0218 	bic.w	r2, r3, #24
 80033b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033b8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80033bc:	4957      	ldr	r1, [pc, #348]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80033c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80033d0:	613b      	str	r3, [r7, #16]
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80033da:	460b      	mov	r3, r1
 80033dc:	4313      	orrs	r3, r2
 80033de:	d032      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80033e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033ec:	d105      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ee:	4b4b      	ldr	r3, [pc, #300]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	4a4a      	ldr	r2, [pc, #296]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80033f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f8:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80033fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003402:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003406:	d108      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003408:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800340c:	3308      	adds	r3, #8
 800340e:	4618      	mov	r0, r3
 8003410:	f001 fde0 	bl	8004fd4 <RCCEx_PLL2_Config>
 8003414:	4603      	mov	r3, r0
 8003416:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800341a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10d      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003422:	4b3e      	ldr	r3, [pc, #248]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003424:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003428:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800342c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003430:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003434:	4939      	ldr	r1, [pc, #228]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003436:	4313      	orrs	r3, r2
 8003438:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800343c:	e003      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8003442:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800345c:	460b      	mov	r3, r1
 800345e:	4313      	orrs	r3, r2
 8003460:	d03a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8003462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800346e:	d00e      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8003470:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003474:	d815      	bhi.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d017      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800347a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800347e:	d110      	bne.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003480:	4b26      	ldr	r3, [pc, #152]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	4a25      	ldr	r2, [pc, #148]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348a:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800348c:	e00e      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800348e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003492:	3308      	adds	r3, #8
 8003494:	4618      	mov	r0, r3
 8003496:	f001 fd9d 	bl	8004fd4 <RCCEx_PLL2_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80034a0:	e004      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80034a8:	e000      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80034aa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80034ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d10d      	bne.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80034b4:	4b19      	ldr	r3, [pc, #100]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80034be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034c6:	4915      	ldr	r1, [pc, #84]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80034ce:	e003      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80034d4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80034d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80034e4:	603b      	str	r3, [r7, #0]
 80034e6:	2300      	movs	r3, #0
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	e9d7 1200 	ldrd	r1, r2, [r7]
 80034ee:	460b      	mov	r3, r1
 80034f0:	4313      	orrs	r3, r2
 80034f2:	d00c      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80034f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034fa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80034fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003502:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003506:	4905      	ldr	r1, [pc, #20]	; (800351c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8003508:	4313      	orrs	r3, r2
 800350a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800350e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8003512:	4618      	mov	r0, r3
 8003514:	37e8      	adds	r7, #232	; 0xe8
 8003516:	46bd      	mov	sp, r7
 8003518:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800351c:	46020c00 	.word	0x46020c00

08003520 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8003520:	b480      	push	{r7}
 8003522:	b089      	sub	sp, #36	; 0x24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8003528:	4bac      	ldr	r3, [pc, #688]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800352a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003530:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8003532:	4baa      	ldr	r3, [pc, #680]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800353c:	4ba7      	ldr	r3, [pc, #668]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	3301      	adds	r3, #1
 8003548:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800354a:	4ba4      	ldr	r3, [pc, #656]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8003554:	4ba1      	ldr	r3, [pc, #644]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	08db      	lsrs	r3, r3, #3
 800355a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	fb02 f303 	mul.w	r3, r2, r3
 8003564:	ee07 3a90 	vmov	s15, r3
 8003568:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8123 	beq.w	80037be <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d062      	beq.n	8003644 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2b03      	cmp	r3, #3
 8003582:	f200 8081 	bhi.w	8003688 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d024      	beq.n	80035d6 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2b02      	cmp	r3, #2
 8003590:	d17a      	bne.n	8003688 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	ee07 3a90 	vmov	s15, r3
 8003598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800359c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80037e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80035a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035a4:	4b8d      	ldr	r3, [pc, #564]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80035a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ac:	ee07 3a90 	vmov	s15, r3
 80035b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80035b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80035b8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80037e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80035bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80035c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80035cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035d4:	e08f      	b.n	80036f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80035d6:	4b81      	ldr	r3, [pc, #516]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d005      	beq.n	80035ee <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 80035e2:	4b7e      	ldr	r3, [pc, #504]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	0f1b      	lsrs	r3, r3, #28
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	e006      	b.n	80035fc <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 80035ee:	4b7b      	ldr	r3, [pc, #492]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80035f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80035f4:	041b      	lsls	r3, r3, #16
 80035f6:	0f1b      	lsrs	r3, r3, #28
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	4a7a      	ldr	r2, [pc, #488]	; (80037e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80035fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	ee07 3a90 	vmov	s15, r3
 8003610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	ee07 3a90 	vmov	s15, r3
 800361e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003622:	ed97 6a02 	vldr	s12, [r7, #8]
 8003626:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80037e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800362a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800362e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003636:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800363a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800363e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003642:	e058      	b.n	80036f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	ee07 3a90 	vmov	s15, r3
 800364a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800364e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80037e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8003652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003656:	4b61      	ldr	r3, [pc, #388]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800365a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003666:	ed97 6a02 	vldr	s12, [r7, #8]
 800366a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80037e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800366e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8003672:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8003676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800367a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800367e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003682:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003686:	e036      	b.n	80036f6 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8003688:	4b54      	ldr	r3, [pc, #336]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8003694:	4b51      	ldr	r3, [pc, #324]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	0f1b      	lsrs	r3, r3, #28
 800369a:	f003 030f 	and.w	r3, r3, #15
 800369e:	e006      	b.n	80036ae <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 80036a0:	4b4e      	ldr	r3, [pc, #312]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80036a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	0f1b      	lsrs	r3, r3, #28
 80036aa:	f003 030f 	and.w	r3, r3, #15
 80036ae:	4a4e      	ldr	r2, [pc, #312]	; (80037e8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 80036b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b4:	ee07 3a90 	vmov	s15, r3
 80036b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80036d8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80037e4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80036dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80036ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036f4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80036f6:	4b39      	ldr	r3, [pc, #228]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d017      	beq.n	8003732 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003702:	4b36      	ldr	r3, [pc, #216]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003706:	0a5b      	lsrs	r3, r3, #9
 8003708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800370c:	ee07 3a90 	vmov	s15, r3
 8003710:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8003714:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003718:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800371c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003724:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003728:	ee17 2a90 	vmov	r2, s15
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	e002      	b.n	8003738 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8003738:	4b28      	ldr	r3, [pc, #160]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800373a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003740:	2b00      	cmp	r3, #0
 8003742:	d017      	beq.n	8003774 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003744:	4b25      	ldr	r3, [pc, #148]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8003756:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800375a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800375e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800376a:	ee17 2a90 	vmov	r2, s15
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	605a      	str	r2, [r3, #4]
 8003772:	e002      	b.n	800377a <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d017      	beq.n	80037b6 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8003786:	4b15      	ldr	r3, [pc, #84]	; (80037dc <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	0e1b      	lsrs	r3, r3, #24
 800378c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003790:	ee07 3a90 	vmov	s15, r3
 8003794:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8003798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800379c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80037a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80037a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ac:	ee17 2a90 	vmov	r2, s15
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80037b4:	e00c      	b.n	80037d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	609a      	str	r2, [r3, #8]
}
 80037bc:	e008      	b.n	80037d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	609a      	str	r2, [r3, #8]
}
 80037d0:	bf00      	nop
 80037d2:	3724      	adds	r7, #36	; 0x24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	46020c00 	.word	0x46020c00
 80037e0:	4b742400 	.word	0x4b742400
 80037e4:	46000000 	.word	0x46000000
 80037e8:	080066ac 	.word	0x080066ac

080037ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b089      	sub	sp, #36	; 0x24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80037f4:	4bac      	ldr	r3, [pc, #688]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80037f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80037fe:	4baa      	ldr	r3, [pc, #680]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8003808:	4ba7      	ldr	r3, [pc, #668]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800380a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	3301      	adds	r3, #1
 8003814:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8003816:	4ba4      	ldr	r3, [pc, #656]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	f003 0310 	and.w	r3, r3, #16
 800381e:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8003820:	4ba1      	ldr	r3, [pc, #644]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	08db      	lsrs	r3, r3, #3
 8003826:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	fb02 f303 	mul.w	r3, r2, r3
 8003830:	ee07 3a90 	vmov	s15, r3
 8003834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003838:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 8123 	beq.w	8003a8a <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2b03      	cmp	r3, #3
 8003848:	d062      	beq.n	8003910 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2b03      	cmp	r3, #3
 800384e:	f200 8081 	bhi.w	8003954 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d024      	beq.n	80038a2 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d17a      	bne.n	8003954 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003868:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800386c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003870:	4b8d      	ldr	r3, [pc, #564]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003878:	ee07 3a90 	vmov	s15, r3
 800387c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003880:	ed97 6a02 	vldr	s12, [r7, #8]
 8003884:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8003888:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800388c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003890:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003894:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80038a0:	e08f      	b.n	80039c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80038a2:	4b81      	ldr	r3, [pc, #516]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d005      	beq.n	80038ba <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 80038ae:	4b7e      	ldr	r3, [pc, #504]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	0f1b      	lsrs	r3, r3, #28
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	e006      	b.n	80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 80038ba:	4b7b      	ldr	r3, [pc, #492]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80038bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038c0:	041b      	lsls	r3, r3, #16
 80038c2:	0f1b      	lsrs	r3, r3, #28
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	4a7a      	ldr	r2, [pc, #488]	; (8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80038ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	ee07 3a90 	vmov	s15, r3
 80038dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80038f2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80038f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003902:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8003906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800390e:	e058      	b.n	80039c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391a:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800391e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003922:	4b61      	ldr	r3, [pc, #388]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392a:	ee07 3a90 	vmov	s15, r3
 800392e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003932:	ed97 6a02 	vldr	s12, [r7, #8]
 8003936:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800393a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800393e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8003942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003946:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800394a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003952:	e036      	b.n	80039c2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8003954:	4b54      	ldr	r3, [pc, #336]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8003960:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	0f1b      	lsrs	r3, r3, #28
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	e006      	b.n	800397a <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 800396c:	4b4e      	ldr	r3, [pc, #312]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800396e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003972:	041b      	lsls	r3, r3, #16
 8003974:	0f1b      	lsrs	r3, r3, #28
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	4a4e      	ldr	r2, [pc, #312]	; (8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800397c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003980:	ee07 3a90 	vmov	s15, r3
 8003984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	ee07 3a90 	vmov	s15, r3
 800399c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80039a4:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80039a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80039b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039c0:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80039c2:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d017      	beq.n	80039fe <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80039ce:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	0a5b      	lsrs	r3, r3, #9
 80039d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039d8:	ee07 3a90 	vmov	s15, r3
 80039dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80039e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039e4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80039e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80039ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039f4:	ee17 2a90 	vmov	r2, s15
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	e002      	b.n	8003a04 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8003a04:	4b28      	ldr	r3, [pc, #160]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d017      	beq.n	8003a40 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003a10:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a1a:	ee07 3a90 	vmov	s15, r3
 8003a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8003a22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a26:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a36:	ee17 2a90 	vmov	r2, s15
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	e002      	b.n	8003a46 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8003a46:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d017      	beq.n	8003a82 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003a52:	4b15      	ldr	r3, [pc, #84]	; (8003aa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	0e1b      	lsrs	r3, r3, #24
 8003a58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a5c:	ee07 3a90 	vmov	s15, r3
 8003a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8003a64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a68:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8003a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a78:	ee17 2a90 	vmov	r2, s15
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003a80:	e00c      	b.n	8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	609a      	str	r2, [r3, #8]
}
 8003a88:	e008      	b.n	8003a9c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	609a      	str	r2, [r3, #8]
}
 8003a9c:	bf00      	nop
 8003a9e:	3724      	adds	r7, #36	; 0x24
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	46020c00 	.word	0x46020c00
 8003aac:	4b742400 	.word	0x4b742400
 8003ab0:	46000000 	.word	0x46000000
 8003ab4:	080066ac 	.word	0x080066ac

08003ab8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b089      	sub	sp, #36	; 0x24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8003ac0:	4bac      	ldr	r3, [pc, #688]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac8:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8003aca:	4baa      	ldr	r3, [pc, #680]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	f003 0303 	and.w	r3, r3, #3
 8003ad2:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8003ad4:	4ba7      	ldr	r3, [pc, #668]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad8:	0a1b      	lsrs	r3, r3, #8
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	3301      	adds	r3, #1
 8003ae0:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8003ae2:	4ba4      	ldr	r3, [pc, #656]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8003aec:	4ba1      	ldr	r3, [pc, #644]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003aee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af0:	08db      	lsrs	r3, r3, #3
 8003af2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	fb02 f303 	mul.w	r3, r2, r3
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b04:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8123 	beq.w	8003d56 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d062      	beq.n	8003bdc <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	f200 8081 	bhi.w	8003c20 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d024      	beq.n	8003b6e <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d17a      	bne.n	8003c20 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	ee07 3a90 	vmov	s15, r3
 8003b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b34:	eddf 6a90 	vldr	s13, [pc, #576]	; 8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8003b38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3c:	4b8d      	ldr	r3, [pc, #564]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b44:	ee07 3a90 	vmov	s15, r3
 8003b48:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b4c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b50:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003b54:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003b58:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003b5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b60:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b68:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8003b6c:	e08f      	b.n	8003c8e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003b6e:	4b81      	ldr	r3, [pc, #516]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d005      	beq.n	8003b86 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8003b7a:	4b7e      	ldr	r3, [pc, #504]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	0f1b      	lsrs	r3, r3, #28
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	e006      	b.n	8003b94 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 8003b86:	4b7b      	ldr	r3, [pc, #492]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003b8c:	041b      	lsls	r3, r3, #16
 8003b8e:	0f1b      	lsrs	r3, r3, #28
 8003b90:	f003 030f 	and.w	r3, r3, #15
 8003b94:	4a7a      	ldr	r2, [pc, #488]	; (8003d80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	ee07 3a90 	vmov	s15, r3
 8003ba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bbe:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bda:	e058      	b.n	8003c8e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8003bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bee:	4b61      	ldr	r3, [pc, #388]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c02:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8003c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c1e:	e036      	b.n	8003c8e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003c20:	4b54      	ldr	r3, [pc, #336]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8003c2c:	4b51      	ldr	r3, [pc, #324]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	0f1b      	lsrs	r3, r3, #28
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	e006      	b.n	8003c46 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8003c38:	4b4e      	ldr	r3, [pc, #312]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c3e:	041b      	lsls	r3, r3, #16
 8003c40:	0f1b      	lsrs	r3, r3, #28
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	4a4e      	ldr	r2, [pc, #312]	; (8003d80 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8003c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c4c:	ee07 3a90 	vmov	s15, r3
 8003c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c6c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c70:	eddf 5a42 	vldr	s11, [pc, #264]	; 8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8003c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8003c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c8c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8003c8e:	4b39      	ldr	r3, [pc, #228]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d017      	beq.n	8003cca <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003c9a:	4b36      	ldr	r3, [pc, #216]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	0a5b      	lsrs	r3, r3, #9
 8003ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ca4:	ee07 3a90 	vmov	s15, r3
 8003ca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8003cac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cb0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003cb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cc0:	ee17 2a90 	vmov	r2, s15
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	601a      	str	r2, [r3, #0]
 8003cc8:	e002      	b.n	8003cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8003cd0:	4b28      	ldr	r3, [pc, #160]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d017      	beq.n	8003d0c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003cdc:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8003cee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cf2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003cf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d02:	ee17 2a90 	vmov	r2, s15
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	e002      	b.n	8003d12 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8003d12:	4b18      	ldr	r3, [pc, #96]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d017      	beq.n	8003d4e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003d1e:	4b15      	ldr	r3, [pc, #84]	; (8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8003d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d22:	0e1b      	lsrs	r3, r3, #24
 8003d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d28:	ee07 3a90 	vmov	s15, r3
 8003d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8003d30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d34:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8003d38:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d44:	ee17 2a90 	vmov	r2, s15
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8003d4c:	e00c      	b.n	8003d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	609a      	str	r2, [r3, #8]
}
 8003d54:	e008      	b.n	8003d68 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
}
 8003d68:	bf00      	nop
 8003d6a:	3724      	adds	r7, #36	; 0x24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d72:	4770      	bx	lr
 8003d74:	46020c00 	.word	0x46020c00
 8003d78:	4b742400 	.word	0x4b742400
 8003d7c:	46000000 	.word	0x46000000
 8003d80:	080066ac 	.word	0x080066ac

08003d84 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08e      	sub	sp, #56	; 0x38
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d92:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8003d96:	430b      	orrs	r3, r1
 8003d98:	d145      	bne.n	8003e26 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003d9a:	4ba7      	ldr	r3, [pc, #668]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003d9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003da0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8003da6:	4ba4      	ldr	r3, [pc, #656]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dac:	f003 0302 	and.w	r3, r3, #2
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d108      	bne.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dba:	d104      	bne.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8003dbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc2:	f001 b8fc 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8003dc6:	4b9c      	ldr	r3, [pc, #624]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003dc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd4:	d114      	bne.n	8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8003dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ddc:	d110      	bne.n	8003e00 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003dde:	4b96      	ldr	r3, [pc, #600]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003de0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003de4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dec:	d103      	bne.n	8003df6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8003dee:	23fa      	movs	r3, #250	; 0xfa
 8003df0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003df2:	f001 b8e4 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8003df6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003dfa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8003dfc:	f001 b8df 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8003e00:	4b8d      	ldr	r3, [pc, #564]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e14:	d103      	bne.n	8003e1e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8003e16:	4b89      	ldr	r3, [pc, #548]	; (800403c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8003e18:	637b      	str	r3, [r7, #52]	; 0x34
 8003e1a:	f001 b8d0 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
 8003e22:	f001 b8cc 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003e26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e2a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	d151      	bne.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8003e32:	4b81      	ldr	r3, [pc, #516]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003e34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003e38:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8003e3c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d035      	beq.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8003e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e46:	2b80      	cmp	r3, #128	; 0x80
 8003e48:	d841      	bhi.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4c:	2b60      	cmp	r3, #96	; 0x60
 8003e4e:	d02a      	beq.n	8003ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8003e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e52:	2b60      	cmp	r3, #96	; 0x60
 8003e54:	d83b      	bhi.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	2b40      	cmp	r3, #64	; 0x40
 8003e5a:	d009      	beq.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d835      	bhi.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00c      	beq.n	8003e82 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	2b20      	cmp	r3, #32
 8003e6c:	d012      	beq.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003e6e:	e02e      	b.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff fb53 	bl	8003520 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8003e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e7e:	f001 b89e 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003e82:	f107 0318 	add.w	r3, r7, #24
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff fcb0 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003e90:	f001 b895 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003e94:	f107 030c 	add.w	r3, r7, #12
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f7ff fe0d 	bl	8003ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ea2:	f001 b88c 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003ea6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eac:	f001 b887 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003eb0:	4b61      	ldr	r3, [pc, #388]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebc:	d103      	bne.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8003ebe:	4b60      	ldr	r3, [pc, #384]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003ec0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003ec2:	f001 b87c 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003eca:	f001 b878 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003ed2:	f001 b874 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8003ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eda:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	d158      	bne.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8003ee2:	4b55      	ldr	r3, [pc, #340]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003ee4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003ee8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eec:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef4:	d03b      	beq.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efc:	d846      	bhi.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f04:	d02e      	beq.n	8003f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8003f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f0c:	d83e      	bhi.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f14:	d00b      	beq.n	8003f2e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8003f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f1c:	d836      	bhi.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8003f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00d      	beq.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f2a:	d012      	beq.n	8003f52 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8003f2c:	e02e      	b.n	8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8003f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff faf4 	bl	8003520 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8003f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f3c:	f001 b83f 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003f40:	f107 0318 	add.w	r3, r7, #24
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff fc51 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f4e:	f001 b836 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f52:	f107 030c 	add.w	r3, r7, #12
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff fdae 	bl	8003ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f60:	f001 b82d 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8003f64:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8003f68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f6a:	f001 b828 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f6e:	4b32      	ldr	r3, [pc, #200]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7a:	d103      	bne.n	8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8003f7c:	4b30      	ldr	r3, [pc, #192]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003f7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8003f80:	f001 b81d 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f88:	f001 b819 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003f90:	f001 b815 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8003f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f98:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	d126      	bne.n	8003fee <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8003fa0:	4b25      	ldr	r3, [pc, #148]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003fa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003faa:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8003fac:	4b22      	ldr	r3, [pc, #136]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb8:	d106      	bne.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d103      	bne.n	8003fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8003fc0:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc4:	f000 bffb 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd4:	d107      	bne.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fdc:	d103      	bne.n	8003fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8003fde:	4b19      	ldr	r3, [pc, #100]	; (8004044 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fe2:	f000 bfec 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8003fea:	f000 bfe8 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8003fee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ff2:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	d164      	bne.n	80040c4 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	; (8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8003ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004000:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004004:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800400c:	d03d      	beq.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004014:	d852      	bhi.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004018:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800401c:	d014      	beq.n	8004048 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004024:	d84a      	bhi.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01f      	beq.n	800406c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004032:	d012      	beq.n	800405a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8004034:	e042      	b.n	80040bc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004036:	bf00      	nop
 8004038:	46020c00 	.word	0x46020c00
 800403c:	0007a120 	.word	0x0007a120
 8004040:	00f42400 	.word	0x00f42400
 8004044:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fa67 	bl	8003520 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004056:	f000 bfb2 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800405a:	f107 0318 	add.w	r3, r7, #24
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff fbc4 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004068:	f000 bfa9 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800406c:	4bab      	ldr	r3, [pc, #684]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004078:	d103      	bne.n	8004082 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800407a:	4ba9      	ldr	r3, [pc, #676]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800407e:	f000 bf9e 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004086:	f000 bf9a 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800408a:	4ba4      	ldr	r3, [pc, #656]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8004096:	4ba1      	ldr	r3, [pc, #644]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	0e1b      	lsrs	r3, r3, #24
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	e006      	b.n	80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80040a2:	4b9e      	ldr	r3, [pc, #632]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80040a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	0e1b      	lsrs	r3, r3, #24
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	4a9c      	ldr	r2, [pc, #624]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80040b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040b6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040b8:	f000 bf81 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80040c0:	f000 bf7d 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80040c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040c8:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80040cc:	430b      	orrs	r3, r1
 80040ce:	d175      	bne.n	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80040d0:	4b92      	ldr	r3, [pc, #584]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80040d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80040d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040da:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d15b      	bne.n	800419a <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80040e2:	4b8e      	ldr	r3, [pc, #568]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80040e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040e8:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80040ec:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80040ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80040f4:	d034      	beq.n	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80040fc:	d849      	bhi.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80040fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004104:	d00b      	beq.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800410c:	d841      	bhi.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	2b00      	cmp	r3, #0
 8004112:	d016      	beq.n	8004142 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004116:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800411a:	d009      	beq.n	8004130 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 800411c:	e039      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800411e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff f9fc 	bl	8003520 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800412c:	f000 bf47 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004130:	f107 0318 	add.w	r3, r7, #24
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fb59 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800413e:	f000 bf3e 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8004142:	4b76      	ldr	r3, [pc, #472]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800414a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414e:	d103      	bne.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8004150:	4b73      	ldr	r3, [pc, #460]	; (8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8004154:	f000 bf33 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800415c:	f000 bf2f 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004160:	4b6e      	ldr	r3, [pc, #440]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 800416c:	4b6b      	ldr	r3, [pc, #428]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	0e1b      	lsrs	r3, r3, #24
 8004172:	f003 030f 	and.w	r3, r3, #15
 8004176:	e006      	b.n	8004186 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8004178:	4b68      	ldr	r3, [pc, #416]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800417a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800417e:	041b      	lsls	r3, r3, #16
 8004180:	0e1b      	lsrs	r3, r3, #24
 8004182:	f003 030f 	and.w	r3, r3, #15
 8004186:	4a67      	ldr	r2, [pc, #412]	; (8004324 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800418c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800418e:	f000 bf16 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8004196:	f000 bf12 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a0:	d108      	bne.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80041a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff f9ba 	bl	8003520 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	637b      	str	r3, [r7, #52]	; 0x34
 80041b0:	f000 bf05 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80041b4:	2300      	movs	r3, #0
 80041b6:	637b      	str	r3, [r7, #52]	; 0x34
 80041b8:	f000 bf01 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80041bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041c0:	1e51      	subs	r1, r2, #1
 80041c2:	430b      	orrs	r3, r1
 80041c4:	d136      	bne.n	8004234 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80041c6:	4b55      	ldr	r3, [pc, #340]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80041c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d104      	bne.n	80041e2 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80041d8:	f7fe fb34 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 80041dc:	6378      	str	r0, [r7, #52]	; 0x34
 80041de:	f000 beee 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80041e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d104      	bne.n	80041f2 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80041e8:	f7fe f9f6 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 80041ec:	6378      	str	r0, [r7, #52]	; 0x34
 80041ee:	f000 bee6 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80041f2:	4b4a      	ldr	r3, [pc, #296]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fe:	d106      	bne.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8004200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004202:	2b02      	cmp	r3, #2
 8004204:	d103      	bne.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8004206:	4b48      	ldr	r3, [pc, #288]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
 800420a:	f000 bed8 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800420e:	4b43      	ldr	r3, [pc, #268]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004210:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d107      	bne.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 800421c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421e:	2b03      	cmp	r3, #3
 8004220:	d104      	bne.n	800422c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8004222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
 8004228:	f000 bec9 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 800422c:	2300      	movs	r3, #0
 800422e:	637b      	str	r3, [r7, #52]	; 0x34
 8004230:	f000 bec5 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8004234:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004238:	1e91      	subs	r1, r2, #2
 800423a:	430b      	orrs	r3, r1
 800423c:	d136      	bne.n	80042ac <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800423e:	4b37      	ldr	r3, [pc, #220]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	2b00      	cmp	r3, #0
 800424e:	d104      	bne.n	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004250:	f7fe fae4 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8004254:	6378      	str	r0, [r7, #52]	; 0x34
 8004256:	f000 beb2 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 800425a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425c:	2b04      	cmp	r3, #4
 800425e:	d104      	bne.n	800426a <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004260:	f7fe f9ba 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004264:	6378      	str	r0, [r7, #52]	; 0x34
 8004266:	f000 beaa 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 800426a:	4b2c      	ldr	r3, [pc, #176]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004276:	d106      	bne.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8004278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427a:	2b08      	cmp	r3, #8
 800427c:	d103      	bne.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 800427e:	4b2a      	ldr	r3, [pc, #168]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004280:	637b      	str	r3, [r7, #52]	; 0x34
 8004282:	f000 be9c 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8004286:	4b25      	ldr	r3, [pc, #148]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b02      	cmp	r3, #2
 8004292:	d107      	bne.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	2b0c      	cmp	r3, #12
 8004298:	d104      	bne.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 800429a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800429e:	637b      	str	r3, [r7, #52]	; 0x34
 80042a0:	f000 be8d 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	637b      	str	r3, [r7, #52]	; 0x34
 80042a8:	f000 be89 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80042ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042b0:	1f11      	subs	r1, r2, #4
 80042b2:	430b      	orrs	r3, r1
 80042b4:	d13e      	bne.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80042b6:	4b19      	ldr	r3, [pc, #100]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80042b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80042c0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80042c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d104      	bne.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80042c8:	f7fe faa8 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 80042cc:	6378      	str	r0, [r7, #52]	; 0x34
 80042ce:	f000 be76 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d104      	bne.n	80042e2 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80042d8:	f7fe f97e 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 80042dc:	6378      	str	r0, [r7, #52]	; 0x34
 80042de:	f000 be6e 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80042e2:	4b0e      	ldr	r3, [pc, #56]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ee:	d106      	bne.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	2b20      	cmp	r3, #32
 80042f4:	d103      	bne.n	80042fe <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80042f6:	4b0c      	ldr	r3, [pc, #48]	; (8004328 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
 80042fa:	f000 be60 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80042fe:	4b07      	ldr	r3, [pc, #28]	; (800431c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8004300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b02      	cmp	r3, #2
 800430a:	d10f      	bne.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	2b30      	cmp	r3, #48	; 0x30
 8004310:	d10c      	bne.n	800432c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8004312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
 8004318:	f000 be51 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800431c:	46020c00 	.word	0x46020c00
 8004320:	02dc6c00 	.word	0x02dc6c00
 8004324:	080066ac 	.word	0x080066ac
 8004328:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	637b      	str	r3, [r7, #52]	; 0x34
 8004330:	f000 be45 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8004334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004338:	f1a2 0108 	sub.w	r1, r2, #8
 800433c:	430b      	orrs	r3, r1
 800433e:	d136      	bne.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004340:	4b9f      	ldr	r3, [pc, #636]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004346:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800434a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434e:	2b00      	cmp	r3, #0
 8004350:	d104      	bne.n	800435c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004352:	f7fe fa63 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8004356:	6378      	str	r0, [r7, #52]	; 0x34
 8004358:	f000 be31 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 800435c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435e:	2b40      	cmp	r3, #64	; 0x40
 8004360:	d104      	bne.n	800436c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004362:	f7fe f939 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004366:	6378      	str	r0, [r7, #52]	; 0x34
 8004368:	f000 be29 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800436c:	4b94      	ldr	r3, [pc, #592]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004378:	d106      	bne.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	2b80      	cmp	r3, #128	; 0x80
 800437e:	d103      	bne.n	8004388 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8004380:	4b90      	ldr	r3, [pc, #576]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004382:	637b      	str	r3, [r7, #52]	; 0x34
 8004384:	f000 be1b 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8004388:	4b8d      	ldr	r3, [pc, #564]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800438a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b02      	cmp	r3, #2
 8004394:	d107      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8004396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004398:	2bc0      	cmp	r3, #192	; 0xc0
 800439a:	d104      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 800439c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043a0:	637b      	str	r3, [r7, #52]	; 0x34
 80043a2:	f000 be0c 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	637b      	str	r3, [r7, #52]	; 0x34
 80043aa:	f000 be08 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80043ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043b2:	f1a2 0110 	sub.w	r1, r2, #16
 80043b6:	430b      	orrs	r3, r1
 80043b8:	d139      	bne.n	800442e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80043ba:	4b81      	ldr	r3, [pc, #516]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80043bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80043cc:	f7fe fa26 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 80043d0:	6378      	str	r0, [r7, #52]	; 0x34
 80043d2:	f000 bdf4 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043dc:	d104      	bne.n	80043e8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80043de:	f7fe f8fb 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 80043e2:	6378      	str	r0, [r7, #52]	; 0x34
 80043e4:	f000 bdeb 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80043e8:	4b75      	ldr	r3, [pc, #468]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043f4:	d107      	bne.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fc:	d103      	bne.n	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 80043fe:	4b71      	ldr	r3, [pc, #452]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004400:	637b      	str	r3, [r7, #52]	; 0x34
 8004402:	f000 bddc 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8004406:	4b6e      	ldr	r3, [pc, #440]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b02      	cmp	r3, #2
 8004412:	d108      	bne.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800441a:	d104      	bne.n	8004426 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800441c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004420:	637b      	str	r3, [r7, #52]	; 0x34
 8004422:	f000 bdcc 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	637b      	str	r3, [r7, #52]	; 0x34
 800442a:	f000 bdc8 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800442e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004432:	f1a2 0120 	sub.w	r1, r2, #32
 8004436:	430b      	orrs	r3, r1
 8004438:	d158      	bne.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800443a:	4b61      	ldr	r3, [pc, #388]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800443c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004440:	f003 0307 	and.w	r3, r3, #7
 8004444:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8004446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800444c:	f7fe fa0e 	bl	800286c <HAL_RCC_GetPCLK3Freq>
 8004450:	6378      	str	r0, [r7, #52]	; 0x34
 8004452:	f000 bdb4 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	2b01      	cmp	r3, #1
 800445a:	d104      	bne.n	8004466 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800445c:	f7fe f8bc 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004460:	6378      	str	r0, [r7, #52]	; 0x34
 8004462:	f000 bdac 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8004466:	4b56      	ldr	r3, [pc, #344]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004472:	d106      	bne.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	2b02      	cmp	r3, #2
 8004478:	d103      	bne.n	8004482 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 800447a:	4b52      	ldr	r3, [pc, #328]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800447c:	637b      	str	r3, [r7, #52]	; 0x34
 800447e:	f000 bd9e 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8004482:	4b4f      	ldr	r3, [pc, #316]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b02      	cmp	r3, #2
 800448e:	d107      	bne.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	2b03      	cmp	r3, #3
 8004494:	d104      	bne.n	80044a0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8004496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800449a:	637b      	str	r3, [r7, #52]	; 0x34
 800449c:	f000 bd8f 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80044a0:	4b47      	ldr	r3, [pc, #284]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0320 	and.w	r3, r3, #32
 80044a8:	2b20      	cmp	r3, #32
 80044aa:	d11b      	bne.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d118      	bne.n	80044e4 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80044b2:	4b43      	ldr	r3, [pc, #268]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80044be:	4b40      	ldr	r3, [pc, #256]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0e1b      	lsrs	r3, r3, #24
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	e006      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 80044ca:	4b3d      	ldr	r3, [pc, #244]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80044cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044d0:	041b      	lsls	r3, r3, #16
 80044d2:	0e1b      	lsrs	r3, r3, #24
 80044d4:	f003 030f 	and.w	r3, r3, #15
 80044d8:	4a3b      	ldr	r2, [pc, #236]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80044da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044de:	637b      	str	r3, [r7, #52]	; 0x34
 80044e0:	f000 bd6d 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80044e4:	2300      	movs	r3, #0
 80044e6:	637b      	str	r3, [r7, #52]	; 0x34
 80044e8:	f000 bd69 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 80044ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044f0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80044f4:	430b      	orrs	r3, r1
 80044f6:	d169      	bne.n	80045cc <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 80044f8:	4b31      	ldr	r3, [pc, #196]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80044fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80044fe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004502:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8004504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800450a:	d104      	bne.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800450c:	f7fe f864 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004510:	6378      	str	r0, [r7, #52]	; 0x34
 8004512:	f000 bd54 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8004516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004518:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800451c:	d108      	bne.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800451e:	f107 0318 	add.w	r3, r7, #24
 8004522:	4618      	mov	r0, r3
 8004524:	f7ff f962 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
 800452c:	f000 bd47 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8004530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8004536:	f7fe f957 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 800453a:	6378      	str	r0, [r7, #52]	; 0x34
 800453c:	f000 bd3f 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8004546:	d118      	bne.n	800457a <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8004548:	4b1d      	ldr	r3, [pc, #116]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004554:	4b1a      	ldr	r3, [pc, #104]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	0f1b      	lsrs	r3, r3, #28
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	e006      	b.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8004560:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8004562:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004566:	041b      	lsls	r3, r3, #16
 8004568:	0f1b      	lsrs	r3, r3, #28
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	4a16      	ldr	r2, [pc, #88]	; (80045c8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8004570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004574:	637b      	str	r3, [r7, #52]	; 0x34
 8004576:	f000 bd22 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 800457a:	4b11      	ldr	r3, [pc, #68]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004586:	d107      	bne.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8004588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800458e:	d103      	bne.n	8004598 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
 8004594:	f000 bd13 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8004598:	4b09      	ldr	r3, [pc, #36]	; (80045c0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a4:	d107      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045ac:	d103      	bne.n	80045b6 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80045b0:	637b      	str	r3, [r7, #52]	; 0x34
 80045b2:	f000 bd04 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	637b      	str	r3, [r7, #52]	; 0x34
 80045ba:	f000 bd00 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80045be:	bf00      	nop
 80045c0:	46020c00 	.word	0x46020c00
 80045c4:	00f42400 	.word	0x00f42400
 80045c8:	080066ac 	.word	0x080066ac
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80045cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045d0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80045d4:	430b      	orrs	r3, r1
 80045d6:	d14e      	bne.n	8004676 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 80045d8:	4ba8      	ldr	r3, [pc, #672]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80045da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80045de:	f003 0307 	and.w	r3, r3, #7
 80045e2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80045e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d841      	bhi.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80045ea:	a201      	add	r2, pc, #4	; (adr r2, 80045f0 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80045ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f0:	08004629 	.word	0x08004629
 80045f4:	08004605 	.word	0x08004605
 80045f8:	08004617 	.word	0x08004617
 80045fc:	08004633 	.word	0x08004633
 8004600:	0800463d 	.word	0x0800463d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe ff89 	bl	8003520 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004610:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004612:	f000 bcd4 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004616:	f107 030c 	add.w	r3, r7, #12
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fa4c 	bl	8003ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004624:	f000 bccb 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8004628:	f7fe f8de 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 800462c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800462e:	f000 bcc6 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004632:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004636:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004638:	f000 bcc1 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800463c:	4b8f      	ldr	r3, [pc, #572]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d005      	beq.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8004648:	4b8c      	ldr	r3, [pc, #560]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	0e1b      	lsrs	r3, r3, #24
 800464e:	f003 030f 	and.w	r3, r3, #15
 8004652:	e006      	b.n	8004662 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8004654:	4b89      	ldr	r3, [pc, #548]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004656:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800465a:	041b      	lsls	r3, r3, #16
 800465c:	0e1b      	lsrs	r3, r3, #24
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	4a87      	ldr	r2, [pc, #540]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8004664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800466a:	f000 bca8 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004672:	f000 bca4 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8004676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467a:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800467e:	430b      	orrs	r3, r1
 8004680:	d15d      	bne.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8004682:	4b7e      	ldr	r3, [pc, #504]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004688:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800468c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800468e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004690:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004694:	d036      	beq.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8004696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004698:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800469c:	d84b      	bhi.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046a4:	d029      	beq.n	80046fa <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046ac:	d843      	bhi.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80046ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046b4:	d013      	beq.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 80046b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046bc:	d83b      	bhi.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d015      	beq.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ca:	d134      	bne.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80046cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe ff25 	bl	8003520 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80046d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046da:	f000 bc70 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80046de:	f107 030c 	add.w	r3, r7, #12
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff f9e8 	bl	8003ab8 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80046ec:	f000 bc67 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80046f0:	f7fe f87a 	bl	80027e8 <HAL_RCC_GetHCLKFreq>
 80046f4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80046f6:	f000 bc62 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80046fa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004700:	f000 bc5d 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004704:	4b5d      	ldr	r3, [pc, #372]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8004710:	4b5a      	ldr	r3, [pc, #360]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	0e1b      	lsrs	r3, r3, #24
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	e006      	b.n	800472a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800471c:	4b57      	ldr	r3, [pc, #348]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800471e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004722:	041b      	lsls	r3, r3, #16
 8004724:	0e1b      	lsrs	r3, r3, #24
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	4a55      	ldr	r2, [pc, #340]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800472c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004730:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004732:	f000 bc44 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800473a:	f000 bc40 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800473e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004742:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8004746:	430b      	orrs	r3, r1
 8004748:	d14a      	bne.n	80047e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800474a:	4b4c      	ldr	r3, [pc, #304]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800474c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004750:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004754:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8004756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004758:	2b00      	cmp	r3, #0
 800475a:	d104      	bne.n	8004766 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800475c:	f7fe f85e 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8004760:	6378      	str	r0, [r7, #52]	; 0x34
 8004762:	f000 bc2c 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800476c:	d104      	bne.n	8004778 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800476e:	f7fd ff33 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004772:	6378      	str	r0, [r7, #52]	; 0x34
 8004774:	f000 bc23 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8004778:	4b40      	ldr	r3, [pc, #256]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004784:	d107      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800478c:	d103      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 800478e:	4b3d      	ldr	r3, [pc, #244]	; (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
 8004792:	f000 bc14 	b.w	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8004796:	4b39      	ldr	r3, [pc, #228]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b20      	cmp	r3, #32
 80047a0:	d11b      	bne.n	80047da <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80047a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047a8:	d117      	bne.n	80047da <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80047aa:	4b34      	ldr	r3, [pc, #208]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 80047b6:	4b31      	ldr	r3, [pc, #196]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	0e1b      	lsrs	r3, r3, #24
 80047bc:	f003 030f 	and.w	r3, r3, #15
 80047c0:	e006      	b.n	80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80047c2:	4b2e      	ldr	r3, [pc, #184]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80047c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80047c8:	041b      	lsls	r3, r3, #16
 80047ca:	0e1b      	lsrs	r3, r3, #24
 80047cc:	f003 030f 	and.w	r3, r3, #15
 80047d0:	4a2b      	ldr	r2, [pc, #172]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80047d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34
 80047d8:	e3f1      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80047da:	2300      	movs	r3, #0
 80047dc:	637b      	str	r3, [r7, #52]	; 0x34
 80047de:	e3ee      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80047e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047e4:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80047e8:	430b      	orrs	r3, r1
 80047ea:	d14d      	bne.n	8004888 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80047ec:	4b23      	ldr	r3, [pc, #140]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80047ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047f2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80047f6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80047f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d103      	bne.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80047fe:	f7fe f80d 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8004802:	6378      	str	r0, [r7, #52]	; 0x34
 8004804:	e3db      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8004806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800480c:	d103      	bne.n	8004816 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800480e:	f7fd fee3 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004812:	6378      	str	r0, [r7, #52]	; 0x34
 8004814:	e3d3      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8004816:	4b19      	ldr	r3, [pc, #100]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004822:	d106      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004826:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800482a:	d102      	bne.n	8004832 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800482c:	4b15      	ldr	r3, [pc, #84]	; (8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800482e:	637b      	str	r3, [r7, #52]	; 0x34
 8004830:	e3c5      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b20      	cmp	r3, #32
 800483c:	d11b      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004844:	d117      	bne.n	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004846:	4b0d      	ldr	r3, [pc, #52]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8004852:	4b0a      	ldr	r3, [pc, #40]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	0e1b      	lsrs	r3, r3, #24
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	e006      	b.n	800486c <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 800485e:	4b07      	ldr	r3, [pc, #28]	; (800487c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8004860:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004864:	041b      	lsls	r3, r3, #16
 8004866:	0e1b      	lsrs	r3, r3, #24
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	4a04      	ldr	r2, [pc, #16]	; (8004880 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800486e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004872:	637b      	str	r3, [r7, #52]	; 0x34
 8004874:	e3a3      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
 800487a:	e3a0      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800487c:	46020c00 	.word	0x46020c00
 8004880:	080066ac 	.word	0x080066ac
 8004884:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8004888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800488c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004890:	430b      	orrs	r3, r1
 8004892:	d148      	bne.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004894:	4b9d      	ldr	r3, [pc, #628]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004896:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800489a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800489e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	2bc0      	cmp	r3, #192	; 0xc0
 80048a4:	d024      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80048a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a8:	2bc0      	cmp	r3, #192	; 0xc0
 80048aa:	d839      	bhi.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	2b80      	cmp	r3, #128	; 0x80
 80048b0:	d00d      	beq.n	80048ce <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	2b80      	cmp	r3, #128	; 0x80
 80048b6:	d833      	bhi.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	2b40      	cmp	r3, #64	; 0x40
 80048c2:	d011      	beq.n	80048e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80048c4:	e02c      	b.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80048c6:	f7fd ffd1 	bl	800286c <HAL_RCC_GetPCLK3Freq>
 80048ca:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80048cc:	e377      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80048ce:	4b8f      	ldr	r3, [pc, #572]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048da:	d102      	bne.n	80048e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 80048dc:	4b8c      	ldr	r3, [pc, #560]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80048de:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80048e0:	e36d      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80048e6:	e36a      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80048e8:	f7fd fe76 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 80048ec:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80048ee:	e366      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80048f0:	4b86      	ldr	r3, [pc, #536]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d005      	beq.n	8004908 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80048fc:	4b83      	ldr	r3, [pc, #524]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	0f1b      	lsrs	r3, r3, #28
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	e006      	b.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8004908:	4b80      	ldr	r3, [pc, #512]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800490a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800490e:	041b      	lsls	r3, r3, #16
 8004910:	0f1b      	lsrs	r3, r3, #28
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	4a7f      	ldr	r2, [pc, #508]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800491e:	e34e      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004924:	e34b      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8004926:	e9d7 2300 	ldrd	r2, r3, [r7]
 800492a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800492e:	430b      	orrs	r3, r1
 8004930:	d147      	bne.n	80049c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004932:	4b76      	ldr	r3, [pc, #472]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004938:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800493c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	2b00      	cmp	r3, #0
 8004942:	d103      	bne.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004944:	f7fd ff6a 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8004948:	6378      	str	r0, [r7, #52]	; 0x34
 800494a:	e338      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800494c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004952:	d103      	bne.n	800495c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8004954:	f7fd fe40 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004958:	6378      	str	r0, [r7, #52]	; 0x34
 800495a:	e330      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 800495c:	4b6b      	ldr	r3, [pc, #428]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004968:	d106      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800496a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800496c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004970:	d102      	bne.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8004972:	4b67      	ldr	r3, [pc, #412]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
 8004976:	e322      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8004978:	4b64      	ldr	r3, [pc, #400]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0320 	and.w	r3, r3, #32
 8004980:	2b20      	cmp	r3, #32
 8004982:	d11b      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8004984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004986:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800498a:	d117      	bne.n	80049bc <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800498c:	4b5f      	ldr	r3, [pc, #380]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d005      	beq.n	80049a4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8004998:	4b5c      	ldr	r3, [pc, #368]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	0e1b      	lsrs	r3, r3, #24
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	e006      	b.n	80049b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 80049a4:	4b59      	ldr	r3, [pc, #356]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80049a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049aa:	041b      	lsls	r3, r3, #16
 80049ac:	0e1b      	lsrs	r3, r3, #24
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	4a58      	ldr	r2, [pc, #352]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80049b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34
 80049ba:	e300      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80049bc:	2300      	movs	r3, #0
 80049be:	637b      	str	r3, [r7, #52]	; 0x34
 80049c0:	e2fd      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80049c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80049ca:	430b      	orrs	r3, r1
 80049cc:	d15b      	bne.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80049ce:	4b4f      	ldr	r3, [pc, #316]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80049d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80049d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d117      	bne.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80049e0:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d005      	beq.n	80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 80049ec:	4b47      	ldr	r3, [pc, #284]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	0e1b      	lsrs	r3, r3, #24
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	e006      	b.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 80049f8:	4b44      	ldr	r3, [pc, #272]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80049fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	0e1b      	lsrs	r3, r3, #24
 8004a02:	f003 030f 	and.w	r3, r3, #15
 8004a06:	4a43      	ldr	r2, [pc, #268]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a0e:	e2d6      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8004a10:	4b3e      	ldr	r3, [pc, #248]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a1e:	d112      	bne.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8004a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a26:	d10e      	bne.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004a28:	4b38      	ldr	r3, [pc, #224]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a36:	d102      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8004a38:	23fa      	movs	r3, #250	; 0xfa
 8004a3a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004a3c:	e2bf      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8004a3e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004a44:	e2bb      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8004a46:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a52:	d106      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8004a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a5a:	d102      	bne.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8004a5c:	4b2c      	ldr	r3, [pc, #176]	; (8004b10 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8004a5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004a60:	e2ad      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8004a62:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d107      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a76:	d103      	bne.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8004a78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a7e:	e29e      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8004a80:	2300      	movs	r3, #0
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
 8004a84:	e29b      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8004a86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a8a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	d162      	bne.n	8004b58 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004a98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a9c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d117      	bne.n	8004ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004aa4:	4b19      	ldr	r3, [pc, #100]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8004ab0:	4b16      	ldr	r3, [pc, #88]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	0e1b      	lsrs	r3, r3, #24
 8004ab6:	f003 030f 	and.w	r3, r3, #15
 8004aba:	e006      	b.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8004abc:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004abe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	0e1b      	lsrs	r3, r3, #24
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8004acc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ad2:	e274      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8004ad4:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004ad6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ae2:	d119      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aea:	d115      	bne.n	8004b18 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004aec:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8004aee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004afa:	d102      	bne.n	8004b02 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8004afc:	23fa      	movs	r3, #250	; 0xfa
 8004afe:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004b00:	e25d      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8004b02:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004b06:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004b08:	e259      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8004b0a:	bf00      	nop
 8004b0c:	46020c00 	.word	0x46020c00
 8004b10:	00f42400 	.word	0x00f42400
 8004b14:	080066ac 	.word	0x080066ac
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8004b18:	4b9d      	ldr	r3, [pc, #628]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b24:	d106      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b2c:	d102      	bne.n	8004b34 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8004b2e:	4b99      	ldr	r3, [pc, #612]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004b30:	637b      	str	r3, [r7, #52]	; 0x34
 8004b32:	e244      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8004b34:	4b96      	ldr	r3, [pc, #600]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d107      	bne.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b48:	d103      	bne.n	8004b52 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8004b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8004b50:	e235      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
 8004b56:	e232      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8004b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b5c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004b60:	430b      	orrs	r3, r1
 8004b62:	d147      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004b64:	4b8a      	ldr	r3, [pc, #552]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b6a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b6e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8004b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8004b76:	f7fd fe51 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8004b7a:	6378      	str	r0, [r7, #52]	; 0x34
 8004b7c:	e21f      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8004b7e:	4b84      	ldr	r3, [pc, #528]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b8c:	d112      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b94:	d10e      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004b96:	4b7e      	ldr	r3, [pc, #504]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ba4:	d102      	bne.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 8004ba6:	23fa      	movs	r3, #250	; 0xfa
 8004ba8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004baa:	e208      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8004bac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004bb0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004bb2:	e204      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8004bb4:	4b76      	ldr	r3, [pc, #472]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc0:	d106      	bne.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8004bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bc8:	d102      	bne.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8004bca:	4b72      	ldr	r3, [pc, #456]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004bcc:	637b      	str	r3, [r7, #52]	; 0x34
 8004bce:	e1f6      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8004bd0:	4b6f      	ldr	r3, [pc, #444]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d107      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004be4:	d103      	bne.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8004be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34
 8004bec:	e1e7      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf2:	e1e4      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8004bf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bf8:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8004bfc:	430b      	orrs	r3, r1
 8004bfe:	d12d      	bne.n	8004c5c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8004c00:	4b63      	ldr	r3, [pc, #396]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c06:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004c0a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8004c0c:	4b60      	ldr	r3, [pc, #384]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c18:	d105      	bne.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8004c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d102      	bne.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8004c20:	4b5c      	ldr	r3, [pc, #368]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004c22:	637b      	str	r3, [r7, #52]	; 0x34
 8004c24:	e1cb      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe fc74 	bl	8003520 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004c3c:	e1bf      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8004c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c44:	d107      	bne.n	8004c56 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c46:	f107 0318 	add.w	r3, r7, #24
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fe fdce 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	637b      	str	r3, [r7, #52]	; 0x34
 8004c54:	e1b3      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5a:	e1b0      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8004c5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c60:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8004c64:	430b      	orrs	r3, r1
 8004c66:	d14d      	bne.n	8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8004c68:	4b49      	ldr	r3, [pc, #292]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c6e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c72:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c7a:	d028      	beq.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c82:	d83c      	bhi.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c8a:	d013      	beq.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c92:	d834      	bhi.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d004      	beq.n	8004ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca0:	d004      	beq.n	8004cac <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004ca2:	e02c      	b.n	8004cfe <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8004ca4:	f7fd fdce 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 8004ca8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004caa:	e188      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004cac:	f7fd fc94 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004cb0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004cb2:	e184      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004cb4:	4b36      	ldr	r3, [pc, #216]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cc0:	d102      	bne.n	8004cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8004cc2:	4b34      	ldr	r3, [pc, #208]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004cc4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004cc6:	e17a      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ccc:	e177      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004cce:	4b30      	ldr	r3, [pc, #192]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8004cda:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	0e1b      	lsrs	r3, r3, #24
 8004ce0:	f003 030f 	and.w	r3, r3, #15
 8004ce4:	e006      	b.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8004ce6:	4b2a      	ldr	r3, [pc, #168]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cec:	041b      	lsls	r3, r3, #16
 8004cee:	0e1b      	lsrs	r3, r3, #24
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	4a28      	ldr	r2, [pc, #160]	; (8004d98 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8004cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004cfc:	e15f      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d02:	e15c      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8004d04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d08:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8004d0c:	430b      	orrs	r3, r1
 8004d0e:	d154      	bne.n	8004dba <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8004d10:	4b1f      	ldr	r3, [pc, #124]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d16:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d1a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d22:	d028      	beq.n	8004d76 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8004d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d2a:	d843      	bhi.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d32:	d013      	beq.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d3a:	d83b      	bhi.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d004      	beq.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d48:	d004      	beq.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8004d4a:	e033      	b.n	8004db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8004d4c:	f7fd fd66 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8004d50:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004d52:	e134      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004d54:	f7fd fc40 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004d58:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004d5a:	e130      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d68:	d102      	bne.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8004d6c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004d6e:	e126      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d74:	e123      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00c      	beq.n	8004d9c <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8004d82:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	0e1b      	lsrs	r3, r3, #24
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	e00d      	b.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8004d8e:	bf00      	nop
 8004d90:	46020c00 	.word	0x46020c00
 8004d94:	00f42400 	.word	0x00f42400
 8004d98:	080066ac 	.word	0x080066ac
 8004d9c:	4b8a      	ldr	r3, [pc, #552]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004da2:	041b      	lsls	r3, r3, #16
 8004da4:	0e1b      	lsrs	r3, r3, #24
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	4a88      	ldr	r2, [pc, #544]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8004dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004db2:	e104      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004db4:	2300      	movs	r3, #0
 8004db6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004db8:	e101      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8004dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dbe:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8004dc2:	430b      	orrs	r3, r1
 8004dc4:	d16e      	bne.n	8004ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8004dc6:	4b80      	ldr	r3, [pc, #512]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004dc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004dcc:	f003 0318 	and.w	r3, r3, #24
 8004dd0:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	2b18      	cmp	r3, #24
 8004dd6:	d862      	bhi.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004e45 	.word	0x08004e45
 8004de4:	08004e9f 	.word	0x08004e9f
 8004de8:	08004e9f 	.word	0x08004e9f
 8004dec:	08004e9f 	.word	0x08004e9f
 8004df0:	08004e9f 	.word	0x08004e9f
 8004df4:	08004e9f 	.word	0x08004e9f
 8004df8:	08004e9f 	.word	0x08004e9f
 8004dfc:	08004e9f 	.word	0x08004e9f
 8004e00:	08004e4d 	.word	0x08004e4d
 8004e04:	08004e9f 	.word	0x08004e9f
 8004e08:	08004e9f 	.word	0x08004e9f
 8004e0c:	08004e9f 	.word	0x08004e9f
 8004e10:	08004e9f 	.word	0x08004e9f
 8004e14:	08004e9f 	.word	0x08004e9f
 8004e18:	08004e9f 	.word	0x08004e9f
 8004e1c:	08004e9f 	.word	0x08004e9f
 8004e20:	08004e55 	.word	0x08004e55
 8004e24:	08004e9f 	.word	0x08004e9f
 8004e28:	08004e9f 	.word	0x08004e9f
 8004e2c:	08004e9f 	.word	0x08004e9f
 8004e30:	08004e9f 	.word	0x08004e9f
 8004e34:	08004e9f 	.word	0x08004e9f
 8004e38:	08004e9f 	.word	0x08004e9f
 8004e3c:	08004e9f 	.word	0x08004e9f
 8004e40:	08004e6f 	.word	0x08004e6f
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8004e44:	f7fd fd12 	bl	800286c <HAL_RCC_GetPCLK3Freq>
 8004e48:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004e4a:	e0b8      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004e4c:	f7fd fbc4 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004e50:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004e52:	e0b4      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e54:	4b5c      	ldr	r3, [pc, #368]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e60:	d102      	bne.n	8004e68 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8004e62:	4b5b      	ldr	r3, [pc, #364]	; (8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8004e66:	e0aa      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e6c:	e0a7      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004e6e:	4b56      	ldr	r3, [pc, #344]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8004e7a:	4b53      	ldr	r3, [pc, #332]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	0e1b      	lsrs	r3, r3, #24
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	e006      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8004e86:	4b50      	ldr	r3, [pc, #320]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004e88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e8c:	041b      	lsls	r3, r3, #16
 8004e8e:	0e1b      	lsrs	r3, r3, #24
 8004e90:	f003 030f 	and.w	r3, r3, #15
 8004e94:	4a4d      	ldr	r2, [pc, #308]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8004e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e9a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e9c:	e08f      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004ea2:	e08c      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8004ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ea8:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8004eac:	430b      	orrs	r3, r1
 8004eae:	d14c      	bne.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8004eb0:	4b45      	ldr	r3, [pc, #276]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004eb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004eb6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004eba:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004ec2:	d013      	beq.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004eca:	d83b      	bhi.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ed2:	d013      	beq.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004eda:	d833      	bhi.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8004edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d014      	beq.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ee8:	d014      	beq.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8004eea:	e02b      	b.n	8004f44 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eec:	f107 0318 	add.w	r3, r7, #24
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe fc7b 	bl	80037ec <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004efa:	e060      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe fb0d 	bl	8003520 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f0a:	e058      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8004f0c:	f7fd fb64 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 8004f10:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8004f12:	e054      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8004f14:	4b2c      	ldr	r3, [pc, #176]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8004f20:	4b29      	ldr	r3, [pc, #164]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	0e1b      	lsrs	r3, r3, #24
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	e006      	b.n	8004f3a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8004f2c:	4b26      	ldr	r3, [pc, #152]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004f2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f32:	041b      	lsls	r3, r3, #16
 8004f34:	0e1b      	lsrs	r3, r3, #24
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	4a24      	ldr	r2, [pc, #144]	; (8004fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8004f3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f42:	e03c      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f48:	e039      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8004f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f4e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8004f52:	430b      	orrs	r3, r1
 8004f54:	d131      	bne.n	8004fba <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8004f56:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f60:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8004f62:	4b19      	ldr	r3, [pc, #100]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d106      	bne.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8004f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d103      	bne.n	8004f7e <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8004f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f7c:	e01f      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f8c:	d112      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f94:	d10e      	bne.n	8004fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004f96:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8004f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fa4:	d102      	bne.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8004fa6:	23fa      	movs	r3, #250	; 0xfa
 8004fa8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004faa:	e008      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8004fac:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8004fb2:	e004      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb8:	e001      	b.n	8004fbe <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3738      	adds	r7, #56	; 0x38
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	46020c00 	.word	0x46020c00
 8004fcc:	080066ac 	.word	0x080066ac
 8004fd0:	00f42400 	.word	0x00f42400

08004fd4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8004fdc:	4b47      	ldr	r3, [pc, #284]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a46      	ldr	r2, [pc, #280]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 8004fe2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fe6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fe8:	f7fb fe42 	bl	8000c70 <HAL_GetTick>
 8004fec:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004fee:	e008      	b.n	8005002 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ff0:	f7fb fe3e 	bl	8000c70 <HAL_GetTick>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	1ad3      	subs	r3, r2, r3
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d901      	bls.n	8005002 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e077      	b.n	80050f2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005002:	4b3e      	ldr	r3, [pc, #248]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1f0      	bne.n	8004ff0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800500e:	4b3b      	ldr	r3, [pc, #236]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 8005010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005012:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005016:	f023 0303 	bic.w	r3, r3, #3
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6811      	ldr	r1, [r2, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6852      	ldr	r2, [r2, #4]
 8005022:	3a01      	subs	r2, #1
 8005024:	0212      	lsls	r2, r2, #8
 8005026:	430a      	orrs	r2, r1
 8005028:	4934      	ldr	r1, [pc, #208]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 800502a:	4313      	orrs	r3, r2
 800502c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800502e:	4b33      	ldr	r3, [pc, #204]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 8005030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005032:	4b33      	ldr	r3, [pc, #204]	; (8005100 <RCCEx_PLL2_Config+0x12c>)
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6892      	ldr	r2, [r2, #8]
 800503a:	3a01      	subs	r2, #1
 800503c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68d2      	ldr	r2, [r2, #12]
 8005044:	3a01      	subs	r2, #1
 8005046:	0252      	lsls	r2, r2, #9
 8005048:	b292      	uxth	r2, r2
 800504a:	4311      	orrs	r1, r2
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6912      	ldr	r2, [r2, #16]
 8005050:	3a01      	subs	r2, #1
 8005052:	0412      	lsls	r2, r2, #16
 8005054:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005058:	4311      	orrs	r1, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6952      	ldr	r2, [r2, #20]
 800505e:	3a01      	subs	r2, #1
 8005060:	0612      	lsls	r2, r2, #24
 8005062:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005066:	430a      	orrs	r2, r1
 8005068:	4924      	ldr	r1, [pc, #144]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 800506a:	4313      	orrs	r3, r2
 800506c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800506e:	4b23      	ldr	r3, [pc, #140]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 8005070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005072:	f023 020c 	bic.w	r2, r3, #12
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	4920      	ldr	r1, [pc, #128]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 800507c:	4313      	orrs	r3, r2
 800507e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8005080:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 8005082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	491c      	ldr	r1, [pc, #112]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 800508a:	4313      	orrs	r3, r2
 800508c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800508e:	4b1b      	ldr	r3, [pc, #108]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	4a1a      	ldr	r2, [pc, #104]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 8005094:	f023 0310 	bic.w	r3, r3, #16
 8005098:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800509a:	4b18      	ldr	r3, [pc, #96]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	69d2      	ldr	r2, [r2, #28]
 80050aa:	00d2      	lsls	r2, r2, #3
 80050ac:	4913      	ldr	r1, [pc, #76]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80050b2:	4b12      	ldr	r3, [pc, #72]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b6:	4a11      	ldr	r2, [pc, #68]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 80050b8:	f043 0310 	orr.w	r3, r3, #16
 80050bc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80050be:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a0e      	ldr	r2, [pc, #56]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 80050c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050c8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050ca:	f7fb fdd1 	bl	8000c70 <HAL_GetTick>
 80050ce:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050d0:	e008      	b.n	80050e4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050d2:	f7fb fdcd 	bl	8000c70 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e006      	b.n	80050f2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <RCCEx_PLL2_Config+0x128>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d0f0      	beq.n	80050d2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0

}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3710      	adds	r7, #16
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	46020c00 	.word	0x46020c00
 8005100:	80800000 	.word	0x80800000

08005104 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800510c:	4b47      	ldr	r3, [pc, #284]	; (800522c <RCCEx_PLL3_Config+0x128>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a46      	ldr	r2, [pc, #280]	; (800522c <RCCEx_PLL3_Config+0x128>)
 8005112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005116:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005118:	f7fb fdaa 	bl	8000c70 <HAL_GetTick>
 800511c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800511e:	e008      	b.n	8005132 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005120:	f7fb fda6 	bl	8000c70 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e077      	b.n	8005222 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005132:	4b3e      	ldr	r3, [pc, #248]	; (800522c <RCCEx_PLL3_Config+0x128>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800513e:	4b3b      	ldr	r3, [pc, #236]	; (800522c <RCCEx_PLL3_Config+0x128>)
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005146:	f023 0303 	bic.w	r3, r3, #3
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6811      	ldr	r1, [r2, #0]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6852      	ldr	r2, [r2, #4]
 8005152:	3a01      	subs	r2, #1
 8005154:	0212      	lsls	r2, r2, #8
 8005156:	430a      	orrs	r2, r1
 8005158:	4934      	ldr	r1, [pc, #208]	; (800522c <RCCEx_PLL3_Config+0x128>)
 800515a:	4313      	orrs	r3, r2
 800515c:	630b      	str	r3, [r1, #48]	; 0x30
 800515e:	4b33      	ldr	r3, [pc, #204]	; (800522c <RCCEx_PLL3_Config+0x128>)
 8005160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005162:	4b33      	ldr	r3, [pc, #204]	; (8005230 <RCCEx_PLL3_Config+0x12c>)
 8005164:	4013      	ands	r3, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6892      	ldr	r2, [r2, #8]
 800516a:	3a01      	subs	r2, #1
 800516c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	68d2      	ldr	r2, [r2, #12]
 8005174:	3a01      	subs	r2, #1
 8005176:	0252      	lsls	r2, r2, #9
 8005178:	b292      	uxth	r2, r2
 800517a:	4311      	orrs	r1, r2
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6912      	ldr	r2, [r2, #16]
 8005180:	3a01      	subs	r2, #1
 8005182:	0412      	lsls	r2, r2, #16
 8005184:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005188:	4311      	orrs	r1, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6952      	ldr	r2, [r2, #20]
 800518e:	3a01      	subs	r2, #1
 8005190:	0612      	lsls	r2, r2, #24
 8005192:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005196:	430a      	orrs	r2, r1
 8005198:	4924      	ldr	r1, [pc, #144]	; (800522c <RCCEx_PLL3_Config+0x128>)
 800519a:	4313      	orrs	r3, r2
 800519c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800519e:	4b23      	ldr	r3, [pc, #140]	; (800522c <RCCEx_PLL3_Config+0x128>)
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	f023 020c 	bic.w	r2, r3, #12
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	4920      	ldr	r1, [pc, #128]	; (800522c <RCCEx_PLL3_Config+0x128>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80051b0:	4b1e      	ldr	r3, [pc, #120]	; (800522c <RCCEx_PLL3_Config+0x128>)
 80051b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a1b      	ldr	r3, [r3, #32]
 80051b8:	491c      	ldr	r1, [pc, #112]	; (800522c <RCCEx_PLL3_Config+0x128>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80051be:	4b1b      	ldr	r3, [pc, #108]	; (800522c <RCCEx_PLL3_Config+0x128>)
 80051c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c2:	4a1a      	ldr	r2, [pc, #104]	; (800522c <RCCEx_PLL3_Config+0x128>)
 80051c4:	f023 0310 	bic.w	r3, r3, #16
 80051c8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80051ca:	4b18      	ldr	r3, [pc, #96]	; (800522c <RCCEx_PLL3_Config+0x128>)
 80051cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	69d2      	ldr	r2, [r2, #28]
 80051da:	00d2      	lsls	r2, r2, #3
 80051dc:	4913      	ldr	r1, [pc, #76]	; (800522c <RCCEx_PLL3_Config+0x128>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80051e2:	4b12      	ldr	r3, [pc, #72]	; (800522c <RCCEx_PLL3_Config+0x128>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	4a11      	ldr	r2, [pc, #68]	; (800522c <RCCEx_PLL3_Config+0x128>)
 80051e8:	f043 0310 	orr.w	r3, r3, #16
 80051ec:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80051ee:	4b0f      	ldr	r3, [pc, #60]	; (800522c <RCCEx_PLL3_Config+0x128>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a0e      	ldr	r2, [pc, #56]	; (800522c <RCCEx_PLL3_Config+0x128>)
 80051f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80051fa:	f7fb fd39 	bl	8000c70 <HAL_GetTick>
 80051fe:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005200:	e008      	b.n	8005214 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005202:	f7fb fd35 	bl	8000c70 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	2b02      	cmp	r3, #2
 800520e:	d901      	bls.n	8005214 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8005210:	2303      	movs	r3, #3
 8005212:	e006      	b.n	8005222 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005214:	4b05      	ldr	r3, [pc, #20]	; (800522c <RCCEx_PLL3_Config+0x128>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d0f0      	beq.n	8005202 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	46020c00 	.word	0x46020c00
 8005230:	80800000 	.word	0x80800000

08005234 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e042      	b.n	80052cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7fb fae1 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2224      	movs	r2, #36	; 0x24
 8005262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f022 0201 	bic.w	r2, r2, #1
 8005274:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8d2 	bl	8005420 <UART_SetConfig>
 800527c:	4603      	mov	r3, r0
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e022      	b.n	80052cc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fa68 	bl	8005764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 faef 	bl	80058a8 <UART_CheckIdleState>
 80052ca:	4603      	mov	r3, r0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08a      	sub	sp, #40	; 0x28
 80052d8:	af02      	add	r7, sp, #8
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	4613      	mov	r3, r2
 80052e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	f040 8092 	bne.w	8005414 <HAL_UART_Transmit+0x140>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d002      	beq.n	80052fc <HAL_UART_Transmit+0x28>
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d101      	bne.n	8005300 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80052fc:	2301      	movs	r3, #1
 80052fe:	e08a      	b.n	8005416 <HAL_UART_Transmit+0x142>
    }

    __HAL_LOCK(huart);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005306:	2b01      	cmp	r3, #1
 8005308:	d101      	bne.n	800530e <HAL_UART_Transmit+0x3a>
 800530a:	2302      	movs	r3, #2
 800530c:	e083      	b.n	8005416 <HAL_UART_Transmit+0x142>
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005320:	2b80      	cmp	r3, #128	; 0x80
 8005322:	d107      	bne.n	8005334 <HAL_UART_Transmit+0x60>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	689a      	ldr	r2, [r3, #8]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005332:	609a      	str	r2, [r3, #8]
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2221      	movs	r2, #33	; 0x21
 8005340:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005344:	f7fb fc94 	bl	8000c70 <HAL_GetTick>
 8005348:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	88fa      	ldrh	r2, [r7, #6]
 800534e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	88fa      	ldrh	r2, [r7, #6]
 8005356:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005362:	d108      	bne.n	8005376 <HAL_UART_Transmit+0xa2>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d104      	bne.n	8005376 <HAL_UART_Transmit+0xa2>
    {
      pdata8bits  = NULL;
 800536c:	2300      	movs	r3, #0
 800536e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	61bb      	str	r3, [r7, #24]
 8005374:	e003      	b.n	800537e <HAL_UART_Transmit+0xaa>
    }
    else
    {
      pdata8bits  = pData;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800537a:	2300      	movs	r3, #0
 800537c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005386:	e02c      	b.n	80053e2 <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	2200      	movs	r2, #0
 8005390:	2180      	movs	r1, #128	; 0x80
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fad3 	bl	800593e <UART_WaitOnFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_UART_Transmit+0xce>
      {
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e039      	b.n	8005416 <HAL_UART_Transmit+0x142>
      }
      if (pdata8bits == NULL)
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d10b      	bne.n	80053c0 <HAL_UART_Transmit+0xec>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	3302      	adds	r3, #2
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	e007      	b.n	80053d0 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	781a      	ldrb	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	3301      	adds	r3, #1
 80053ce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	3b01      	subs	r3, #1
 80053da:	b29a      	uxth	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1cc      	bne.n	8005388 <HAL_UART_Transmit+0xb4>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2200      	movs	r2, #0
 80053f6:	2140      	movs	r1, #64	; 0x40
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f000 faa0 	bl	800593e <UART_WaitOnFlagUntilTimeout>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e006      	b.n	8005416 <HAL_UART_Transmit+0x142>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2220      	movs	r2, #32
 800540c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	e000      	b.n	8005416 <HAL_UART_Transmit+0x142>
  }
  else
  {
    return HAL_BUSY;
 8005414:	2302      	movs	r3, #2
  }
}
 8005416:	4618      	mov	r0, r3
 8005418:	3720      	adds	r7, #32
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005424:	b094      	sub	sp, #80	; 0x50
 8005426:	af00      	add	r7, sp, #0
 8005428:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800542a:	2300      	movs	r3, #0
 800542c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b7e      	ldr	r3, [pc, #504]	; (8005630 <UART_SetConfig+0x210>)
 8005436:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	431a      	orrs	r2, r3
 8005442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	431a      	orrs	r2, r3
 8005448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544a:	69db      	ldr	r3, [r3, #28]
 800544c:	4313      	orrs	r3, r2
 800544e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4977      	ldr	r1, [pc, #476]	; (8005634 <UART_SetConfig+0x214>)
 8005458:	4019      	ands	r1, r3
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005460:	430b      	orrs	r3, r1
 8005462:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800546e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005470:	68d9      	ldr	r1, [r3, #12]
 8005472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	ea40 0301 	orr.w	r3, r0, r1
 800547a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b6a      	ldr	r3, [pc, #424]	; (8005630 <UART_SetConfig+0x210>)
 8005488:	429a      	cmp	r2, r3
 800548a:	d009      	beq.n	80054a0 <UART_SetConfig+0x80>
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	4b69      	ldr	r3, [pc, #420]	; (8005638 <UART_SetConfig+0x218>)
 8005492:	429a      	cmp	r2, r3
 8005494:	d004      	beq.n	80054a0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005498:	6a1a      	ldr	r2, [r3, #32]
 800549a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800549c:	4313      	orrs	r3, r2
 800549e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80054aa:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80054ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054b4:	430b      	orrs	r3, r1
 80054b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	f023 000f 	bic.w	r0, r3, #15
 80054c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80054c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	ea40 0301 	orr.w	r3, r0, r1
 80054ce:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	4b59      	ldr	r3, [pc, #356]	; (800563c <UART_SetConfig+0x21c>)
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d102      	bne.n	80054e0 <UART_SetConfig+0xc0>
 80054da:	2301      	movs	r3, #1
 80054dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80054de:	e029      	b.n	8005534 <UART_SetConfig+0x114>
 80054e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	4b56      	ldr	r3, [pc, #344]	; (8005640 <UART_SetConfig+0x220>)
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d102      	bne.n	80054f0 <UART_SetConfig+0xd0>
 80054ea:	2302      	movs	r3, #2
 80054ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80054ee:	e021      	b.n	8005534 <UART_SetConfig+0x114>
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b53      	ldr	r3, [pc, #332]	; (8005644 <UART_SetConfig+0x224>)
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d102      	bne.n	8005500 <UART_SetConfig+0xe0>
 80054fa:	2304      	movs	r3, #4
 80054fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80054fe:	e019      	b.n	8005534 <UART_SetConfig+0x114>
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	4b50      	ldr	r3, [pc, #320]	; (8005648 <UART_SetConfig+0x228>)
 8005506:	429a      	cmp	r2, r3
 8005508:	d102      	bne.n	8005510 <UART_SetConfig+0xf0>
 800550a:	2308      	movs	r3, #8
 800550c:	64bb      	str	r3, [r7, #72]	; 0x48
 800550e:	e011      	b.n	8005534 <UART_SetConfig+0x114>
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	4b4d      	ldr	r3, [pc, #308]	; (800564c <UART_SetConfig+0x22c>)
 8005516:	429a      	cmp	r2, r3
 8005518:	d102      	bne.n	8005520 <UART_SetConfig+0x100>
 800551a:	2310      	movs	r3, #16
 800551c:	64bb      	str	r3, [r7, #72]	; 0x48
 800551e:	e009      	b.n	8005534 <UART_SetConfig+0x114>
 8005520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	4b42      	ldr	r3, [pc, #264]	; (8005630 <UART_SetConfig+0x210>)
 8005526:	429a      	cmp	r2, r3
 8005528:	d102      	bne.n	8005530 <UART_SetConfig+0x110>
 800552a:	2320      	movs	r3, #32
 800552c:	64bb      	str	r3, [r7, #72]	; 0x48
 800552e:	e001      	b.n	8005534 <UART_SetConfig+0x114>
 8005530:	2300      	movs	r3, #0
 8005532:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	4b3d      	ldr	r3, [pc, #244]	; (8005630 <UART_SetConfig+0x210>)
 800553a:	429a      	cmp	r2, r3
 800553c:	d005      	beq.n	800554a <UART_SetConfig+0x12a>
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	4b3d      	ldr	r3, [pc, #244]	; (8005638 <UART_SetConfig+0x218>)
 8005544:	429a      	cmp	r2, r3
 8005546:	f040 8085 	bne.w	8005654 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800554a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800554c:	2200      	movs	r2, #0
 800554e:	623b      	str	r3, [r7, #32]
 8005550:	627a      	str	r2, [r7, #36]	; 0x24
 8005552:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005556:	f7fe fc15 	bl	8003d84 <HAL_RCCEx_GetPeriphCLKFreq>
 800555a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800555c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 80e8 	beq.w	8005734 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005568:	4a39      	ldr	r2, [pc, #228]	; (8005650 <UART_SetConfig+0x230>)
 800556a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800556e:	461a      	mov	r2, r3
 8005570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005572:	fbb3 f3f2 	udiv	r3, r3, r2
 8005576:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	4613      	mov	r3, r2
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4413      	add	r3, r2
 8005582:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005584:	429a      	cmp	r2, r3
 8005586:	d305      	bcc.n	8005594 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800558e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005590:	429a      	cmp	r2, r3
 8005592:	d903      	bls.n	800559c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800559a:	e048      	b.n	800562e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800559c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800559e:	2200      	movs	r2, #0
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	61fa      	str	r2, [r7, #28]
 80055a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a8:	4a29      	ldr	r2, [pc, #164]	; (8005650 <UART_SetConfig+0x230>)
 80055aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2200      	movs	r2, #0
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	617a      	str	r2, [r7, #20]
 80055b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80055ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80055be:	f7fa fe59 	bl	8000274 <__aeabi_uldivmod>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4610      	mov	r0, r2
 80055c8:	4619      	mov	r1, r3
 80055ca:	f04f 0200 	mov.w	r2, #0
 80055ce:	f04f 0300 	mov.w	r3, #0
 80055d2:	020b      	lsls	r3, r1, #8
 80055d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055d8:	0202      	lsls	r2, r0, #8
 80055da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055dc:	6849      	ldr	r1, [r1, #4]
 80055de:	0849      	lsrs	r1, r1, #1
 80055e0:	2000      	movs	r0, #0
 80055e2:	460c      	mov	r4, r1
 80055e4:	4605      	mov	r5, r0
 80055e6:	eb12 0804 	adds.w	r8, r2, r4
 80055ea:	eb43 0905 	adc.w	r9, r3, r5
 80055ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	60fa      	str	r2, [r7, #12]
 80055f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055fc:	4640      	mov	r0, r8
 80055fe:	4649      	mov	r1, r9
 8005600:	f7fa fe38 	bl	8000274 <__aeabi_uldivmod>
 8005604:	4602      	mov	r2, r0
 8005606:	460b      	mov	r3, r1
 8005608:	4613      	mov	r3, r2
 800560a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800560c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800560e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005612:	d308      	bcc.n	8005626 <UART_SetConfig+0x206>
 8005614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800561a:	d204      	bcs.n	8005626 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005622:	60da      	str	r2, [r3, #12]
 8005624:	e003      	b.n	800562e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800562c:	e082      	b.n	8005734 <UART_SetConfig+0x314>
 800562e:	e081      	b.n	8005734 <UART_SetConfig+0x314>
 8005630:	46002400 	.word	0x46002400
 8005634:	cfff69f3 	.word	0xcfff69f3
 8005638:	56002400 	.word	0x56002400
 800563c:	40013800 	.word	0x40013800
 8005640:	40004400 	.word	0x40004400
 8005644:	40004800 	.word	0x40004800
 8005648:	40004c00 	.word	0x40004c00
 800564c:	40005000 	.word	0x40005000
 8005650:	0800676c 	.word	0x0800676c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005656:	69db      	ldr	r3, [r3, #28]
 8005658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800565c:	d13c      	bne.n	80056d8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800565e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005660:	2200      	movs	r2, #0
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	607a      	str	r2, [r7, #4]
 8005666:	e9d7 0100 	ldrd	r0, r1, [r7]
 800566a:	f7fe fb8b 	bl	8003d84 <HAL_RCCEx_GetPeriphCLKFreq>
 800566e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005670:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d05e      	beq.n	8005734 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	4a39      	ldr	r2, [pc, #228]	; (8005760 <UART_SetConfig+0x340>)
 800567c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005680:	461a      	mov	r2, r3
 8005682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005684:	fbb3 f3f2 	udiv	r3, r3, r2
 8005688:	005a      	lsls	r2, r3, #1
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	085b      	lsrs	r3, r3, #1
 8005690:	441a      	add	r2, r3
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	fbb2 f3f3 	udiv	r3, r2, r3
 800569a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800569c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569e:	2b0f      	cmp	r3, #15
 80056a0:	d916      	bls.n	80056d0 <UART_SetConfig+0x2b0>
 80056a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056a8:	d212      	bcs.n	80056d0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f023 030f 	bic.w	r3, r3, #15
 80056b2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b6:	085b      	lsrs	r3, r3, #1
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	f003 0307 	and.w	r3, r3, #7
 80056be:	b29a      	uxth	r2, r3
 80056c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80056c2:	4313      	orrs	r3, r2
 80056c4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 80056c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80056cc:	60da      	str	r2, [r3, #12]
 80056ce:	e031      	b.n	8005734 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80056d6:	e02d      	b.n	8005734 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80056d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056da:	2200      	movs	r2, #0
 80056dc:	469a      	mov	sl, r3
 80056de:	4693      	mov	fp, r2
 80056e0:	4650      	mov	r0, sl
 80056e2:	4659      	mov	r1, fp
 80056e4:	f7fe fb4e 	bl	8003d84 <HAL_RCCEx_GetPeriphCLKFreq>
 80056e8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 80056ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d021      	beq.n	8005734 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	4a1a      	ldr	r2, [pc, #104]	; (8005760 <UART_SetConfig+0x340>)
 80056f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056fa:	461a      	mov	r2, r3
 80056fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	441a      	add	r2, r3
 800570a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005712:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005716:	2b0f      	cmp	r3, #15
 8005718:	d909      	bls.n	800572e <UART_SetConfig+0x30e>
 800571a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005720:	d205      	bcs.n	800572e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005724:	b29a      	uxth	r2, r3
 8005726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60da      	str	r2, [r3, #12]
 800572c:	e002      	b.n	8005734 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005736:	2201      	movs	r2, #1
 8005738:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	2201      	movs	r2, #1
 8005740:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	2200      	movs	r2, #0
 8005748:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	2200      	movs	r2, #0
 800574e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8005750:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005754:	4618      	mov	r0, r3
 8005756:	3750      	adds	r7, #80	; 0x50
 8005758:	46bd      	mov	sp, r7
 800575a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800575e:	bf00      	nop
 8005760:	0800676c 	.word	0x0800676c

08005764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	430a      	orrs	r2, r1
 80057ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	430a      	orrs	r2, r1
 80057f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f8:	f003 0310 	and.w	r3, r3, #16
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00a      	beq.n	8005838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	430a      	orrs	r2, r1
 8005836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01a      	beq.n	800587a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005862:	d10a      	bne.n	800587a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	605a      	str	r2, [r3, #4]
  }
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058b8:	f7fb f9da 	bl	8000c70 <HAL_GetTick>
 80058bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d10e      	bne.n	80058ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f82f 	bl	800593e <UART_WaitOnFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058e6:	2303      	movs	r3, #3
 80058e8:	e025      	b.n	8005936 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 0304 	and.w	r3, r3, #4
 80058f4:	2b04      	cmp	r3, #4
 80058f6:	d10e      	bne.n	8005916 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80058f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f819 	bl	800593e <UART_WaitOnFlagUntilTimeout>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d001      	beq.n	8005916 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e00f      	b.n	8005936 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2220      	movs	r2, #32
 800591a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2220      	movs	r2, #32
 8005922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3710      	adds	r7, #16
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b09c      	sub	sp, #112	; 0x70
 8005942:	af00      	add	r7, sp, #0
 8005944:	60f8      	str	r0, [r7, #12]
 8005946:	60b9      	str	r1, [r7, #8]
 8005948:	603b      	str	r3, [r7, #0]
 800594a:	4613      	mov	r3, r2
 800594c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800594e:	e0a9      	b.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005956:	f000 80a5 	beq.w	8005aa4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800595a:	f7fb f989 	bl	8000c70 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005966:	429a      	cmp	r2, r3
 8005968:	d302      	bcc.n	8005970 <UART_WaitOnFlagUntilTimeout+0x32>
 800596a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800596c:	2b00      	cmp	r3, #0
 800596e:	d140      	bne.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800597e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005980:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005984:	667b      	str	r3, [r7, #100]	; 0x64
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	461a      	mov	r2, r3
 800598c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800598e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005990:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005992:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005994:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005996:	e841 2300 	strex	r3, r2, [r1]
 800599a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800599c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1e6      	bne.n	8005970 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3308      	adds	r3, #8
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ac:	e853 3f00 	ldrex	r3, [r3]
 80059b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b4:	f023 0301 	bic.w	r3, r3, #1
 80059b8:	663b      	str	r3, [r7, #96]	; 0x60
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3308      	adds	r3, #8
 80059c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80059c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80059c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80059c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ca:	e841 2300 	strex	r3, r2, [r1]
 80059ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80059d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1e5      	bne.n	80059a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2220      	movs	r2, #32
 80059da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e069      	b.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d051      	beq.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a0e:	d149      	bne.n	8005aa4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a38:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e6      	bne.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3308      	adds	r3, #8
 8005a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f023 0301 	bic.w	r3, r3, #1
 8005a62:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3308      	adds	r3, #8
 8005a6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005a6c:	623a      	str	r2, [r7, #32]
 8005a6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	69f9      	ldr	r1, [r7, #28]
 8005a72:	6a3a      	ldr	r2, [r7, #32]
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e5      	bne.n	8005a4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2220      	movs	r2, #32
 8005a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e010      	b.n	8005ac6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	69da      	ldr	r2, [r3, #28]
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	4013      	ands	r3, r2
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	bf0c      	ite	eq
 8005ab4:	2301      	moveq	r3, #1
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	461a      	mov	r2, r3
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	f43f af46 	beq.w	8005950 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3770      	adds	r7, #112	; 0x70
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b085      	sub	sp, #20
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d101      	bne.n	8005ae4 <HAL_UARTEx_DisableFifoMode+0x16>
 8005ae0:	2302      	movs	r3, #2
 8005ae2:	e027      	b.n	8005b34 <HAL_UARTEx_DisableFifoMode+0x66>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2224      	movs	r2, #36	; 0x24
 8005af0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0201 	bic.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b084      	sub	sp, #16
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e02d      	b.n	8005bb4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	; 0x24
 8005b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0201 	bic.w	r2, r2, #1
 8005b7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	430a      	orrs	r2, r1
 8005b92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f84f 	bl	8005c38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	e02d      	b.n	8005c30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2224      	movs	r2, #36	; 0x24
 8005be0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	683a      	ldr	r2, [r7, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 f811 	bl	8005c38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3710      	adds	r7, #16
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d108      	bne.n	8005c5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005c58:	e031      	b.n	8005cbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005c5e:	2308      	movs	r3, #8
 8005c60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	0e5b      	lsrs	r3, r3, #25
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	0f5b      	lsrs	r3, r3, #29
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c82:	7bbb      	ldrb	r3, [r7, #14]
 8005c84:	7b3a      	ldrb	r2, [r7, #12]
 8005c86:	4911      	ldr	r1, [pc, #68]	; (8005ccc <UARTEx_SetNbDataToProcess+0x94>)
 8005c88:	5c8a      	ldrb	r2, [r1, r2]
 8005c8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005c8e:	7b3a      	ldrb	r2, [r7, #12]
 8005c90:	490f      	ldr	r1, [pc, #60]	; (8005cd0 <UARTEx_SetNbDataToProcess+0x98>)
 8005c92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005c94:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	7b7a      	ldrb	r2, [r7, #13]
 8005ca4:	4909      	ldr	r1, [pc, #36]	; (8005ccc <UARTEx_SetNbDataToProcess+0x94>)
 8005ca6:	5c8a      	ldrb	r2, [r1, r2]
 8005ca8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005cac:	7b7a      	ldrb	r2, [r7, #13]
 8005cae:	4908      	ldr	r1, [pc, #32]	; (8005cd0 <UARTEx_SetNbDataToProcess+0x98>)
 8005cb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005cb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005cbe:	bf00      	nop
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	08006784 	.word	0x08006784
 8005cd0:	0800678c 	.word	0x0800678c

08005cd4 <__errno>:
 8005cd4:	4b01      	ldr	r3, [pc, #4]	; (8005cdc <__errno+0x8>)
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	2000000c 	.word	0x2000000c

08005ce0 <__libc_init_array>:
 8005ce0:	b570      	push	{r4, r5, r6, lr}
 8005ce2:	4d0d      	ldr	r5, [pc, #52]	; (8005d18 <__libc_init_array+0x38>)
 8005ce4:	2600      	movs	r6, #0
 8005ce6:	4c0d      	ldr	r4, [pc, #52]	; (8005d1c <__libc_init_array+0x3c>)
 8005ce8:	1b64      	subs	r4, r4, r5
 8005cea:	10a4      	asrs	r4, r4, #2
 8005cec:	42a6      	cmp	r6, r4
 8005cee:	d109      	bne.n	8005d04 <__libc_init_array+0x24>
 8005cf0:	4d0b      	ldr	r5, [pc, #44]	; (8005d20 <__libc_init_array+0x40>)
 8005cf2:	2600      	movs	r6, #0
 8005cf4:	4c0b      	ldr	r4, [pc, #44]	; (8005d24 <__libc_init_array+0x44>)
 8005cf6:	f000 fcb7 	bl	8006668 <_init>
 8005cfa:	1b64      	subs	r4, r4, r5
 8005cfc:	10a4      	asrs	r4, r4, #2
 8005cfe:	42a6      	cmp	r6, r4
 8005d00:	d105      	bne.n	8005d0e <__libc_init_array+0x2e>
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d08:	3601      	adds	r6, #1
 8005d0a:	4798      	blx	r3
 8005d0c:	e7ee      	b.n	8005cec <__libc_init_array+0xc>
 8005d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d12:	3601      	adds	r6, #1
 8005d14:	4798      	blx	r3
 8005d16:	e7f2      	b.n	8005cfe <__libc_init_array+0x1e>
 8005d18:	080067d0 	.word	0x080067d0
 8005d1c:	080067d0 	.word	0x080067d0
 8005d20:	080067d0 	.word	0x080067d0
 8005d24:	080067d4 	.word	0x080067d4

08005d28 <memset>:
 8005d28:	4402      	add	r2, r0
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d100      	bne.n	8005d32 <memset+0xa>
 8005d30:	4770      	bx	lr
 8005d32:	f803 1b01 	strb.w	r1, [r3], #1
 8005d36:	e7f9      	b.n	8005d2c <memset+0x4>

08005d38 <_vsniprintf_r>:
 8005d38:	b530      	push	{r4, r5, lr}
 8005d3a:	4614      	mov	r4, r2
 8005d3c:	b09b      	sub	sp, #108	; 0x6c
 8005d3e:	4605      	mov	r5, r0
 8005d40:	461a      	mov	r2, r3
 8005d42:	2c00      	cmp	r4, #0
 8005d44:	da05      	bge.n	8005d52 <_vsniprintf_r+0x1a>
 8005d46:	238b      	movs	r3, #139	; 0x8b
 8005d48:	6003      	str	r3, [r0, #0]
 8005d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4e:	b01b      	add	sp, #108	; 0x6c
 8005d50:	bd30      	pop	{r4, r5, pc}
 8005d52:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005d56:	9100      	str	r1, [sp, #0]
 8005d58:	9104      	str	r1, [sp, #16]
 8005d5a:	4669      	mov	r1, sp
 8005d5c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005d60:	bf14      	ite	ne
 8005d62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005d66:	4623      	moveq	r3, r4
 8005d68:	9302      	str	r3, [sp, #8]
 8005d6a:	9305      	str	r3, [sp, #20]
 8005d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d70:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005d74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d76:	f000 f875 	bl	8005e64 <_svfiprintf_r>
 8005d7a:	1c43      	adds	r3, r0, #1
 8005d7c:	bfbc      	itt	lt
 8005d7e:	238b      	movlt	r3, #139	; 0x8b
 8005d80:	602b      	strlt	r3, [r5, #0]
 8005d82:	2c00      	cmp	r4, #0
 8005d84:	d0e3      	beq.n	8005d4e <_vsniprintf_r+0x16>
 8005d86:	9b00      	ldr	r3, [sp, #0]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	e7df      	b.n	8005d4e <_vsniprintf_r+0x16>
	...

08005d90 <vsniprintf>:
 8005d90:	b507      	push	{r0, r1, r2, lr}
 8005d92:	9300      	str	r3, [sp, #0]
 8005d94:	4613      	mov	r3, r2
 8005d96:	460a      	mov	r2, r1
 8005d98:	4601      	mov	r1, r0
 8005d9a:	4803      	ldr	r0, [pc, #12]	; (8005da8 <vsniprintf+0x18>)
 8005d9c:	6800      	ldr	r0, [r0, #0]
 8005d9e:	f7ff ffcb 	bl	8005d38 <_vsniprintf_r>
 8005da2:	b003      	add	sp, #12
 8005da4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005da8:	2000000c 	.word	0x2000000c

08005dac <__ssputs_r>:
 8005dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005db0:	688e      	ldr	r6, [r1, #8]
 8005db2:	4682      	mov	sl, r0
 8005db4:	460c      	mov	r4, r1
 8005db6:	4690      	mov	r8, r2
 8005db8:	429e      	cmp	r6, r3
 8005dba:	461f      	mov	r7, r3
 8005dbc:	d838      	bhi.n	8005e30 <__ssputs_r+0x84>
 8005dbe:	898a      	ldrh	r2, [r1, #12]
 8005dc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005dc4:	d032      	beq.n	8005e2c <__ssputs_r+0x80>
 8005dc6:	6825      	ldr	r5, [r4, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	6909      	ldr	r1, [r1, #16]
 8005dcc:	eba5 0901 	sub.w	r9, r5, r1
 8005dd0:	6965      	ldr	r5, [r4, #20]
 8005dd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005dd6:	444b      	add	r3, r9
 8005dd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ddc:	106d      	asrs	r5, r5, #1
 8005dde:	429d      	cmp	r5, r3
 8005de0:	bf38      	it	cc
 8005de2:	461d      	movcc	r5, r3
 8005de4:	0553      	lsls	r3, r2, #21
 8005de6:	d531      	bpl.n	8005e4c <__ssputs_r+0xa0>
 8005de8:	4629      	mov	r1, r5
 8005dea:	f000 fb73 	bl	80064d4 <_malloc_r>
 8005dee:	4606      	mov	r6, r0
 8005df0:	b950      	cbnz	r0, 8005e08 <__ssputs_r+0x5c>
 8005df2:	230c      	movs	r3, #12
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	f8ca 3000 	str.w	r3, [sl]
 8005dfc:	89a3      	ldrh	r3, [r4, #12]
 8005dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e02:	81a3      	strh	r3, [r4, #12]
 8005e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e08:	464a      	mov	r2, r9
 8005e0a:	6921      	ldr	r1, [r4, #16]
 8005e0c:	f000 face 	bl	80063ac <memcpy>
 8005e10:	89a3      	ldrh	r3, [r4, #12]
 8005e12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e1a:	81a3      	strh	r3, [r4, #12]
 8005e1c:	6126      	str	r6, [r4, #16]
 8005e1e:	444e      	add	r6, r9
 8005e20:	6165      	str	r5, [r4, #20]
 8005e22:	eba5 0509 	sub.w	r5, r5, r9
 8005e26:	6026      	str	r6, [r4, #0]
 8005e28:	463e      	mov	r6, r7
 8005e2a:	60a5      	str	r5, [r4, #8]
 8005e2c:	42be      	cmp	r6, r7
 8005e2e:	d900      	bls.n	8005e32 <__ssputs_r+0x86>
 8005e30:	463e      	mov	r6, r7
 8005e32:	4632      	mov	r2, r6
 8005e34:	4641      	mov	r1, r8
 8005e36:	6820      	ldr	r0, [r4, #0]
 8005e38:	f000 fac5 	bl	80063c6 <memmove>
 8005e3c:	68a3      	ldr	r3, [r4, #8]
 8005e3e:	2000      	movs	r0, #0
 8005e40:	1b9b      	subs	r3, r3, r6
 8005e42:	60a3      	str	r3, [r4, #8]
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	4433      	add	r3, r6
 8005e48:	6023      	str	r3, [r4, #0]
 8005e4a:	e7db      	b.n	8005e04 <__ssputs_r+0x58>
 8005e4c:	462a      	mov	r2, r5
 8005e4e:	f000 fbb5 	bl	80065bc <_realloc_r>
 8005e52:	4606      	mov	r6, r0
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d1e1      	bne.n	8005e1c <__ssputs_r+0x70>
 8005e58:	6921      	ldr	r1, [r4, #16]
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	f000 face 	bl	80063fc <_free_r>
 8005e60:	e7c7      	b.n	8005df2 <__ssputs_r+0x46>
	...

08005e64 <_svfiprintf_r>:
 8005e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e68:	4698      	mov	r8, r3
 8005e6a:	898b      	ldrh	r3, [r1, #12]
 8005e6c:	b09d      	sub	sp, #116	; 0x74
 8005e6e:	4607      	mov	r7, r0
 8005e70:	061b      	lsls	r3, r3, #24
 8005e72:	460d      	mov	r5, r1
 8005e74:	4614      	mov	r4, r2
 8005e76:	d50e      	bpl.n	8005e96 <_svfiprintf_r+0x32>
 8005e78:	690b      	ldr	r3, [r1, #16]
 8005e7a:	b963      	cbnz	r3, 8005e96 <_svfiprintf_r+0x32>
 8005e7c:	2140      	movs	r1, #64	; 0x40
 8005e7e:	f000 fb29 	bl	80064d4 <_malloc_r>
 8005e82:	6028      	str	r0, [r5, #0]
 8005e84:	6128      	str	r0, [r5, #16]
 8005e86:	b920      	cbnz	r0, 8005e92 <_svfiprintf_r+0x2e>
 8005e88:	230c      	movs	r3, #12
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e90:	e0d1      	b.n	8006036 <_svfiprintf_r+0x1d2>
 8005e92:	2340      	movs	r3, #64	; 0x40
 8005e94:	616b      	str	r3, [r5, #20]
 8005e96:	2300      	movs	r3, #0
 8005e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e9c:	f04f 0901 	mov.w	r9, #1
 8005ea0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006050 <_svfiprintf_r+0x1ec>
 8005ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ea6:	2320      	movs	r3, #32
 8005ea8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eac:	2330      	movs	r3, #48	; 0x30
 8005eae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005eb2:	4623      	mov	r3, r4
 8005eb4:	469a      	mov	sl, r3
 8005eb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005eba:	b10a      	cbz	r2, 8005ec0 <_svfiprintf_r+0x5c>
 8005ebc:	2a25      	cmp	r2, #37	; 0x25
 8005ebe:	d1f9      	bne.n	8005eb4 <_svfiprintf_r+0x50>
 8005ec0:	ebba 0b04 	subs.w	fp, sl, r4
 8005ec4:	d00b      	beq.n	8005ede <_svfiprintf_r+0x7a>
 8005ec6:	465b      	mov	r3, fp
 8005ec8:	4622      	mov	r2, r4
 8005eca:	4629      	mov	r1, r5
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f7ff ff6d 	bl	8005dac <__ssputs_r>
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	f000 80aa 	beq.w	800602c <_svfiprintf_r+0x1c8>
 8005ed8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005eda:	445a      	add	r2, fp
 8005edc:	9209      	str	r2, [sp, #36]	; 0x24
 8005ede:	f89a 3000 	ldrb.w	r3, [sl]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	f000 80a2 	beq.w	800602c <_svfiprintf_r+0x1c8>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f04f 32ff 	mov.w	r2, #4294967295
 8005eee:	f10a 0a01 	add.w	sl, sl, #1
 8005ef2:	9304      	str	r3, [sp, #16]
 8005ef4:	9307      	str	r3, [sp, #28]
 8005ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005efa:	931a      	str	r3, [sp, #104]	; 0x68
 8005efc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f00:	4654      	mov	r4, sl
 8005f02:	2205      	movs	r2, #5
 8005f04:	4852      	ldr	r0, [pc, #328]	; (8006050 <_svfiprintf_r+0x1ec>)
 8005f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f0a:	f000 fa41 	bl	8006390 <memchr>
 8005f0e:	9a04      	ldr	r2, [sp, #16]
 8005f10:	b9d8      	cbnz	r0, 8005f4a <_svfiprintf_r+0xe6>
 8005f12:	06d0      	lsls	r0, r2, #27
 8005f14:	bf44      	itt	mi
 8005f16:	2320      	movmi	r3, #32
 8005f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f1c:	0711      	lsls	r1, r2, #28
 8005f1e:	bf44      	itt	mi
 8005f20:	232b      	movmi	r3, #43	; 0x2b
 8005f22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f26:	f89a 3000 	ldrb.w	r3, [sl]
 8005f2a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f2c:	d015      	beq.n	8005f5a <_svfiprintf_r+0xf6>
 8005f2e:	9a07      	ldr	r2, [sp, #28]
 8005f30:	4654      	mov	r4, sl
 8005f32:	2000      	movs	r0, #0
 8005f34:	f04f 0c0a 	mov.w	ip, #10
 8005f38:	4621      	mov	r1, r4
 8005f3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f3e:	3b30      	subs	r3, #48	; 0x30
 8005f40:	2b09      	cmp	r3, #9
 8005f42:	d94e      	bls.n	8005fe2 <_svfiprintf_r+0x17e>
 8005f44:	b1b0      	cbz	r0, 8005f74 <_svfiprintf_r+0x110>
 8005f46:	9207      	str	r2, [sp, #28]
 8005f48:	e014      	b.n	8005f74 <_svfiprintf_r+0x110>
 8005f4a:	eba0 0308 	sub.w	r3, r0, r8
 8005f4e:	46a2      	mov	sl, r4
 8005f50:	fa09 f303 	lsl.w	r3, r9, r3
 8005f54:	4313      	orrs	r3, r2
 8005f56:	9304      	str	r3, [sp, #16]
 8005f58:	e7d2      	b.n	8005f00 <_svfiprintf_r+0x9c>
 8005f5a:	9b03      	ldr	r3, [sp, #12]
 8005f5c:	1d19      	adds	r1, r3, #4
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	9103      	str	r1, [sp, #12]
 8005f64:	bfbb      	ittet	lt
 8005f66:	425b      	neglt	r3, r3
 8005f68:	f042 0202 	orrlt.w	r2, r2, #2
 8005f6c:	9307      	strge	r3, [sp, #28]
 8005f6e:	9307      	strlt	r3, [sp, #28]
 8005f70:	bfb8      	it	lt
 8005f72:	9204      	strlt	r2, [sp, #16]
 8005f74:	7823      	ldrb	r3, [r4, #0]
 8005f76:	2b2e      	cmp	r3, #46	; 0x2e
 8005f78:	d10c      	bne.n	8005f94 <_svfiprintf_r+0x130>
 8005f7a:	7863      	ldrb	r3, [r4, #1]
 8005f7c:	2b2a      	cmp	r3, #42	; 0x2a
 8005f7e:	d135      	bne.n	8005fec <_svfiprintf_r+0x188>
 8005f80:	9b03      	ldr	r3, [sp, #12]
 8005f82:	3402      	adds	r4, #2
 8005f84:	1d1a      	adds	r2, r3, #4
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	9203      	str	r2, [sp, #12]
 8005f8c:	bfb8      	it	lt
 8005f8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f92:	9305      	str	r3, [sp, #20]
 8005f94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006060 <_svfiprintf_r+0x1fc>
 8005f98:	2203      	movs	r2, #3
 8005f9a:	7821      	ldrb	r1, [r4, #0]
 8005f9c:	4650      	mov	r0, sl
 8005f9e:	f000 f9f7 	bl	8006390 <memchr>
 8005fa2:	b140      	cbz	r0, 8005fb6 <_svfiprintf_r+0x152>
 8005fa4:	2340      	movs	r3, #64	; 0x40
 8005fa6:	eba0 000a 	sub.w	r0, r0, sl
 8005faa:	3401      	adds	r4, #1
 8005fac:	fa03 f000 	lsl.w	r0, r3, r0
 8005fb0:	9b04      	ldr	r3, [sp, #16]
 8005fb2:	4303      	orrs	r3, r0
 8005fb4:	9304      	str	r3, [sp, #16]
 8005fb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fba:	2206      	movs	r2, #6
 8005fbc:	4825      	ldr	r0, [pc, #148]	; (8006054 <_svfiprintf_r+0x1f0>)
 8005fbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005fc2:	f000 f9e5 	bl	8006390 <memchr>
 8005fc6:	2800      	cmp	r0, #0
 8005fc8:	d038      	beq.n	800603c <_svfiprintf_r+0x1d8>
 8005fca:	4b23      	ldr	r3, [pc, #140]	; (8006058 <_svfiprintf_r+0x1f4>)
 8005fcc:	bb1b      	cbnz	r3, 8006016 <_svfiprintf_r+0x1b2>
 8005fce:	9b03      	ldr	r3, [sp, #12]
 8005fd0:	3307      	adds	r3, #7
 8005fd2:	f023 0307 	bic.w	r3, r3, #7
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	9303      	str	r3, [sp, #12]
 8005fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fdc:	4433      	add	r3, r6
 8005fde:	9309      	str	r3, [sp, #36]	; 0x24
 8005fe0:	e767      	b.n	8005eb2 <_svfiprintf_r+0x4e>
 8005fe2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	2001      	movs	r0, #1
 8005fea:	e7a5      	b.n	8005f38 <_svfiprintf_r+0xd4>
 8005fec:	2300      	movs	r3, #0
 8005fee:	3401      	adds	r4, #1
 8005ff0:	f04f 0c0a 	mov.w	ip, #10
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	9305      	str	r3, [sp, #20]
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ffe:	3a30      	subs	r2, #48	; 0x30
 8006000:	2a09      	cmp	r2, #9
 8006002:	d903      	bls.n	800600c <_svfiprintf_r+0x1a8>
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0c5      	beq.n	8005f94 <_svfiprintf_r+0x130>
 8006008:	9105      	str	r1, [sp, #20]
 800600a:	e7c3      	b.n	8005f94 <_svfiprintf_r+0x130>
 800600c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006010:	4604      	mov	r4, r0
 8006012:	2301      	movs	r3, #1
 8006014:	e7f0      	b.n	8005ff8 <_svfiprintf_r+0x194>
 8006016:	ab03      	add	r3, sp, #12
 8006018:	462a      	mov	r2, r5
 800601a:	a904      	add	r1, sp, #16
 800601c:	4638      	mov	r0, r7
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	4b0e      	ldr	r3, [pc, #56]	; (800605c <_svfiprintf_r+0x1f8>)
 8006022:	e000      	b.n	8006026 <_svfiprintf_r+0x1c2>
 8006024:	bf00      	nop
 8006026:	1c42      	adds	r2, r0, #1
 8006028:	4606      	mov	r6, r0
 800602a:	d1d6      	bne.n	8005fda <_svfiprintf_r+0x176>
 800602c:	89ab      	ldrh	r3, [r5, #12]
 800602e:	065b      	lsls	r3, r3, #25
 8006030:	f53f af2c 	bmi.w	8005e8c <_svfiprintf_r+0x28>
 8006034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006036:	b01d      	add	sp, #116	; 0x74
 8006038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603c:	ab03      	add	r3, sp, #12
 800603e:	462a      	mov	r2, r5
 8006040:	a904      	add	r1, sp, #16
 8006042:	4638      	mov	r0, r7
 8006044:	9300      	str	r3, [sp, #0]
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <_svfiprintf_r+0x1f8>)
 8006048:	f000 f87c 	bl	8006144 <_printf_i>
 800604c:	e7eb      	b.n	8006026 <_svfiprintf_r+0x1c2>
 800604e:	bf00      	nop
 8006050:	08006794 	.word	0x08006794
 8006054:	0800679e 	.word	0x0800679e
 8006058:	00000000 	.word	0x00000000
 800605c:	08005dad 	.word	0x08005dad
 8006060:	0800679a 	.word	0x0800679a

08006064 <_printf_common>:
 8006064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006068:	4616      	mov	r6, r2
 800606a:	4699      	mov	r9, r3
 800606c:	688a      	ldr	r2, [r1, #8]
 800606e:	4607      	mov	r7, r0
 8006070:	690b      	ldr	r3, [r1, #16]
 8006072:	460c      	mov	r4, r1
 8006074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006078:	4293      	cmp	r3, r2
 800607a:	bfb8      	it	lt
 800607c:	4613      	movlt	r3, r2
 800607e:	6033      	str	r3, [r6, #0]
 8006080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006084:	b10a      	cbz	r2, 800608a <_printf_common+0x26>
 8006086:	3301      	adds	r3, #1
 8006088:	6033      	str	r3, [r6, #0]
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	0699      	lsls	r1, r3, #26
 800608e:	bf42      	ittt	mi
 8006090:	6833      	ldrmi	r3, [r6, #0]
 8006092:	3302      	addmi	r3, #2
 8006094:	6033      	strmi	r3, [r6, #0]
 8006096:	6825      	ldr	r5, [r4, #0]
 8006098:	f015 0506 	ands.w	r5, r5, #6
 800609c:	d106      	bne.n	80060ac <_printf_common+0x48>
 800609e:	f104 0a19 	add.w	sl, r4, #25
 80060a2:	68e3      	ldr	r3, [r4, #12]
 80060a4:	6832      	ldr	r2, [r6, #0]
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	42ab      	cmp	r3, r5
 80060aa:	dc29      	bgt.n	8006100 <_printf_common+0x9c>
 80060ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060b0:	1e13      	subs	r3, r2, #0
 80060b2:	6822      	ldr	r2, [r4, #0]
 80060b4:	bf18      	it	ne
 80060b6:	2301      	movne	r3, #1
 80060b8:	0692      	lsls	r2, r2, #26
 80060ba:	d42e      	bmi.n	800611a <_printf_common+0xb6>
 80060bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060c0:	4649      	mov	r1, r9
 80060c2:	4638      	mov	r0, r7
 80060c4:	47c0      	blx	r8
 80060c6:	3001      	adds	r0, #1
 80060c8:	d021      	beq.n	800610e <_printf_common+0xaa>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	341a      	adds	r4, #26
 80060ce:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80060d2:	f003 0306 	and.w	r3, r3, #6
 80060d6:	6832      	ldr	r2, [r6, #0]
 80060d8:	2600      	movs	r6, #0
 80060da:	2b04      	cmp	r3, #4
 80060dc:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80060e0:	bf08      	it	eq
 80060e2:	1aad      	subeq	r5, r5, r2
 80060e4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80060e8:	bf14      	ite	ne
 80060ea:	2500      	movne	r5, #0
 80060ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060f0:	4293      	cmp	r3, r2
 80060f2:	bfc4      	itt	gt
 80060f4:	1a9b      	subgt	r3, r3, r2
 80060f6:	18ed      	addgt	r5, r5, r3
 80060f8:	42b5      	cmp	r5, r6
 80060fa:	d11a      	bne.n	8006132 <_printf_common+0xce>
 80060fc:	2000      	movs	r0, #0
 80060fe:	e008      	b.n	8006112 <_printf_common+0xae>
 8006100:	2301      	movs	r3, #1
 8006102:	4652      	mov	r2, sl
 8006104:	4649      	mov	r1, r9
 8006106:	4638      	mov	r0, r7
 8006108:	47c0      	blx	r8
 800610a:	3001      	adds	r0, #1
 800610c:	d103      	bne.n	8006116 <_printf_common+0xb2>
 800610e:	f04f 30ff 	mov.w	r0, #4294967295
 8006112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006116:	3501      	adds	r5, #1
 8006118:	e7c3      	b.n	80060a2 <_printf_common+0x3e>
 800611a:	18e1      	adds	r1, r4, r3
 800611c:	1c5a      	adds	r2, r3, #1
 800611e:	2030      	movs	r0, #48	; 0x30
 8006120:	3302      	adds	r3, #2
 8006122:	4422      	add	r2, r4
 8006124:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800612c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006130:	e7c4      	b.n	80060bc <_printf_common+0x58>
 8006132:	2301      	movs	r3, #1
 8006134:	4622      	mov	r2, r4
 8006136:	4649      	mov	r1, r9
 8006138:	4638      	mov	r0, r7
 800613a:	47c0      	blx	r8
 800613c:	3001      	adds	r0, #1
 800613e:	d0e6      	beq.n	800610e <_printf_common+0xaa>
 8006140:	3601      	adds	r6, #1
 8006142:	e7d9      	b.n	80060f8 <_printf_common+0x94>

08006144 <_printf_i>:
 8006144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006148:	7e0f      	ldrb	r7, [r1, #24]
 800614a:	4691      	mov	r9, r2
 800614c:	4680      	mov	r8, r0
 800614e:	460c      	mov	r4, r1
 8006150:	2f78      	cmp	r7, #120	; 0x78
 8006152:	469a      	mov	sl, r3
 8006154:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800615a:	d807      	bhi.n	800616c <_printf_i+0x28>
 800615c:	2f62      	cmp	r7, #98	; 0x62
 800615e:	d80a      	bhi.n	8006176 <_printf_i+0x32>
 8006160:	2f00      	cmp	r7, #0
 8006162:	f000 80d8 	beq.w	8006316 <_printf_i+0x1d2>
 8006166:	2f58      	cmp	r7, #88	; 0x58
 8006168:	f000 80a3 	beq.w	80062b2 <_printf_i+0x16e>
 800616c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006174:	e03a      	b.n	80061ec <_printf_i+0xa8>
 8006176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800617a:	2b15      	cmp	r3, #21
 800617c:	d8f6      	bhi.n	800616c <_printf_i+0x28>
 800617e:	a101      	add	r1, pc, #4	; (adr r1, 8006184 <_printf_i+0x40>)
 8006180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006184:	080061dd 	.word	0x080061dd
 8006188:	080061f1 	.word	0x080061f1
 800618c:	0800616d 	.word	0x0800616d
 8006190:	0800616d 	.word	0x0800616d
 8006194:	0800616d 	.word	0x0800616d
 8006198:	0800616d 	.word	0x0800616d
 800619c:	080061f1 	.word	0x080061f1
 80061a0:	0800616d 	.word	0x0800616d
 80061a4:	0800616d 	.word	0x0800616d
 80061a8:	0800616d 	.word	0x0800616d
 80061ac:	0800616d 	.word	0x0800616d
 80061b0:	080062fd 	.word	0x080062fd
 80061b4:	08006221 	.word	0x08006221
 80061b8:	080062df 	.word	0x080062df
 80061bc:	0800616d 	.word	0x0800616d
 80061c0:	0800616d 	.word	0x0800616d
 80061c4:	0800631f 	.word	0x0800631f
 80061c8:	0800616d 	.word	0x0800616d
 80061cc:	08006221 	.word	0x08006221
 80061d0:	0800616d 	.word	0x0800616d
 80061d4:	0800616d 	.word	0x0800616d
 80061d8:	080062e7 	.word	0x080062e7
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	1d1a      	adds	r2, r3, #4
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	602a      	str	r2, [r5, #0]
 80061e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061ec:	2301      	movs	r3, #1
 80061ee:	e0a3      	b.n	8006338 <_printf_i+0x1f4>
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	6829      	ldr	r1, [r5, #0]
 80061f4:	0606      	lsls	r6, r0, #24
 80061f6:	f101 0304 	add.w	r3, r1, #4
 80061fa:	d50a      	bpl.n	8006212 <_printf_i+0xce>
 80061fc:	680e      	ldr	r6, [r1, #0]
 80061fe:	602b      	str	r3, [r5, #0]
 8006200:	2e00      	cmp	r6, #0
 8006202:	da03      	bge.n	800620c <_printf_i+0xc8>
 8006204:	232d      	movs	r3, #45	; 0x2d
 8006206:	4276      	negs	r6, r6
 8006208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800620c:	485e      	ldr	r0, [pc, #376]	; (8006388 <_printf_i+0x244>)
 800620e:	230a      	movs	r3, #10
 8006210:	e019      	b.n	8006246 <_printf_i+0x102>
 8006212:	680e      	ldr	r6, [r1, #0]
 8006214:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006218:	602b      	str	r3, [r5, #0]
 800621a:	bf18      	it	ne
 800621c:	b236      	sxthne	r6, r6
 800621e:	e7ef      	b.n	8006200 <_printf_i+0xbc>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	6820      	ldr	r0, [r4, #0]
 8006224:	1d19      	adds	r1, r3, #4
 8006226:	6029      	str	r1, [r5, #0]
 8006228:	0601      	lsls	r1, r0, #24
 800622a:	d501      	bpl.n	8006230 <_printf_i+0xec>
 800622c:	681e      	ldr	r6, [r3, #0]
 800622e:	e002      	b.n	8006236 <_printf_i+0xf2>
 8006230:	0646      	lsls	r6, r0, #25
 8006232:	d5fb      	bpl.n	800622c <_printf_i+0xe8>
 8006234:	881e      	ldrh	r6, [r3, #0]
 8006236:	2f6f      	cmp	r7, #111	; 0x6f
 8006238:	4853      	ldr	r0, [pc, #332]	; (8006388 <_printf_i+0x244>)
 800623a:	bf0c      	ite	eq
 800623c:	2308      	moveq	r3, #8
 800623e:	230a      	movne	r3, #10
 8006240:	2100      	movs	r1, #0
 8006242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006246:	6865      	ldr	r5, [r4, #4]
 8006248:	2d00      	cmp	r5, #0
 800624a:	60a5      	str	r5, [r4, #8]
 800624c:	bfa2      	ittt	ge
 800624e:	6821      	ldrge	r1, [r4, #0]
 8006250:	f021 0104 	bicge.w	r1, r1, #4
 8006254:	6021      	strge	r1, [r4, #0]
 8006256:	b90e      	cbnz	r6, 800625c <_printf_i+0x118>
 8006258:	2d00      	cmp	r5, #0
 800625a:	d04d      	beq.n	80062f8 <_printf_i+0x1b4>
 800625c:	4615      	mov	r5, r2
 800625e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006262:	fb03 6711 	mls	r7, r3, r1, r6
 8006266:	5dc7      	ldrb	r7, [r0, r7]
 8006268:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800626c:	4637      	mov	r7, r6
 800626e:	460e      	mov	r6, r1
 8006270:	42bb      	cmp	r3, r7
 8006272:	d9f4      	bls.n	800625e <_printf_i+0x11a>
 8006274:	2b08      	cmp	r3, #8
 8006276:	d10b      	bne.n	8006290 <_printf_i+0x14c>
 8006278:	6823      	ldr	r3, [r4, #0]
 800627a:	07de      	lsls	r6, r3, #31
 800627c:	d508      	bpl.n	8006290 <_printf_i+0x14c>
 800627e:	6923      	ldr	r3, [r4, #16]
 8006280:	6861      	ldr	r1, [r4, #4]
 8006282:	4299      	cmp	r1, r3
 8006284:	bfde      	ittt	le
 8006286:	2330      	movle	r3, #48	; 0x30
 8006288:	f805 3c01 	strble.w	r3, [r5, #-1]
 800628c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006290:	1b52      	subs	r2, r2, r5
 8006292:	6122      	str	r2, [r4, #16]
 8006294:	464b      	mov	r3, r9
 8006296:	aa03      	add	r2, sp, #12
 8006298:	4621      	mov	r1, r4
 800629a:	4640      	mov	r0, r8
 800629c:	f8cd a000 	str.w	sl, [sp]
 80062a0:	f7ff fee0 	bl	8006064 <_printf_common>
 80062a4:	3001      	adds	r0, #1
 80062a6:	d14c      	bne.n	8006342 <_printf_i+0x1fe>
 80062a8:	f04f 30ff 	mov.w	r0, #4294967295
 80062ac:	b004      	add	sp, #16
 80062ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b2:	4835      	ldr	r0, [pc, #212]	; (8006388 <_printf_i+0x244>)
 80062b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80062b8:	6829      	ldr	r1, [r5, #0]
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80062c0:	6029      	str	r1, [r5, #0]
 80062c2:	061d      	lsls	r5, r3, #24
 80062c4:	d514      	bpl.n	80062f0 <_printf_i+0x1ac>
 80062c6:	07df      	lsls	r7, r3, #31
 80062c8:	bf44      	itt	mi
 80062ca:	f043 0320 	orrmi.w	r3, r3, #32
 80062ce:	6023      	strmi	r3, [r4, #0]
 80062d0:	b91e      	cbnz	r6, 80062da <_printf_i+0x196>
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	f023 0320 	bic.w	r3, r3, #32
 80062d8:	6023      	str	r3, [r4, #0]
 80062da:	2310      	movs	r3, #16
 80062dc:	e7b0      	b.n	8006240 <_printf_i+0xfc>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	f043 0320 	orr.w	r3, r3, #32
 80062e4:	6023      	str	r3, [r4, #0]
 80062e6:	2378      	movs	r3, #120	; 0x78
 80062e8:	4828      	ldr	r0, [pc, #160]	; (800638c <_printf_i+0x248>)
 80062ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062ee:	e7e3      	b.n	80062b8 <_printf_i+0x174>
 80062f0:	0659      	lsls	r1, r3, #25
 80062f2:	bf48      	it	mi
 80062f4:	b2b6      	uxthmi	r6, r6
 80062f6:	e7e6      	b.n	80062c6 <_printf_i+0x182>
 80062f8:	4615      	mov	r5, r2
 80062fa:	e7bb      	b.n	8006274 <_printf_i+0x130>
 80062fc:	682b      	ldr	r3, [r5, #0]
 80062fe:	6826      	ldr	r6, [r4, #0]
 8006300:	1d18      	adds	r0, r3, #4
 8006302:	6961      	ldr	r1, [r4, #20]
 8006304:	6028      	str	r0, [r5, #0]
 8006306:	0635      	lsls	r5, r6, #24
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	d501      	bpl.n	8006310 <_printf_i+0x1cc>
 800630c:	6019      	str	r1, [r3, #0]
 800630e:	e002      	b.n	8006316 <_printf_i+0x1d2>
 8006310:	0670      	lsls	r0, r6, #25
 8006312:	d5fb      	bpl.n	800630c <_printf_i+0x1c8>
 8006314:	8019      	strh	r1, [r3, #0]
 8006316:	2300      	movs	r3, #0
 8006318:	4615      	mov	r5, r2
 800631a:	6123      	str	r3, [r4, #16]
 800631c:	e7ba      	b.n	8006294 <_printf_i+0x150>
 800631e:	682b      	ldr	r3, [r5, #0]
 8006320:	2100      	movs	r1, #0
 8006322:	1d1a      	adds	r2, r3, #4
 8006324:	602a      	str	r2, [r5, #0]
 8006326:	681d      	ldr	r5, [r3, #0]
 8006328:	6862      	ldr	r2, [r4, #4]
 800632a:	4628      	mov	r0, r5
 800632c:	f000 f830 	bl	8006390 <memchr>
 8006330:	b108      	cbz	r0, 8006336 <_printf_i+0x1f2>
 8006332:	1b40      	subs	r0, r0, r5
 8006334:	6060      	str	r0, [r4, #4]
 8006336:	6863      	ldr	r3, [r4, #4]
 8006338:	6123      	str	r3, [r4, #16]
 800633a:	2300      	movs	r3, #0
 800633c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006340:	e7a8      	b.n	8006294 <_printf_i+0x150>
 8006342:	6923      	ldr	r3, [r4, #16]
 8006344:	462a      	mov	r2, r5
 8006346:	4649      	mov	r1, r9
 8006348:	4640      	mov	r0, r8
 800634a:	47d0      	blx	sl
 800634c:	3001      	adds	r0, #1
 800634e:	d0ab      	beq.n	80062a8 <_printf_i+0x164>
 8006350:	6823      	ldr	r3, [r4, #0]
 8006352:	079b      	lsls	r3, r3, #30
 8006354:	d413      	bmi.n	800637e <_printf_i+0x23a>
 8006356:	68e0      	ldr	r0, [r4, #12]
 8006358:	9b03      	ldr	r3, [sp, #12]
 800635a:	4298      	cmp	r0, r3
 800635c:	bfb8      	it	lt
 800635e:	4618      	movlt	r0, r3
 8006360:	e7a4      	b.n	80062ac <_printf_i+0x168>
 8006362:	2301      	movs	r3, #1
 8006364:	4632      	mov	r2, r6
 8006366:	4649      	mov	r1, r9
 8006368:	4640      	mov	r0, r8
 800636a:	47d0      	blx	sl
 800636c:	3001      	adds	r0, #1
 800636e:	d09b      	beq.n	80062a8 <_printf_i+0x164>
 8006370:	3501      	adds	r5, #1
 8006372:	68e3      	ldr	r3, [r4, #12]
 8006374:	9903      	ldr	r1, [sp, #12]
 8006376:	1a5b      	subs	r3, r3, r1
 8006378:	42ab      	cmp	r3, r5
 800637a:	dcf2      	bgt.n	8006362 <_printf_i+0x21e>
 800637c:	e7eb      	b.n	8006356 <_printf_i+0x212>
 800637e:	2500      	movs	r5, #0
 8006380:	f104 0619 	add.w	r6, r4, #25
 8006384:	e7f5      	b.n	8006372 <_printf_i+0x22e>
 8006386:	bf00      	nop
 8006388:	080067a5 	.word	0x080067a5
 800638c:	080067b6 	.word	0x080067b6

08006390 <memchr>:
 8006390:	b2c9      	uxtb	r1, r1
 8006392:	4402      	add	r2, r0
 8006394:	b510      	push	{r4, lr}
 8006396:	4290      	cmp	r0, r2
 8006398:	4603      	mov	r3, r0
 800639a:	d101      	bne.n	80063a0 <memchr+0x10>
 800639c:	2300      	movs	r3, #0
 800639e:	e003      	b.n	80063a8 <memchr+0x18>
 80063a0:	781c      	ldrb	r4, [r3, #0]
 80063a2:	3001      	adds	r0, #1
 80063a4:	428c      	cmp	r4, r1
 80063a6:	d1f6      	bne.n	8006396 <memchr+0x6>
 80063a8:	4618      	mov	r0, r3
 80063aa:	bd10      	pop	{r4, pc}

080063ac <memcpy>:
 80063ac:	440a      	add	r2, r1
 80063ae:	1e43      	subs	r3, r0, #1
 80063b0:	4291      	cmp	r1, r2
 80063b2:	d100      	bne.n	80063b6 <memcpy+0xa>
 80063b4:	4770      	bx	lr
 80063b6:	b510      	push	{r4, lr}
 80063b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063bc:	4291      	cmp	r1, r2
 80063be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063c2:	d1f9      	bne.n	80063b8 <memcpy+0xc>
 80063c4:	bd10      	pop	{r4, pc}

080063c6 <memmove>:
 80063c6:	4288      	cmp	r0, r1
 80063c8:	b510      	push	{r4, lr}
 80063ca:	eb01 0402 	add.w	r4, r1, r2
 80063ce:	d902      	bls.n	80063d6 <memmove+0x10>
 80063d0:	4284      	cmp	r4, r0
 80063d2:	4623      	mov	r3, r4
 80063d4:	d807      	bhi.n	80063e6 <memmove+0x20>
 80063d6:	1e43      	subs	r3, r0, #1
 80063d8:	42a1      	cmp	r1, r4
 80063da:	d008      	beq.n	80063ee <memmove+0x28>
 80063dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063e4:	e7f8      	b.n	80063d8 <memmove+0x12>
 80063e6:	4402      	add	r2, r0
 80063e8:	4601      	mov	r1, r0
 80063ea:	428a      	cmp	r2, r1
 80063ec:	d100      	bne.n	80063f0 <memmove+0x2a>
 80063ee:	bd10      	pop	{r4, pc}
 80063f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063f8:	e7f7      	b.n	80063ea <memmove+0x24>
	...

080063fc <_free_r>:
 80063fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063fe:	2900      	cmp	r1, #0
 8006400:	d043      	beq.n	800648a <_free_r+0x8e>
 8006402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006406:	1f0c      	subs	r4, r1, #4
 8006408:	9001      	str	r0, [sp, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	bfb8      	it	lt
 800640e:	18e4      	addlt	r4, r4, r3
 8006410:	f000 f914 	bl	800663c <__malloc_lock>
 8006414:	4a1e      	ldr	r2, [pc, #120]	; (8006490 <_free_r+0x94>)
 8006416:	9801      	ldr	r0, [sp, #4]
 8006418:	6813      	ldr	r3, [r2, #0]
 800641a:	b933      	cbnz	r3, 800642a <_free_r+0x2e>
 800641c:	6063      	str	r3, [r4, #4]
 800641e:	6014      	str	r4, [r2, #0]
 8006420:	b003      	add	sp, #12
 8006422:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006426:	f000 b90f 	b.w	8006648 <__malloc_unlock>
 800642a:	42a3      	cmp	r3, r4
 800642c:	d908      	bls.n	8006440 <_free_r+0x44>
 800642e:	6825      	ldr	r5, [r4, #0]
 8006430:	1961      	adds	r1, r4, r5
 8006432:	428b      	cmp	r3, r1
 8006434:	bf01      	itttt	eq
 8006436:	6819      	ldreq	r1, [r3, #0]
 8006438:	685b      	ldreq	r3, [r3, #4]
 800643a:	1949      	addeq	r1, r1, r5
 800643c:	6021      	streq	r1, [r4, #0]
 800643e:	e7ed      	b.n	800641c <_free_r+0x20>
 8006440:	461a      	mov	r2, r3
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	b10b      	cbz	r3, 800644a <_free_r+0x4e>
 8006446:	42a3      	cmp	r3, r4
 8006448:	d9fa      	bls.n	8006440 <_free_r+0x44>
 800644a:	6811      	ldr	r1, [r2, #0]
 800644c:	1855      	adds	r5, r2, r1
 800644e:	42a5      	cmp	r5, r4
 8006450:	d10b      	bne.n	800646a <_free_r+0x6e>
 8006452:	6824      	ldr	r4, [r4, #0]
 8006454:	4421      	add	r1, r4
 8006456:	1854      	adds	r4, r2, r1
 8006458:	6011      	str	r1, [r2, #0]
 800645a:	42a3      	cmp	r3, r4
 800645c:	d1e0      	bne.n	8006420 <_free_r+0x24>
 800645e:	681c      	ldr	r4, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	4421      	add	r1, r4
 8006464:	6053      	str	r3, [r2, #4]
 8006466:	6011      	str	r1, [r2, #0]
 8006468:	e7da      	b.n	8006420 <_free_r+0x24>
 800646a:	d902      	bls.n	8006472 <_free_r+0x76>
 800646c:	230c      	movs	r3, #12
 800646e:	6003      	str	r3, [r0, #0]
 8006470:	e7d6      	b.n	8006420 <_free_r+0x24>
 8006472:	6825      	ldr	r5, [r4, #0]
 8006474:	1961      	adds	r1, r4, r5
 8006476:	428b      	cmp	r3, r1
 8006478:	bf02      	ittt	eq
 800647a:	6819      	ldreq	r1, [r3, #0]
 800647c:	685b      	ldreq	r3, [r3, #4]
 800647e:	1949      	addeq	r1, r1, r5
 8006480:	6063      	str	r3, [r4, #4]
 8006482:	bf08      	it	eq
 8006484:	6021      	streq	r1, [r4, #0]
 8006486:	6054      	str	r4, [r2, #4]
 8006488:	e7ca      	b.n	8006420 <_free_r+0x24>
 800648a:	b003      	add	sp, #12
 800648c:	bd30      	pop	{r4, r5, pc}
 800648e:	bf00      	nop
 8006490:	20000224 	.word	0x20000224

08006494 <sbrk_aligned>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	4e0e      	ldr	r6, [pc, #56]	; (80064d0 <sbrk_aligned+0x3c>)
 8006498:	460c      	mov	r4, r1
 800649a:	4605      	mov	r5, r0
 800649c:	6831      	ldr	r1, [r6, #0]
 800649e:	b911      	cbnz	r1, 80064a6 <sbrk_aligned+0x12>
 80064a0:	f000 f8bc 	bl	800661c <_sbrk_r>
 80064a4:	6030      	str	r0, [r6, #0]
 80064a6:	4621      	mov	r1, r4
 80064a8:	4628      	mov	r0, r5
 80064aa:	f000 f8b7 	bl	800661c <_sbrk_r>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d00a      	beq.n	80064c8 <sbrk_aligned+0x34>
 80064b2:	1cc4      	adds	r4, r0, #3
 80064b4:	f024 0403 	bic.w	r4, r4, #3
 80064b8:	42a0      	cmp	r0, r4
 80064ba:	d007      	beq.n	80064cc <sbrk_aligned+0x38>
 80064bc:	1a21      	subs	r1, r4, r0
 80064be:	4628      	mov	r0, r5
 80064c0:	f000 f8ac 	bl	800661c <_sbrk_r>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d101      	bne.n	80064cc <sbrk_aligned+0x38>
 80064c8:	f04f 34ff 	mov.w	r4, #4294967295
 80064cc:	4620      	mov	r0, r4
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	20000228 	.word	0x20000228

080064d4 <_malloc_r>:
 80064d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d8:	1ccd      	adds	r5, r1, #3
 80064da:	4607      	mov	r7, r0
 80064dc:	f025 0503 	bic.w	r5, r5, #3
 80064e0:	3508      	adds	r5, #8
 80064e2:	2d0c      	cmp	r5, #12
 80064e4:	bf38      	it	cc
 80064e6:	250c      	movcc	r5, #12
 80064e8:	2d00      	cmp	r5, #0
 80064ea:	db01      	blt.n	80064f0 <_malloc_r+0x1c>
 80064ec:	42a9      	cmp	r1, r5
 80064ee:	d905      	bls.n	80064fc <_malloc_r+0x28>
 80064f0:	230c      	movs	r3, #12
 80064f2:	2600      	movs	r6, #0
 80064f4:	603b      	str	r3, [r7, #0]
 80064f6:	4630      	mov	r0, r6
 80064f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064fc:	4e2e      	ldr	r6, [pc, #184]	; (80065b8 <_malloc_r+0xe4>)
 80064fe:	f000 f89d 	bl	800663c <__malloc_lock>
 8006502:	6833      	ldr	r3, [r6, #0]
 8006504:	461c      	mov	r4, r3
 8006506:	bb34      	cbnz	r4, 8006556 <_malloc_r+0x82>
 8006508:	4629      	mov	r1, r5
 800650a:	4638      	mov	r0, r7
 800650c:	f7ff ffc2 	bl	8006494 <sbrk_aligned>
 8006510:	1c43      	adds	r3, r0, #1
 8006512:	4604      	mov	r4, r0
 8006514:	d14d      	bne.n	80065b2 <_malloc_r+0xde>
 8006516:	6834      	ldr	r4, [r6, #0]
 8006518:	4626      	mov	r6, r4
 800651a:	2e00      	cmp	r6, #0
 800651c:	d140      	bne.n	80065a0 <_malloc_r+0xcc>
 800651e:	6823      	ldr	r3, [r4, #0]
 8006520:	4631      	mov	r1, r6
 8006522:	4638      	mov	r0, r7
 8006524:	eb04 0803 	add.w	r8, r4, r3
 8006528:	f000 f878 	bl	800661c <_sbrk_r>
 800652c:	4580      	cmp	r8, r0
 800652e:	d13a      	bne.n	80065a6 <_malloc_r+0xd2>
 8006530:	6821      	ldr	r1, [r4, #0]
 8006532:	3503      	adds	r5, #3
 8006534:	4638      	mov	r0, r7
 8006536:	1a6d      	subs	r5, r5, r1
 8006538:	f025 0503 	bic.w	r5, r5, #3
 800653c:	3508      	adds	r5, #8
 800653e:	2d0c      	cmp	r5, #12
 8006540:	bf38      	it	cc
 8006542:	250c      	movcc	r5, #12
 8006544:	4629      	mov	r1, r5
 8006546:	f7ff ffa5 	bl	8006494 <sbrk_aligned>
 800654a:	3001      	adds	r0, #1
 800654c:	d02b      	beq.n	80065a6 <_malloc_r+0xd2>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	442b      	add	r3, r5
 8006552:	6023      	str	r3, [r4, #0]
 8006554:	e00e      	b.n	8006574 <_malloc_r+0xa0>
 8006556:	6822      	ldr	r2, [r4, #0]
 8006558:	1b52      	subs	r2, r2, r5
 800655a:	d41e      	bmi.n	800659a <_malloc_r+0xc6>
 800655c:	2a0b      	cmp	r2, #11
 800655e:	d916      	bls.n	800658e <_malloc_r+0xba>
 8006560:	1961      	adds	r1, r4, r5
 8006562:	42a3      	cmp	r3, r4
 8006564:	6025      	str	r5, [r4, #0]
 8006566:	bf18      	it	ne
 8006568:	6059      	strne	r1, [r3, #4]
 800656a:	6863      	ldr	r3, [r4, #4]
 800656c:	bf08      	it	eq
 800656e:	6031      	streq	r1, [r6, #0]
 8006570:	5162      	str	r2, [r4, r5]
 8006572:	604b      	str	r3, [r1, #4]
 8006574:	f104 060b 	add.w	r6, r4, #11
 8006578:	4638      	mov	r0, r7
 800657a:	f000 f865 	bl	8006648 <__malloc_unlock>
 800657e:	1d23      	adds	r3, r4, #4
 8006580:	f026 0607 	bic.w	r6, r6, #7
 8006584:	1af2      	subs	r2, r6, r3
 8006586:	d0b6      	beq.n	80064f6 <_malloc_r+0x22>
 8006588:	1b9b      	subs	r3, r3, r6
 800658a:	50a3      	str	r3, [r4, r2]
 800658c:	e7b3      	b.n	80064f6 <_malloc_r+0x22>
 800658e:	6862      	ldr	r2, [r4, #4]
 8006590:	42a3      	cmp	r3, r4
 8006592:	bf0c      	ite	eq
 8006594:	6032      	streq	r2, [r6, #0]
 8006596:	605a      	strne	r2, [r3, #4]
 8006598:	e7ec      	b.n	8006574 <_malloc_r+0xa0>
 800659a:	4623      	mov	r3, r4
 800659c:	6864      	ldr	r4, [r4, #4]
 800659e:	e7b2      	b.n	8006506 <_malloc_r+0x32>
 80065a0:	4634      	mov	r4, r6
 80065a2:	6876      	ldr	r6, [r6, #4]
 80065a4:	e7b9      	b.n	800651a <_malloc_r+0x46>
 80065a6:	230c      	movs	r3, #12
 80065a8:	4638      	mov	r0, r7
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	f000 f84c 	bl	8006648 <__malloc_unlock>
 80065b0:	e7a1      	b.n	80064f6 <_malloc_r+0x22>
 80065b2:	6025      	str	r5, [r4, #0]
 80065b4:	e7de      	b.n	8006574 <_malloc_r+0xa0>
 80065b6:	bf00      	nop
 80065b8:	20000224 	.word	0x20000224

080065bc <_realloc_r>:
 80065bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c0:	4680      	mov	r8, r0
 80065c2:	4614      	mov	r4, r2
 80065c4:	460e      	mov	r6, r1
 80065c6:	b921      	cbnz	r1, 80065d2 <_realloc_r+0x16>
 80065c8:	4611      	mov	r1, r2
 80065ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065ce:	f7ff bf81 	b.w	80064d4 <_malloc_r>
 80065d2:	b92a      	cbnz	r2, 80065e0 <_realloc_r+0x24>
 80065d4:	4625      	mov	r5, r4
 80065d6:	f7ff ff11 	bl	80063fc <_free_r>
 80065da:	4628      	mov	r0, r5
 80065dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e0:	f000 f838 	bl	8006654 <_malloc_usable_size_r>
 80065e4:	4284      	cmp	r4, r0
 80065e6:	4607      	mov	r7, r0
 80065e8:	d802      	bhi.n	80065f0 <_realloc_r+0x34>
 80065ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065ee:	d812      	bhi.n	8006616 <_realloc_r+0x5a>
 80065f0:	4621      	mov	r1, r4
 80065f2:	4640      	mov	r0, r8
 80065f4:	f7ff ff6e 	bl	80064d4 <_malloc_r>
 80065f8:	4605      	mov	r5, r0
 80065fa:	2800      	cmp	r0, #0
 80065fc:	d0ed      	beq.n	80065da <_realloc_r+0x1e>
 80065fe:	42bc      	cmp	r4, r7
 8006600:	4622      	mov	r2, r4
 8006602:	4631      	mov	r1, r6
 8006604:	bf28      	it	cs
 8006606:	463a      	movcs	r2, r7
 8006608:	f7ff fed0 	bl	80063ac <memcpy>
 800660c:	4631      	mov	r1, r6
 800660e:	4640      	mov	r0, r8
 8006610:	f7ff fef4 	bl	80063fc <_free_r>
 8006614:	e7e1      	b.n	80065da <_realloc_r+0x1e>
 8006616:	4635      	mov	r5, r6
 8006618:	e7df      	b.n	80065da <_realloc_r+0x1e>
	...

0800661c <_sbrk_r>:
 800661c:	b538      	push	{r3, r4, r5, lr}
 800661e:	2300      	movs	r3, #0
 8006620:	4d05      	ldr	r5, [pc, #20]	; (8006638 <_sbrk_r+0x1c>)
 8006622:	4604      	mov	r4, r0
 8006624:	4608      	mov	r0, r1
 8006626:	602b      	str	r3, [r5, #0]
 8006628:	f7fa f98c 	bl	8000944 <_sbrk>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	d102      	bne.n	8006636 <_sbrk_r+0x1a>
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	b103      	cbz	r3, 8006636 <_sbrk_r+0x1a>
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	bd38      	pop	{r3, r4, r5, pc}
 8006638:	2000022c 	.word	0x2000022c

0800663c <__malloc_lock>:
 800663c:	4801      	ldr	r0, [pc, #4]	; (8006644 <__malloc_lock+0x8>)
 800663e:	f000 b811 	b.w	8006664 <__retarget_lock_acquire_recursive>
 8006642:	bf00      	nop
 8006644:	20000230 	.word	0x20000230

08006648 <__malloc_unlock>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__malloc_unlock+0x8>)
 800664a:	f000 b80c 	b.w	8006666 <__retarget_lock_release_recursive>
 800664e:	bf00      	nop
 8006650:	20000230 	.word	0x20000230

08006654 <_malloc_usable_size_r>:
 8006654:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006658:	1f18      	subs	r0, r3, #4
 800665a:	2b00      	cmp	r3, #0
 800665c:	bfbc      	itt	lt
 800665e:	580b      	ldrlt	r3, [r1, r0]
 8006660:	18c0      	addlt	r0, r0, r3
 8006662:	4770      	bx	lr

08006664 <__retarget_lock_acquire_recursive>:
 8006664:	4770      	bx	lr

08006666 <__retarget_lock_release_recursive>:
 8006666:	4770      	bx	lr

08006668 <_init>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	bf00      	nop
 800666c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666e:	bc08      	pop	{r3}
 8006670:	469e      	mov	lr, r3
 8006672:	4770      	bx	lr

08006674 <_fini>:
 8006674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006676:	bf00      	nop
 8006678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800667a:	bc08      	pop	{r3}
 800667c:	469e      	mov	lr, r3
 800667e:	4770      	bx	lr
