
lab1_task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020e4  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002318  08002318  00012318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080023e8  080023e8  000123e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080023ec  080023ec  000123ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000d  20000000  080023f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000010  080023fd  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000030  080023fd  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  0002000d  2**0
                  CONTENTS, READONLY
  9 .debug_info   00006b77  00000000  00000000  00020043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000122e  00000000  00000000  00026bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000690  00000000  00000000  00027de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000005e8  00000000  00000000  00028478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000303db  00000000  00000000  00028a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00007550  00000000  00000000  00058e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0012e0e1  00000000  00000000  0006038b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0018e46c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000189c  00000000  00000000  0018e4bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000010 	.word	0x20000010
 8000250:	00000000 	.word	0x00000000
 8000254:	08002300 	.word	0x08002300

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000014 	.word	0x20000014
 8000270:	08002300 	.word	0x08002300

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000278:	f000 f962 	bl	8000540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027c:	f000 f807 	bl	800028e <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000280:	f000 f861 	bl	8000346 <SystemPower_Config>
   * Task 1.3: Adding a blinking LED
   * Task 2.2: GPIO Input Polling
   * Task 2.3: When should we poll?
   */

  task_1_2();
 8000284:	f000 f8ec 	bl	8000460 <task_1_2>
 8000288:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 800028a:	4618      	mov	r0, r3
 800028c:	bd80      	pop	{r7, pc}

0800028e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800028e:	b580      	push	{r7, lr}
 8000290:	b09e      	sub	sp, #120	; 0x78
 8000292:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	2260      	movs	r2, #96	; 0x60
 800029a:	2100      	movs	r1, #0
 800029c:	4618      	mov	r0, r3
 800029e:	f002 f827 	bl	80022f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a2:	463b      	mov	r3, r7
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	605a      	str	r2, [r3, #4]
 80002aa:	609a      	str	r2, [r3, #8]
 80002ac:	60da      	str	r2, [r3, #12]
 80002ae:	611a      	str	r2, [r3, #16]
 80002b0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80002b2:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80002b6:	f000 fcb5 	bl	8000c24 <HAL_PWREx_ControlVoltageScaling>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80002c0:	f000 f84d 	bl	800035e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002c4:	2310      	movs	r3, #16
 80002c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80002cc:	2310      	movs	r3, #16
 80002ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80002d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d6:	2302      	movs	r3, #2
 80002d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80002da:	2301      	movs	r3, #1
 80002dc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80002e6:	2350      	movs	r3, #80	; 0x50
 80002e8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80002ee:	2302      	movs	r3, #2
 80002f0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80002f2:	2302      	movs	r3, #2
 80002f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fe:	f107 0318 	add.w	r3, r7, #24
 8000302:	4618      	mov	r0, r3
 8000304:	f000 fd60 	bl	8000dc8 <HAL_RCC_OscConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800030e:	f000 f826 	bl	800035e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000312:	231f      	movs	r3, #31
 8000314:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000316:	2303      	movs	r3, #3
 8000318:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031e:	2300      	movs	r3, #0
 8000320:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800032a:	463b      	mov	r3, r7
 800032c:	2104      	movs	r1, #4
 800032e:	4618      	mov	r0, r3
 8000330:	f001 fc20 	bl	8001b74 <HAL_RCC_ClockConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800033a:	f000 f810 	bl	800035e <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3778      	adds	r7, #120	; 0x78
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}

08000346 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000346:	b580      	push	{r7, lr}
 8000348:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800034a:	2002      	movs	r0, #2
 800034c:	f000 fcec 	bl	8000d28 <HAL_PWREx_ConfigSupply>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SystemPower_Config+0x14>
  {
    Error_Handler();
 8000356:	f000 f802 	bl	800035e <Error_Handler>
  }
}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}

0800035e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035e:	b480      	push	{r7}
 8000360:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000362:	b672      	cpsid	i
}
 8000364:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000366:	e7fe      	b.n	8000366 <Error_Handler+0x8>

08000368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <HAL_MspInit+0x30>)
 8000370:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000374:	4a08      	ldr	r2, [pc, #32]	; (8000398 <HAL_MspInit+0x30>)
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800037e:	4b06      	ldr	r3, [pc, #24]	; (8000398 <HAL_MspInit+0x30>)
 8000380:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000384:	f003 0304 	and.w	r3, r3, #4
 8000388:	607b      	str	r3, [r7, #4]
 800038a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	46020c00 	.word	0x46020c00

0800039c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003a0:	e7fe      	b.n	80003a0 <NMI_Handler+0x4>

080003a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003a6:	e7fe      	b.n	80003a6 <HardFault_Handler+0x4>

080003a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ac:	e7fe      	b.n	80003ac <MemManage_Handler+0x4>

080003ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003b2:	e7fe      	b.n	80003b2 <BusFault_Handler+0x4>

080003b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003b8:	e7fe      	b.n	80003b8 <UsageFault_Handler+0x4>

080003ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003be:	bf00      	nop
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr

080003d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003d6:	b480      	push	{r7}
 80003d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003da:	bf00      	nop
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003e8:	f000 f90e 	bl	8000608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80003f4:	4b18      	ldr	r3, [pc, #96]	; (8000458 <SystemInit+0x68>)
 80003f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003fa:	4a17      	ldr	r2, [pc, #92]	; (8000458 <SystemInit+0x68>)
 80003fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000404:	4b15      	ldr	r3, [pc, #84]	; (800045c <SystemInit+0x6c>)
 8000406:	2201      	movs	r2, #1
 8000408:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800040a:	4b14      	ldr	r3, [pc, #80]	; (800045c <SystemInit+0x6c>)
 800040c:	2200      	movs	r2, #0
 800040e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000410:	4b12      	ldr	r3, [pc, #72]	; (800045c <SystemInit+0x6c>)
 8000412:	2200      	movs	r2, #0
 8000414:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <SystemInit+0x6c>)
 8000418:	2200      	movs	r2, #0
 800041a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800041c:	4b0f      	ldr	r3, [pc, #60]	; (800045c <SystemInit+0x6c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a0e      	ldr	r2, [pc, #56]	; (800045c <SystemInit+0x6c>)
 8000422:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000426:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800042a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <SystemInit+0x6c>)
 800042e:	2200      	movs	r2, #0
 8000430:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <SystemInit+0x6c>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a09      	ldr	r2, [pc, #36]	; (800045c <SystemInit+0x6c>)
 8000438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800043c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800043e:	4b07      	ldr	r3, [pc, #28]	; (800045c <SystemInit+0x6c>)
 8000440:	2200      	movs	r2, #0
 8000442:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000444:	4b04      	ldr	r3, [pc, #16]	; (8000458 <SystemInit+0x68>)
 8000446:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800044a:	609a      	str	r2, [r3, #8]
  #endif
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000454:	4770      	bx	lr
 8000456:	bf00      	nop
 8000458:	e000ed00 	.word	0xe000ed00
 800045c:	46020c00 	.word	0x46020c00

08000460 <task_1_2>:
#define REGOFF_MODE (0x00000000UL)  // Address offset of the port mode register
#define REGOFF_OUTD (0x00000014UL)  // Address offset of output data register
//----------------defs1----------------

void task_1_2(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
	uint32_t count = 0;                               // Simple counter variable
 8000466:	2300      	movs	r3, #0
 8000468:	61fb      	str	r3, [r7, #28]

	// Enable GPIOH clock by setting the peripheral clock enable register
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800046a:	4b1d      	ldr	r3, [pc, #116]	; (80004e0 <task_1_2+0x80>)
 800046c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000470:	4a1b      	ldr	r2, [pc, #108]	; (80004e0 <task_1_2+0x80>)
 8000472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000476:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800047a:	4b19      	ldr	r3, [pc, #100]	; (80004e0 <task_1_2+0x80>)
 800047c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	687b      	ldr	r3, [r7, #4]
	// Chapter 13.
	// *((volatile uint32_t*)(REGBASEADDR + REGOFF_MODE)) &= ~(0x2000UL);

	/* Inizialize GPIO pin 6 */
	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000488:	23c0      	movs	r3, #192	; 0xc0
 800048a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048c:	2301      	movs	r3, #1
 800048e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000490:	2301      	movs	r3, #1
 8000492:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000494:	2301      	movs	r3, #1
 8000496:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000498:	f107 0308 	add.w	r3, r7, #8
 800049c:	4619      	mov	r1, r3
 800049e:	4811      	ldr	r0, [pc, #68]	; (80004e4 <task_1_2+0x84>)
 80004a0:	f000 f9b6 	bl	8000810 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, 1);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2140      	movs	r1, #64	; 0x40
 80004a8:	480e      	ldr	r0, [pc, #56]	; (80004e4 <task_1_2+0x84>)
 80004aa:	f000 fb89 	bl	8000bc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_7, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2180      	movs	r1, #128	; 0x80
 80004b2:	480c      	ldr	r0, [pc, #48]	; (80004e4 <task_1_2+0x84>)
 80004b4:	f000 fb84 	bl	8000bc0 <HAL_GPIO_WritePin>

	while(1)
	{
		// *((volatile uint32_t*)(REGBASEADDR + REGOFF_OUTD)) ^= (0x0040UL);  // Toggle output state of PH.6
		HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_6);
 80004b8:	2140      	movs	r1, #64	; 0x40
 80004ba:	480a      	ldr	r0, [pc, #40]	; (80004e4 <task_1_2+0x84>)
 80004bc:	f000 fb98 	bl	8000bf0 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_7);
 80004c0:	2180      	movs	r1, #128	; 0x80
 80004c2:	4808      	ldr	r0, [pc, #32]	; (80004e4 <task_1_2+0x84>)
 80004c4:	f000 fb94 	bl	8000bf0 <HAL_GPIO_TogglePin>

		// ---------------------------------------------------------------------------- //
		//                                 Placeholder 1                                //
		// ---------------------------------------------------------------------------- //
		for(count = 0; count < g_waitcycles; count++)   // Busy Loop or Delay
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
 80004cc:	e002      	b.n	80004d4 <task_1_2+0x74>
 80004ce:	69fb      	ldr	r3, [r7, #28]
 80004d0:	3301      	adds	r3, #1
 80004d2:	61fb      	str	r3, [r7, #28]
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <task_1_2+0x88>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	69fa      	ldr	r2, [r7, #28]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d3f7      	bcc.n	80004ce <task_1_2+0x6e>
		HAL_GPIO_TogglePin(GPIOH, GPIO_PIN_6);
 80004de:	e7eb      	b.n	80004b8 <task_1_2+0x58>
 80004e0:	46020c00 	.word	0x46020c00
 80004e4:	42021c00 	.word	0x42021c00
 80004e8:	20000000 	.word	0x20000000

080004ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80004ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000524 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80004f0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80004f2:	e003      	b.n	80004fc <LoopCopyDataInit>

080004f4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80004f4:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80004f6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80004f8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80004fa:	3104      	adds	r1, #4

080004fc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80004fc:	480b      	ldr	r0, [pc, #44]	; (800052c <LoopForever+0xa>)
	ldr	r3, =_edata
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000500:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000502:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000504:	d3f6      	bcc.n	80004f4 <CopyDataInit>
	ldr	r2, =_sbss
 8000506:	4a0b      	ldr	r2, [pc, #44]	; (8000534 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000508:	e002      	b.n	8000510 <LoopFillZerobss>

0800050a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800050a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800050c:	f842 3b04 	str.w	r3, [r2], #4

08000510 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <LoopForever+0x16>)
	cmp	r2, r3
 8000512:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000514:	d3f9      	bcc.n	800050a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000516:	f7ff ff6b 	bl	80003f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800051a:	f001 fec5 	bl	80022a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800051e:	f7ff fea9 	bl	8000274 <main>

08000522 <LoopForever>:

LoopForever:
    b LoopForever
 8000522:	e7fe      	b.n	8000522 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000524:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000528:	080023f0 	.word	0x080023f0
	ldr	r0, =_sdata
 800052c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000530:	2000000d 	.word	0x2000000d
	ldr	r2, =_sbss
 8000534:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000538:	20000030 	.word	0x20000030

0800053c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC1_IRQHandler>
	...

08000540 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <HAL_Init+0x4c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a10      	ldr	r2, [pc, #64]	; (800058c <HAL_Init+0x4c>)
 800054a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f92b 	bl	80007ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000556:	f001 fcff 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 800055a:	4602      	mov	r2, r0
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <HAL_Init+0x50>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	f003 030f 	and.w	r3, r3, #15
 8000564:	490b      	ldr	r1, [pc, #44]	; (8000594 <HAL_Init+0x54>)
 8000566:	5ccb      	ldrb	r3, [r1, r3]
 8000568:	fa22 f303 	lsr.w	r3, r2, r3
 800056c:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <HAL_Init+0x58>)
 800056e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000570:	200f      	movs	r0, #15
 8000572:	f000 f813 	bl	800059c <HAL_InitTick>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d001      	beq.n	8000580 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800057c:	2301      	movs	r3, #1
 800057e:	e002      	b.n	8000586 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000580:	f7ff fef2 	bl	8000368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40022000 	.word	0x40022000
 8000590:	46020c00 	.word	0x46020c00
 8000594:	08002318 	.word	0x08002318
 8000598:	20000004 	.word	0x20000004

0800059c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80005a4:	4b15      	ldr	r3, [pc, #84]	; (80005fc <HAL_InitTick+0x60>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d101      	bne.n	80005b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80005ac:	2301      	movs	r3, #1
 80005ae:	e021      	b.n	80005f4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80005b0:	4b13      	ldr	r3, [pc, #76]	; (8000600 <HAL_InitTick+0x64>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <HAL_InitTick+0x60>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	4619      	mov	r1, r3
 80005ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005be:	fbb3 f3f1 	udiv	r3, r3, r1
 80005c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 f915 	bl	80007f6 <HAL_SYSTICK_Config>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	e00e      	b.n	80005f4 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b0f      	cmp	r3, #15
 80005da:	d80a      	bhi.n	80005f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005dc:	2200      	movs	r2, #0
 80005de:	6879      	ldr	r1, [r7, #4]
 80005e0:	f04f 30ff 	mov.w	r0, #4294967295
 80005e4:	f000 f8ed 	bl	80007c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e8:	4a06      	ldr	r2, [pc, #24]	; (8000604 <HAL_InitTick+0x68>)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ee:	2300      	movs	r3, #0
 80005f0:	e000      	b.n	80005f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80005f2:	2301      	movs	r3, #1
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	2000000c 	.word	0x2000000c
 8000600:	20000004 	.word	0x20000004
 8000604:	20000008 	.word	0x20000008

08000608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_IncTick+0x20>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	461a      	mov	r2, r3
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <HAL_IncTick+0x24>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4413      	add	r3, r2
 8000618:	4a04      	ldr	r2, [pc, #16]	; (800062c <HAL_IncTick+0x24>)
 800061a:	6013      	str	r3, [r2, #0]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	2000000c 	.word	0x2000000c
 800062c:	2000002c 	.word	0x2000002c

08000630 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  return uwTick;
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <HAL_GetTick+0x14>)
 8000636:	681b      	ldr	r3, [r3, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	2000002c 	.word	0x2000002c

08000648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000648:	b480      	push	{r7}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f003 0307 	and.w	r3, r3, #7
 8000656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800065a:	68db      	ldr	r3, [r3, #12]
 800065c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000664:	4013      	ands	r3, r2
 8000666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800067a:	4a04      	ldr	r2, [pc, #16]	; (800068c <__NVIC_SetPriorityGrouping+0x44>)
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	60d3      	str	r3, [r2, #12]
}
 8000680:	bf00      	nop
 8000682:	3714      	adds	r7, #20
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000696:	68db      	ldr	r3, [r3, #12]
 8000698:	0a1b      	lsrs	r3, r3, #8
 800069a:	f003 0307 	and.w	r3, r3, #7
}
 800069e:	4618      	mov	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b083      	sub	sp, #12
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	6039      	str	r1, [r7, #0]
 80006b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	db0a      	blt.n	80006d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	490c      	ldr	r1, [pc, #48]	; (80006f8 <__NVIC_SetPriority+0x4c>)
 80006c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ca:	0112      	lsls	r2, r2, #4
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	440b      	add	r3, r1
 80006d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d4:	e00a      	b.n	80006ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4908      	ldr	r1, [pc, #32]	; (80006fc <__NVIC_SetPriority+0x50>)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	f003 030f 	and.w	r3, r3, #15
 80006e2:	3b04      	subs	r3, #4
 80006e4:	0112      	lsls	r2, r2, #4
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	440b      	add	r3, r1
 80006ea:	761a      	strb	r2, [r3, #24]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	e000e100 	.word	0xe000e100
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000700:	b480      	push	{r7}
 8000702:	b089      	sub	sp, #36	; 0x24
 8000704:	af00      	add	r7, sp, #0
 8000706:	60f8      	str	r0, [r7, #12]
 8000708:	60b9      	str	r1, [r7, #8]
 800070a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f003 0307 	and.w	r3, r3, #7
 8000712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	f1c3 0307 	rsb	r3, r3, #7
 800071a:	2b04      	cmp	r3, #4
 800071c:	bf28      	it	cs
 800071e:	2304      	movcs	r3, #4
 8000720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	3304      	adds	r3, #4
 8000726:	2b06      	cmp	r3, #6
 8000728:	d902      	bls.n	8000730 <NVIC_EncodePriority+0x30>
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	3b03      	subs	r3, #3
 800072e:	e000      	b.n	8000732 <NVIC_EncodePriority+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000734:	f04f 32ff 	mov.w	r2, #4294967295
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	43da      	mvns	r2, r3
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	401a      	ands	r2, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000748:	f04f 31ff 	mov.w	r1, #4294967295
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	fa01 f303 	lsl.w	r3, r1, r3
 8000752:	43d9      	mvns	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	4313      	orrs	r3, r2
         );
}
 800075a:	4618      	mov	r0, r3
 800075c:	3724      	adds	r7, #36	; 0x24
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
	...

08000768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000778:	d301      	bcc.n	800077e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800077a:	2301      	movs	r3, #1
 800077c:	e00f      	b.n	800079e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <SysTick_Config+0x40>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000786:	210f      	movs	r1, #15
 8000788:	f04f 30ff 	mov.w	r0, #4294967295
 800078c:	f7ff ff8e 	bl	80006ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <SysTick_Config+0x40>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000796:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <SysTick_Config+0x40>)
 8000798:	2207      	movs	r2, #7
 800079a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	e000e010 	.word	0xe000e010

080007ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff47 	bl	8000648 <__NVIC_SetPriorityGrouping>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	4603      	mov	r3, r0
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
 80007ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007d0:	f7ff ff5e 	bl	8000690 <__NVIC_GetPriorityGrouping>
 80007d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff ff90 	bl	8000700 <NVIC_EncodePriority>
 80007e0:	4602      	mov	r2, r0
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff5f 	bl	80006ac <__NVIC_SetPriority>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ffb2 	bl	8000768 <SysTick_Config>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000822:	e1ba      	b.n	8000b9a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	2101      	movs	r1, #1
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	fa01 f303 	lsl.w	r3, r1, r3
 8000830:	4013      	ands	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000834:	697b      	ldr	r3, [r7, #20]
 8000836:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	2b00      	cmp	r3, #0
 800083c:	f000 81aa 	beq.w	8000b94 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a55      	ldr	r2, [pc, #340]	; (8000998 <HAL_GPIO_Init+0x188>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d15d      	bne.n	8000904 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800084e:	2201      	movs	r2, #1
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	fa02 f303 	lsl.w	r3, r2, r3
 8000856:	43db      	mvns	r3, r3
 8000858:	69fa      	ldr	r2, [r7, #28]
 800085a:	4013      	ands	r3, r2
 800085c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f003 0201 	and.w	r2, r3, #1
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	69fa      	ldr	r2, [r7, #28]
 800086e:	4313      	orrs	r3, r2
 8000870:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	69fa      	ldr	r2, [r7, #28]
 8000876:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000878:	4a48      	ldr	r2, [pc, #288]	; (800099c <HAL_GPIO_Init+0x18c>)
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000880:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000882:	4a46      	ldr	r2, [pc, #280]	; (800099c <HAL_GPIO_Init+0x18c>)
 8000884:	697b      	ldr	r3, [r7, #20]
 8000886:	00db      	lsls	r3, r3, #3
 8000888:	4413      	add	r3, r2
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	08da      	lsrs	r2, r3, #3
 8000892:	693b      	ldr	r3, [r7, #16]
 8000894:	3208      	adds	r2, #8
 8000896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800089a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	f003 0307 	and.w	r3, r3, #7
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	220f      	movs	r2, #15
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	69fa      	ldr	r2, [r7, #28]
 80008ae:	4013      	ands	r3, r2
 80008b0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	f003 0307 	and.w	r3, r3, #7
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	220b      	movs	r2, #11
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	69fa      	ldr	r2, [r7, #28]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80008c6:	69bb      	ldr	r3, [r7, #24]
 80008c8:	08da      	lsrs	r2, r3, #3
 80008ca:	693b      	ldr	r3, [r7, #16]
 80008cc:	3208      	adds	r2, #8
 80008ce:	69f9      	ldr	r1, [r7, #28]
 80008d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80008d4:	693b      	ldr	r3, [r7, #16]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80008da:	69bb      	ldr	r3, [r7, #24]
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	2203      	movs	r2, #3
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	43db      	mvns	r3, r3
 80008e6:	69fa      	ldr	r2, [r7, #28]
 80008e8:	4013      	ands	r3, r2
 80008ea:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2202      	movs	r2, #2
 80008f2:	fa02 f303 	lsl.w	r3, r2, r3
 80008f6:	69fa      	ldr	r2, [r7, #28]
 80008f8:	4313      	orrs	r3, r2
 80008fa:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	69fa      	ldr	r2, [r7, #28]
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	e067      	b.n	80009d4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	2b02      	cmp	r3, #2
 800090a:	d003      	beq.n	8000914 <HAL_GPIO_Init+0x104>
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	2b12      	cmp	r3, #18
 8000912:	d145      	bne.n	80009a0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	08da      	lsrs	r2, r3, #3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3208      	adds	r2, #8
 800091c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000920:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	f003 0307 	and.w	r3, r3, #7
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	220f      	movs	r2, #15
 800092c:	fa02 f303 	lsl.w	r3, r2, r3
 8000930:	43db      	mvns	r3, r3
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	4013      	ands	r3, r2
 8000936:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	f003 020f 	and.w	r2, r3, #15
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	69fa      	ldr	r2, [r7, #28]
 800094e:	4313      	orrs	r3, r2
 8000950:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	08da      	lsrs	r2, r3, #3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3208      	adds	r2, #8
 800095a:	69f9      	ldr	r1, [r7, #28]
 800095c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000966:	69bb      	ldr	r3, [r7, #24]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	2203      	movs	r2, #3
 800096c:	fa02 f303 	lsl.w	r3, r2, r3
 8000970:	43db      	mvns	r3, r3
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	4013      	ands	r3, r2
 8000976:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f003 0203 	and.w	r2, r3, #3
 8000980:	69bb      	ldr	r3, [r7, #24]
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	69fa      	ldr	r2, [r7, #28]
 800098a:	4313      	orrs	r3, r2
 800098c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	69fa      	ldr	r2, [r7, #28]
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	e01e      	b.n	80009d4 <HAL_GPIO_Init+0x1c4>
 8000996:	bf00      	nop
 8000998:	46020000 	.word	0x46020000
 800099c:	08002368 	.word	0x08002368
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80009a6:	69bb      	ldr	r3, [r7, #24]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	2203      	movs	r2, #3
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	69fa      	ldr	r2, [r7, #28]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	f003 0203 	and.w	r2, r3, #3
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	69fa      	ldr	r2, [r7, #28]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	69fa      	ldr	r2, [r7, #28]
 80009d2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d00b      	beq.n	80009f4 <HAL_GPIO_Init+0x1e4>
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b02      	cmp	r3, #2
 80009e2:	d007      	beq.n	80009f4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009e8:	2b11      	cmp	r3, #17
 80009ea:	d003      	beq.n	80009f4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b12      	cmp	r3, #18
 80009f2:	d130      	bne.n	8000a56 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80009fa:	69bb      	ldr	r3, [r7, #24]
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	2203      	movs	r2, #3
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	43db      	mvns	r3, r3
 8000a06:	69fa      	ldr	r2, [r7, #28]
 8000a08:	4013      	ands	r3, r2
 8000a0a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	68da      	ldr	r2, [r3, #12]
 8000a10:	69bb      	ldr	r3, [r7, #24]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	69fa      	ldr	r2, [r7, #28]
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000a1e:	693b      	ldr	r3, [r7, #16]
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	69fa      	ldr	r2, [r7, #28]
 8000a36:	4013      	ands	r3, r2
 8000a38:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	091b      	lsrs	r3, r3, #4
 8000a40:	f003 0201 	and.w	r2, r3, #1
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	69fa      	ldr	r2, [r7, #28]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	69fa      	ldr	r2, [r7, #28]
 8000a54:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d017      	beq.n	8000a8e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	2203      	movs	r2, #3
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	69fa      	ldr	r2, [r7, #28]
 8000a72:	4013      	ands	r3, r2
 8000a74:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	69fa      	ldr	r2, [r7, #28]
 8000a8c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d07c      	beq.n	8000b94 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000a9a:	4a47      	ldr	r2, [pc, #284]	; (8000bb8 <HAL_GPIO_Init+0x3a8>)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	089b      	lsrs	r3, r3, #2
 8000aa0:	3318      	adds	r3, #24
 8000aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	f003 0303 	and.w	r3, r3, #3
 8000aae:	00db      	lsls	r3, r3, #3
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	69fa      	ldr	r2, [r7, #28]
 8000aba:	4013      	ands	r3, r2
 8000abc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	0a9a      	lsrs	r2, r3, #10
 8000ac2:	4b3e      	ldr	r3, [pc, #248]	; (8000bbc <HAL_GPIO_Init+0x3ac>)
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	f002 0203 	and.w	r2, r2, #3
 8000acc:	00d2      	lsls	r2, r2, #3
 8000ace:	4093      	lsls	r3, r2
 8000ad0:	69fa      	ldr	r2, [r7, #28]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000ad6:	4938      	ldr	r1, [pc, #224]	; (8000bb8 <HAL_GPIO_Init+0x3a8>)
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	089b      	lsrs	r3, r3, #2
 8000adc:	3318      	adds	r3, #24
 8000ade:	69fa      	ldr	r2, [r7, #28]
 8000ae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000ae4:	4b34      	ldr	r3, [pc, #208]	; (8000bb8 <HAL_GPIO_Init+0x3a8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	69fa      	ldr	r2, [r7, #28]
 8000af0:	4013      	ands	r3, r2
 8000af2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8000b00:	69fa      	ldr	r2, [r7, #28]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000b08:	4a2b      	ldr	r2, [pc, #172]	; (8000bb8 <HAL_GPIO_Init+0x3a8>)
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000b0e:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <HAL_GPIO_Init+0x3a8>)
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69fa      	ldr	r2, [r7, #28]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8000b2a:	69fa      	ldr	r2, [r7, #28]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8000b32:	4a21      	ldr	r2, [pc, #132]	; (8000bb8 <HAL_GPIO_Init+0x3a8>)
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <HAL_GPIO_Init+0x3a8>)
 8000b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000b3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	43db      	mvns	r3, r3
 8000b44:	69fa      	ldr	r2, [r7, #28]
 8000b46:	4013      	ands	r3, r2
 8000b48:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8000b56:	69fa      	ldr	r2, [r7, #28]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8000b5e:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <HAL_GPIO_Init+0x3a8>)
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_GPIO_Init+0x3a8>)
 8000b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b6c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	4013      	ands	r3, r2
 8000b76:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8000b84:	69fa      	ldr	r2, [r7, #28]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8000b8c:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <HAL_GPIO_Init+0x3a8>)
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	3301      	adds	r3, #1
 8000b98:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	f47f ae3d 	bne.w	8000824 <HAL_GPIO_Init+0x14>
  }
}
 8000baa:	bf00      	nop
 8000bac:	bf00      	nop
 8000bae:	3724      	adds	r7, #36	; 0x24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	46022000 	.word	0x46022000
 8000bbc:	002f7f7f 	.word	0x002f7f7f

08000bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	807b      	strh	r3, [r7, #2]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bd0:	787b      	ldrb	r3, [r7, #1]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bd6:	887a      	ldrh	r2, [r7, #2]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8000bdc:	e002      	b.n	8000be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8000bde:	887a      	ldrh	r2, [r7, #2]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	4013      	ands	r3, r2
 8000c08:	041a      	lsls	r2, r3, #16
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	43d9      	mvns	r1, r3
 8000c0e:	887b      	ldrh	r3, [r7, #2]
 8000c10:	400b      	ands	r3, r1
 8000c12:	431a      	orrs	r2, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	619a      	str	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b085      	sub	sp, #20
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000c2c:	4b34      	ldr	r3, [pc, #208]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c34:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	d101      	bne.n	8000c42 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e057      	b.n	8000cf2 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c48:	d90a      	bls.n	8000c60 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000c4c:	68db      	ldr	r3, [r3, #12]
 8000c4e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	4a2a      	ldr	r2, [pc, #168]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c5c:	60d3      	str	r3, [r2, #12]
 8000c5e:	e007      	b.n	8000c70 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8000c60:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8000c68:	4925      	ldr	r1, [pc, #148]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a24      	ldr	r2, [pc, #144]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	099b      	lsrs	r3, r3, #6
 8000c7c:	2232      	movs	r2, #50	; 0x32
 8000c7e:	fb02 f303 	mul.w	r3, r2, r3
 8000c82:	4a21      	ldr	r2, [pc, #132]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8000c84:	fba2 2303 	umull	r2, r3, r2, r3
 8000c88:	099b      	lsrs	r3, r3, #6
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000c8e:	e002      	b.n	8000c96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <HAL_PWREx_ControlVoltageScaling+0x84>
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d1f3      	bne.n	8000c90 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d01b      	beq.n	8000ce6 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a15      	ldr	r2, [pc, #84]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8000cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cb8:	099b      	lsrs	r3, r3, #6
 8000cba:	2232      	movs	r2, #50	; 0x32
 8000cbc:	fb02 f303 	mul.w	r3, r2, r3
 8000cc0:	4a11      	ldr	r2, [pc, #68]	; (8000d08 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8000cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc6:	099b      	lsrs	r3, r3, #6
 8000cc8:	3301      	adds	r3, #1
 8000cca:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000ccc:	e002      	b.n	8000cd4 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8000cd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d1f3      	bne.n	8000cce <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3714      	adds	r7, #20
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	46020800 	.word	0x46020800
 8000d04:	20000004 	.word	0x20000004
 8000d08:	10624dd3 	.word	0x10624dd3

08000d0c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8000d10:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	46020800 	.word	0x46020800

08000d28 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <HAL_PWREx_ConfigSupply+0x94>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a22      	ldr	r2, [pc, #136]	; (8000dc0 <HAL_PWREx_ConfigSupply+0x98>)
 8000d36:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3a:	099b      	lsrs	r3, r3, #6
 8000d3c:	2232      	movs	r2, #50	; 0x32
 8000d3e:	fb02 f303 	mul.w	r3, r2, r3
 8000d42:	4a1f      	ldr	r2, [pc, #124]	; (8000dc0 <HAL_PWREx_ConfigSupply+0x98>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	099b      	lsrs	r3, r3, #6
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d113      	bne.n	8000d7c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <HAL_PWREx_ConfigSupply+0x9c>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	4a1a      	ldr	r2, [pc, #104]	; (8000dc4 <HAL_PWREx_ConfigSupply+0x9c>)
 8000d5a:	f023 0302 	bic.w	r3, r3, #2
 8000d5e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000d60:	e002      	b.n	8000d68 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_PWREx_ConfigSupply+0x9c>)
 8000d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d116      	bne.n	8000da2 <HAL_PWREx_ConfigSupply+0x7a>
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d1f3      	bne.n	8000d62 <HAL_PWREx_ConfigSupply+0x3a>
 8000d7a:	e012      	b.n	8000da2 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_PWREx_ConfigSupply+0x9c>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_PWREx_ConfigSupply+0x9c>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000d88:	e002      	b.n	8000d90 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_PWREx_ConfigSupply+0x9c>)
 8000d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d102      	bne.n	8000da2 <HAL_PWREx_ConfigSupply+0x7a>
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1f3      	bne.n	8000d8a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d101      	bne.n	8000dac <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8000da8:	2303      	movs	r3, #3
 8000daa:	e000      	b.n	8000dae <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3714      	adds	r7, #20
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000004 	.word	0x20000004
 8000dc0:	10624dd3 	.word	0x10624dd3
 8000dc4:	46020800 	.word	0x46020800

08000dc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08e      	sub	sp, #56	; 0x38
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f000 bec3 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000de2:	4b9c      	ldr	r3, [pc, #624]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000de4:	69db      	ldr	r3, [r3, #28]
 8000de6:	f003 030c 	and.w	r3, r3, #12
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000dec:	4b99      	ldr	r3, [pc, #612]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0310 	and.w	r3, r3, #16
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 8172 	beq.w	80010e8 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d007      	beq.n	8000e1a <HAL_RCC_OscConfig+0x52>
 8000e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e0c:	2b0c      	cmp	r3, #12
 8000e0e:	f040 80e4 	bne.w	8000fda <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	f040 80e0 	bne.w	8000fda <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e1a:	4b8e      	ldr	r3, [pc, #568]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0304 	and.w	r3, r3, #4
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d006      	beq.n	8000e34 <HAL_RCC_OscConfig+0x6c>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d102      	bne.n	8000e34 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f000 be9a 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e38:	4b86      	ldr	r3, [pc, #536]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <HAL_RCC_OscConfig+0x86>
 8000e44:	4b83      	ldr	r3, [pc, #524]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000e4c:	e005      	b.n	8000e5a <HAL_RCC_OscConfig+0x92>
 8000e4e:	4b81      	ldr	r3, [pc, #516]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000e50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e54:	041b      	lsls	r3, r3, #16
 8000e56:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d255      	bcs.n	8000f0a <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10a      	bne.n	8000e7a <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f001 f997 	bl	800219c <RCC_SetFlashLatencyFromMSIRange>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8000e74:	2301      	movs	r3, #1
 8000e76:	f000 be77 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000e7a:	4b76      	ldr	r3, [pc, #472]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	4a75      	ldr	r2, [pc, #468]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000e80:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e84:	6093      	str	r3, [r2, #8]
 8000e86:	4b73      	ldr	r3, [pc, #460]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	4970      	ldr	r1, [pc, #448]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000e94:	4313      	orrs	r3, r2
 8000e96:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000ea0:	d309      	bcc.n	8000eb6 <HAL_RCC_OscConfig+0xee>
 8000ea2:	4b6c      	ldr	r3, [pc, #432]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	f023 021f 	bic.w	r2, r3, #31
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	4969      	ldr	r1, [pc, #420]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	60cb      	str	r3, [r1, #12]
 8000eb4:	e07e      	b.n	8000fb4 <HAL_RCC_OscConfig+0x1ec>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	da0a      	bge.n	8000ed4 <HAL_RCC_OscConfig+0x10c>
 8000ebe:	4b65      	ldr	r3, [pc, #404]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6a1b      	ldr	r3, [r3, #32]
 8000eca:	015b      	lsls	r3, r3, #5
 8000ecc:	4961      	ldr	r1, [pc, #388]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	60cb      	str	r3, [r1, #12]
 8000ed2:	e06f      	b.n	8000fb4 <HAL_RCC_OscConfig+0x1ec>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000edc:	d30a      	bcc.n	8000ef4 <HAL_RCC_OscConfig+0x12c>
 8000ede:	4b5d      	ldr	r3, [pc, #372]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a1b      	ldr	r3, [r3, #32]
 8000eea:	029b      	lsls	r3, r3, #10
 8000eec:	4959      	ldr	r1, [pc, #356]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60cb      	str	r3, [r1, #12]
 8000ef2:	e05f      	b.n	8000fb4 <HAL_RCC_OscConfig+0x1ec>
 8000ef4:	4b57      	ldr	r3, [pc, #348]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	03db      	lsls	r3, r3, #15
 8000f02:	4954      	ldr	r1, [pc, #336]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f04:	4313      	orrs	r3, r2
 8000f06:	60cb      	str	r3, [r1, #12]
 8000f08:	e054      	b.n	8000fb4 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8000f0a:	4b52      	ldr	r3, [pc, #328]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	4a51      	ldr	r2, [pc, #324]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f14:	6093      	str	r3, [r2, #8]
 8000f16:	4b4f      	ldr	r3, [pc, #316]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	494c      	ldr	r1, [pc, #304]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f24:	4313      	orrs	r3, r2
 8000f26:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8000f30:	d309      	bcc.n	8000f46 <HAL_RCC_OscConfig+0x17e>
 8000f32:	4b48      	ldr	r3, [pc, #288]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	f023 021f 	bic.w	r2, r3, #31
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	4945      	ldr	r1, [pc, #276]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	60cb      	str	r3, [r1, #12]
 8000f44:	e028      	b.n	8000f98 <HAL_RCC_OscConfig+0x1d0>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	da0a      	bge.n	8000f64 <HAL_RCC_OscConfig+0x19c>
 8000f4e:	4b41      	ldr	r3, [pc, #260]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f50:	68db      	ldr	r3, [r3, #12]
 8000f52:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	015b      	lsls	r3, r3, #5
 8000f5c:	493d      	ldr	r1, [pc, #244]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60cb      	str	r3, [r1, #12]
 8000f62:	e019      	b.n	8000f98 <HAL_RCC_OscConfig+0x1d0>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f6c:	d30a      	bcc.n	8000f84 <HAL_RCC_OscConfig+0x1bc>
 8000f6e:	4b39      	ldr	r3, [pc, #228]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f70:	68db      	ldr	r3, [r3, #12]
 8000f72:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	029b      	lsls	r3, r3, #10
 8000f7c:	4935      	ldr	r1, [pc, #212]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	60cb      	str	r3, [r1, #12]
 8000f82:	e009      	b.n	8000f98 <HAL_RCC_OscConfig+0x1d0>
 8000f84:	4b33      	ldr	r3, [pc, #204]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	03db      	lsls	r3, r3, #15
 8000f92:	4930      	ldr	r1, [pc, #192]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000f94:	4313      	orrs	r3, r2
 8000f96:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8000f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10a      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 f8fa 	bl	800219c <RCC_SetFlashLatencyFromMSIRange>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d002      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f000 bdda 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8000fb4:	f001 f8d8 	bl	8002168 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <HAL_RCC_OscConfig+0x290>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff faed 	bl	800059c <HAL_InitTick>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8000fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f000 808a 	beq.w	80010e6 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8000fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000fd6:	f000 bdc7 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d066      	beq.n	80010b0 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8000fee:	f7ff fb1f 	bl	8000630 <HAL_GetTick>
 8000ff2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8000ff4:	e009      	b.n	800100a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ff6:	f7ff fb1b 	bl	8000630 <HAL_GetTick>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffe:	1ad3      	subs	r3, r2, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d902      	bls.n	800100a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001004:	2303      	movs	r3, #3
 8001006:	f000 bdaf 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	2b00      	cmp	r3, #0
 8001014:	d0ef      	beq.n	8000ff6 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 800101c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001020:	6093      	str	r3, [r2, #8]
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	4909      	ldr	r1, [pc, #36]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8001030:	4313      	orrs	r3, r2
 8001032:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001038:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800103c:	d30e      	bcc.n	800105c <HAL_RCC_OscConfig+0x294>
 800103e:	4b05      	ldr	r3, [pc, #20]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	f023 021f 	bic.w	r2, r3, #31
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	4902      	ldr	r1, [pc, #8]	; (8001054 <HAL_RCC_OscConfig+0x28c>)
 800104c:	4313      	orrs	r3, r2
 800104e:	60cb      	str	r3, [r1, #12]
 8001050:	e04a      	b.n	80010e8 <HAL_RCC_OscConfig+0x320>
 8001052:	bf00      	nop
 8001054:	46020c00 	.word	0x46020c00
 8001058:	20000008 	.word	0x20000008
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	2b00      	cmp	r3, #0
 8001062:	da0a      	bge.n	800107a <HAL_RCC_OscConfig+0x2b2>
 8001064:	4b9b      	ldr	r3, [pc, #620]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	015b      	lsls	r3, r3, #5
 8001072:	4998      	ldr	r1, [pc, #608]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001074:	4313      	orrs	r3, r2
 8001076:	60cb      	str	r3, [r1, #12]
 8001078:	e036      	b.n	80010e8 <HAL_RCC_OscConfig+0x320>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001082:	d30a      	bcc.n	800109a <HAL_RCC_OscConfig+0x2d2>
 8001084:	4b93      	ldr	r3, [pc, #588]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	029b      	lsls	r3, r3, #10
 8001092:	4990      	ldr	r1, [pc, #576]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001094:	4313      	orrs	r3, r2
 8001096:	60cb      	str	r3, [r1, #12]
 8001098:	e026      	b.n	80010e8 <HAL_RCC_OscConfig+0x320>
 800109a:	4b8e      	ldr	r3, [pc, #568]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	03db      	lsls	r3, r3, #15
 80010a8:	498a      	ldr	r1, [pc, #552]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	60cb      	str	r3, [r1, #12]
 80010ae:	e01b      	b.n	80010e8 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80010b0:	4b88      	ldr	r3, [pc, #544]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a87      	ldr	r2, [pc, #540]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80010b6:	f023 0301 	bic.w	r3, r3, #1
 80010ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80010bc:	f7ff fab8 	bl	8000630 <HAL_GetTick>
 80010c0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80010c2:	e009      	b.n	80010d8 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010c4:	f7ff fab4 	bl	8000630 <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d902      	bls.n	80010d8 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	f000 bd48 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80010d8:	4b7e      	ldr	r3, [pc, #504]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d1ef      	bne.n	80010c4 <HAL_RCC_OscConfig+0x2fc>
 80010e4:	e000      	b.n	80010e8 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010e6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	f000 8094 	beq.w	800121e <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80010f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_OscConfig+0x340>
 80010fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fe:	2b0c      	cmp	r3, #12
 8001100:	d110      	bne.n	8001124 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001104:	2b03      	cmp	r3, #3
 8001106:	d10d      	bne.n	8001124 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001108:	4b72      	ldr	r3, [pc, #456]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 8083 	beq.w	800121c <HAL_RCC_OscConfig+0x454>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d17e      	bne.n	800121c <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	f000 bd22 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800112c:	d106      	bne.n	800113c <HAL_RCC_OscConfig+0x374>
 800112e:	4b69      	ldr	r3, [pc, #420]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a68      	ldr	r2, [pc, #416]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]
 800113a:	e041      	b.n	80011c0 <HAL_RCC_OscConfig+0x3f8>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001144:	d112      	bne.n	800116c <HAL_RCC_OscConfig+0x3a4>
 8001146:	4b63      	ldr	r3, [pc, #396]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a62      	ldr	r2, [pc, #392]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 800114c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	4b60      	ldr	r3, [pc, #384]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a5f      	ldr	r2, [pc, #380]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001158:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a5c      	ldr	r2, [pc, #368]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	e029      	b.n	80011c0 <HAL_RCC_OscConfig+0x3f8>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8001174:	d112      	bne.n	800119c <HAL_RCC_OscConfig+0x3d4>
 8001176:	4b57      	ldr	r3, [pc, #348]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a56      	ldr	r2, [pc, #344]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 800117c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b54      	ldr	r3, [pc, #336]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a53      	ldr	r2, [pc, #332]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a50      	ldr	r2, [pc, #320]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e011      	b.n	80011c0 <HAL_RCC_OscConfig+0x3f8>
 800119c:	4b4d      	ldr	r3, [pc, #308]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a4c      	ldr	r2, [pc, #304]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b4a      	ldr	r3, [pc, #296]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a49      	ldr	r2, [pc, #292]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a46      	ldr	r2, [pc, #280]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80011ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80011be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d014      	beq.n	80011f2 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 80011c8:	f7ff fa32 	bl	8000630 <HAL_GetTick>
 80011cc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ce:	e009      	b.n	80011e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011d0:	f7ff fa2e 	bl	8000630 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b64      	cmp	r3, #100	; 0x64
 80011dc:	d902      	bls.n	80011e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	f000 bcc2 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011e4:	4b3b      	ldr	r3, [pc, #236]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d0ef      	beq.n	80011d0 <HAL_RCC_OscConfig+0x408>
 80011f0:	e015      	b.n	800121e <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80011f2:	f7ff fa1d 	bl	8000630 <HAL_GetTick>
 80011f6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011f8:	e009      	b.n	800120e <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011fa:	f7ff fa19 	bl	8000630 <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b64      	cmp	r3, #100	; 0x64
 8001206:	d902      	bls.n	800120e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	f000 bcad 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800120e:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1ef      	bne.n	80011fa <HAL_RCC_OscConfig+0x432>
 800121a:	e000      	b.n	800121e <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d066      	beq.n	80012f8 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800122c:	2b04      	cmp	r3, #4
 800122e:	d005      	beq.n	800123c <HAL_RCC_OscConfig+0x474>
 8001230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001232:	2b0c      	cmp	r3, #12
 8001234:	d11a      	bne.n	800126c <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	2b02      	cmp	r3, #2
 800123a:	d117      	bne.n	800126c <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800123c:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001244:	2b00      	cmp	r3, #0
 8001246:	d006      	beq.n	8001256 <HAL_RCC_OscConfig+0x48e>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	f000 bc89 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001256:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001258:	691b      	ldr	r3, [r3, #16]
 800125a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	041b      	lsls	r3, r3, #16
 8001264:	491b      	ldr	r1, [pc, #108]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001266:	4313      	orrs	r3, r2
 8001268:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800126a:	e045      	b.n	80012f8 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d024      	beq.n	80012be <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001274:	4b17      	ldr	r3, [pc, #92]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a16      	ldr	r2, [pc, #88]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 800127a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800127e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001280:	f7ff f9d6 	bl	8000630 <HAL_GetTick>
 8001284:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001286:	e009      	b.n	800129c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001288:	f7ff f9d2 	bl	8000630 <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d902      	bls.n	800129c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	f000 bc66 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800129c:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0ef      	beq.n	8001288 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	041b      	lsls	r3, r3, #16
 80012b6:	4907      	ldr	r1, [pc, #28]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	610b      	str	r3, [r1, #16]
 80012bc:	e01c      	b.n	80012f8 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a04      	ldr	r2, [pc, #16]	; (80012d4 <HAL_RCC_OscConfig+0x50c>)
 80012c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012c8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80012ca:	f7ff f9b1 	bl	8000630 <HAL_GetTick>
 80012ce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012d0:	e00c      	b.n	80012ec <HAL_RCC_OscConfig+0x524>
 80012d2:	bf00      	nop
 80012d4:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff f9aa 	bl	8000630 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d902      	bls.n	80012ec <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	f000 bc3e 	b.w	8001b68 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80012ec:	4baf      	ldr	r3, [pc, #700]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d1ef      	bne.n	80012d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 80c7 	beq.w	8001494 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800130c:	4ba7      	ldr	r3, [pc, #668]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 800130e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	2b00      	cmp	r3, #0
 8001318:	d111      	bne.n	800133e <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4ba4      	ldr	r3, [pc, #656]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 800131c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001320:	4aa2      	ldr	r2, [pc, #648]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800132a:	4ba0      	ldr	r3, [pc, #640]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 800132c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001338:	2301      	movs	r3, #1
 800133a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800133e:	4b9c      	ldr	r3, [pc, #624]	; (80015b0 <HAL_RCC_OscConfig+0x7e8>)
 8001340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	2b00      	cmp	r3, #0
 8001348:	d118      	bne.n	800137c <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800134a:	4b99      	ldr	r3, [pc, #612]	; (80015b0 <HAL_RCC_OscConfig+0x7e8>)
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	4a98      	ldr	r2, [pc, #608]	; (80015b0 <HAL_RCC_OscConfig+0x7e8>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001356:	f7ff f96b 	bl	8000630 <HAL_GetTick>
 800135a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800135c:	e008      	b.n	8001370 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800135e:	f7ff f967 	bl	8000630 <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d901      	bls.n	8001370 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e3fb      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001370:	4b8f      	ldr	r3, [pc, #572]	; (80015b0 <HAL_RCC_OscConfig+0x7e8>)
 8001372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d0f0      	beq.n	800135e <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	695b      	ldr	r3, [r3, #20]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d05f      	beq.n	8001444 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001384:	4b89      	ldr	r3, [pc, #548]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800138a:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699a      	ldr	r2, [r3, #24]
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001396:	429a      	cmp	r2, r3
 8001398:	d037      	beq.n	800140a <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d006      	beq.n	80013b2 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e3da      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01b      	beq.n	80013f4 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 80013bc:	4b7b      	ldr	r3, [pc, #492]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 80013be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013c2:	4a7a      	ldr	r2, [pc, #488]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 80013c4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80013c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80013cc:	f7ff f930 	bl	8000630 <HAL_GetTick>
 80013d0:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d4:	f7ff f92c 	bl	8000630 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e3c0      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80013e6:	4b71      	ldr	r3, [pc, #452]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 80013e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1ef      	bne.n	80013d4 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80013f4:	4b6d      	ldr	r3, [pc, #436]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 80013f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80013fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	496a      	ldr	r1, [pc, #424]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001404:	4313      	orrs	r3, r2
 8001406:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800140a:	4b68      	ldr	r3, [pc, #416]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 800140c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001410:	4a66      	ldr	r2, [pc, #408]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001412:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001416:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800141a:	f7ff f909 	bl	8000630 <HAL_GetTick>
 800141e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001422:	f7ff f905 	bl	8000630 <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e399      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001434:	4b5d      	ldr	r3, [pc, #372]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001436:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800143a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0ef      	beq.n	8001422 <HAL_RCC_OscConfig+0x65a>
 8001442:	e01b      	b.n	800147c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001444:	4b59      	ldr	r3, [pc, #356]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800144a:	4a58      	ldr	r2, [pc, #352]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 800144c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001450:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001454:	f7ff f8ec 	bl	8000630 <HAL_GetTick>
 8001458:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800145c:	f7ff f8e8 	bl	8000630 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e37c      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800146e:	4b4f      	ldr	r3, [pc, #316]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ef      	bne.n	800145c <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800147c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001480:	2b01      	cmp	r3, #1
 8001482:	d107      	bne.n	8001494 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001484:	4b49      	ldr	r3, [pc, #292]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800148a:	4a48      	ldr	r2, [pc, #288]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 800148c:	f023 0304 	bic.w	r3, r3, #4
 8001490:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 8112 	beq.w	80016c6 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a8:	4b40      	ldr	r3, [pc, #256]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 80014aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014ae:	f003 0304 	and.w	r3, r3, #4
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d111      	bne.n	80014da <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b3d      	ldr	r3, [pc, #244]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 80014b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014bc:	4a3b      	ldr	r2, [pc, #236]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80014c6:	4b39      	ldr	r3, [pc, #228]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 80014c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80014d4:	2301      	movs	r3, #1
 80014d6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80014da:	4b35      	ldr	r3, [pc, #212]	; (80015b0 <HAL_RCC_OscConfig+0x7e8>)
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d118      	bne.n	8001518 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <HAL_RCC_OscConfig+0x7e8>)
 80014e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ea:	4a31      	ldr	r2, [pc, #196]	; (80015b0 <HAL_RCC_OscConfig+0x7e8>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff f89d 	bl	8000630 <HAL_GetTick>
 80014f6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7ff f899 	bl	8000630 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e32d      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800150c:	4b28      	ldr	r3, [pc, #160]	; (80015b0 <HAL_RCC_OscConfig+0x7e8>)
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	2b00      	cmp	r3, #0
 8001522:	d01f      	beq.n	8001564 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	d010      	beq.n	8001552 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001532:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001536:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001540:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001542:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001546:	4a19      	ldr	r2, [pc, #100]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001550:	e018      	b.n	8001584 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001554:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001562:	e00f      	b.n	8001584 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800156a:	4a10      	ldr	r2, [pc, #64]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 800156c:	f023 0301 	bic.w	r3, r3, #1
 8001570:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 8001576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800157a:	4a0c      	ldr	r2, [pc, #48]	; (80015ac <HAL_RCC_OscConfig+0x7e4>)
 800157c:	f023 0304 	bic.w	r3, r3, #4
 8001580:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d058      	beq.n	800163e <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800158c:	f7ff f850 	bl	8000630 <HAL_GetTick>
 8001590:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001592:	e00f      	b.n	80015b4 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff f84c 	bl	8000630 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d906      	bls.n	80015b4 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e2de      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
 80015aa:	bf00      	nop
 80015ac:	46020c00 	.word	0x46020c00
 80015b0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015b4:	4b9c      	ldr	r3, [pc, #624]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80015b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0e8      	beq.n	8001594 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d01b      	beq.n	8001606 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80015ce:	4b96      	ldr	r3, [pc, #600]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80015d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015d4:	4a94      	ldr	r2, [pc, #592]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80015d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80015de:	e00a      	b.n	80015f6 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e0:	f7ff f826 	bl	8000630 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e2b8      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80015f6:	4b8c      	ldr	r3, [pc, #560]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80015f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0ed      	beq.n	80015e0 <HAL_RCC_OscConfig+0x818>
 8001604:	e053      	b.n	80016ae <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001606:	4b88      	ldr	r3, [pc, #544]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 8001608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800160c:	4a86      	ldr	r2, [pc, #536]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 800160e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001612:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001616:	e00a      	b.n	800162e <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001618:	f7ff f80a 	bl	8000630 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	f241 3288 	movw	r2, #5000	; 0x1388
 8001626:	4293      	cmp	r3, r2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e29c      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800162e:	4b7e      	ldr	r3, [pc, #504]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 8001630:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1ed      	bne.n	8001618 <HAL_RCC_OscConfig+0x850>
 800163c:	e037      	b.n	80016ae <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800163e:	f7fe fff7 	bl	8000630 <HAL_GetTick>
 8001642:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001644:	e00a      	b.n	800165c <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001646:	f7fe fff3 	bl	8000630 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	f241 3288 	movw	r2, #5000	; 0x1388
 8001654:	4293      	cmp	r3, r2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e285      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800165c:	4b72      	ldr	r3, [pc, #456]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 800165e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1ed      	bne.n	8001646 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800166a:	4b6f      	ldr	r3, [pc, #444]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 800166c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01a      	beq.n	80016ae <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001678:	4b6b      	ldr	r3, [pc, #428]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 800167a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800167e:	4a6a      	ldr	r2, [pc, #424]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 8001680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001684:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7fe ffd1 	bl	8000630 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e263      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80016a0:	4b61      	ldr	r3, [pc, #388]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80016a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ed      	bne.n	800168a <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b6:	4b5c      	ldr	r3, [pc, #368]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80016b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016bc:	4a5a      	ldr	r2, [pc, #360]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80016be:	f023 0304 	bic.w	r3, r3, #4
 80016c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d036      	beq.n	8001740 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d019      	beq.n	800170e <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80016da:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80016e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80016e6:	f7fe ffa3 	bl	8000630 <HAL_GetTick>
 80016ea:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ee:	f7fe ff9f 	bl	8000630 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e233      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001700:	4b49      	ldr	r3, [pc, #292]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x926>
 800170c:	e018      	b.n	8001740 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800170e:	4b46      	ldr	r3, [pc, #280]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a45      	ldr	r2, [pc, #276]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 8001714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001718:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800171a:	f7fe ff89 	bl	8000630 <HAL_GetTick>
 800171e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001720:	e008      	b.n	8001734 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001722:	f7fe ff85 	bl	8000630 <HAL_GetTick>
 8001726:	4602      	mov	r2, r0
 8001728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e219      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001734:	4b3c      	ldr	r3, [pc, #240]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1f0      	bne.n	8001722 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001748:	2b00      	cmp	r3, #0
 800174a:	d036      	beq.n	80017ba <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	2b00      	cmp	r3, #0
 8001752:	d019      	beq.n	8001788 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a33      	ldr	r2, [pc, #204]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 800175a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001760:	f7fe ff66 	bl	8000630 <HAL_GetTick>
 8001764:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001768:	f7fe ff62 	bl	8000630 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e1f6      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800177a:	4b2b      	ldr	r3, [pc, #172]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d0f0      	beq.n	8001768 <HAL_RCC_OscConfig+0x9a0>
 8001786:	e018      	b.n	80017ba <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a26      	ldr	r2, [pc, #152]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 800178e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001792:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001794:	f7fe ff4c 	bl	8000630 <HAL_GetTick>
 8001798:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800179c:	f7fe ff48 	bl	8000630 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1dc      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80017ae:	4b1e      	ldr	r3, [pc, #120]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d07f      	beq.n	80018c6 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d062      	beq.n	8001894 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80017ce:	4b16      	ldr	r3, [pc, #88]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	4a15      	ldr	r2, [pc, #84]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80017d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017d8:	6093      	str	r3, [r2, #8]
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	4910      	ldr	r1, [pc, #64]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80017e8:	4313      	orrs	r3, r2
 80017ea:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80017f4:	d309      	bcc.n	800180a <HAL_RCC_OscConfig+0xa42>
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	f023 021f 	bic.w	r2, r3, #31
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a1b      	ldr	r3, [r3, #32]
 8001802:	4909      	ldr	r1, [pc, #36]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 8001804:	4313      	orrs	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
 8001808:	e02a      	b.n	8001860 <HAL_RCC_OscConfig+0xa98>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180e:	2b00      	cmp	r3, #0
 8001810:	da0c      	bge.n	800182c <HAL_RCC_OscConfig+0xa64>
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	015b      	lsls	r3, r3, #5
 8001820:	4901      	ldr	r1, [pc, #4]	; (8001828 <HAL_RCC_OscConfig+0xa60>)
 8001822:	4313      	orrs	r3, r2
 8001824:	60cb      	str	r3, [r1, #12]
 8001826:	e01b      	b.n	8001860 <HAL_RCC_OscConfig+0xa98>
 8001828:	46020c00 	.word	0x46020c00
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001834:	d30a      	bcc.n	800184c <HAL_RCC_OscConfig+0xa84>
 8001836:	4ba5      	ldr	r3, [pc, #660]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	029b      	lsls	r3, r3, #10
 8001844:	49a1      	ldr	r1, [pc, #644]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001846:	4313      	orrs	r3, r2
 8001848:	60cb      	str	r3, [r1, #12]
 800184a:	e009      	b.n	8001860 <HAL_RCC_OscConfig+0xa98>
 800184c:	4b9f      	ldr	r3, [pc, #636]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	03db      	lsls	r3, r3, #15
 800185a:	499c      	ldr	r1, [pc, #624]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 800185c:	4313      	orrs	r3, r2
 800185e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001860:	4b9a      	ldr	r3, [pc, #616]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a99      	ldr	r2, [pc, #612]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800186c:	f7fe fee0 	bl	8000630 <HAL_GetTick>
 8001870:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001872:	e008      	b.n	8001886 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001874:	f7fe fedc 	bl	8000630 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e170      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001886:	4b91      	ldr	r3, [pc, #580]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f0      	beq.n	8001874 <HAL_RCC_OscConfig+0xaac>
 8001892:	e018      	b.n	80018c6 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001894:	4b8d      	ldr	r3, [pc, #564]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a8c      	ldr	r2, [pc, #560]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 800189a:	f023 0310 	bic.w	r3, r3, #16
 800189e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80018a0:	f7fe fec6 	bl	8000630 <HAL_GetTick>
 80018a4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80018a8:	f7fe fec2 	bl	8000630 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e156      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80018ba:	4b84      	ldr	r3, [pc, #528]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 814b 	beq.w	8001b66 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d6:	4b7d      	ldr	r3, [pc, #500]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	f000 80fa 	beq.w	8001ad8 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	f040 80cc 	bne.w	8001a86 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80018ee:	4b77      	ldr	r3, [pc, #476]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a76      	ldr	r2, [pc, #472]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 80018f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018f8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80018fa:	f7fe fe99 	bl	8000630 <HAL_GetTick>
 80018fe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001902:	f7fe fe95 	bl	8000630 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e129      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001914:	4b6d      	ldr	r3, [pc, #436]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1f0      	bne.n	8001902 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001920:	4b6a      	ldr	r3, [pc, #424]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001922:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001926:	f003 0304 	and.w	r3, r3, #4
 800192a:	2b00      	cmp	r3, #0
 800192c:	d111      	bne.n	8001952 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	4b67      	ldr	r3, [pc, #412]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001934:	4a65      	ldr	r2, [pc, #404]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001936:	f043 0304 	orr.w	r3, r3, #4
 800193a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800193e:	4b63      	ldr	r3, [pc, #396]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800194c:	2301      	movs	r3, #1
 800194e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001952:	4b5f      	ldr	r3, [pc, #380]	; (8001ad0 <HAL_RCC_OscConfig+0xd08>)
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800195a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800195e:	d102      	bne.n	8001966 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8001960:	2301      	movs	r3, #1
 8001962:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001966:	4b5a      	ldr	r3, [pc, #360]	; (8001ad0 <HAL_RCC_OscConfig+0xd08>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	4a59      	ldr	r2, [pc, #356]	; (8001ad0 <HAL_RCC_OscConfig+0xd08>)
 800196c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001970:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001972:	4b56      	ldr	r3, [pc, #344]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800197a:	f023 0303 	bic.w	r3, r3, #3
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001986:	3a01      	subs	r2, #1
 8001988:	0212      	lsls	r2, r2, #8
 800198a:	4311      	orrs	r1, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001990:	430a      	orrs	r2, r1
 8001992:	494e      	ldr	r1, [pc, #312]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001994:	4313      	orrs	r3, r2
 8001996:	628b      	str	r3, [r1, #40]	; 0x28
 8001998:	4b4c      	ldr	r3, [pc, #304]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 800199a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199c:	4b4d      	ldr	r3, [pc, #308]	; (8001ad4 <HAL_RCC_OscConfig+0xd0c>)
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019a4:	3a01      	subs	r2, #1
 80019a6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80019ae:	3a01      	subs	r2, #1
 80019b0:	0252      	lsls	r2, r2, #9
 80019b2:	b292      	uxth	r2, r2
 80019b4:	4311      	orrs	r1, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019ba:	3a01      	subs	r2, #1
 80019bc:	0412      	lsls	r2, r2, #16
 80019be:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80019c8:	3a01      	subs	r2, #1
 80019ca:	0612      	lsls	r2, r2, #24
 80019cc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80019d0:	430a      	orrs	r2, r1
 80019d2:	493e      	ldr	r1, [pc, #248]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80019d8:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 80019da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019dc:	4a3b      	ldr	r2, [pc, #236]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 80019de:	f023 0310 	bic.w	r3, r3, #16
 80019e2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80019e4:	4b39      	ldr	r3, [pc, #228]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 80019e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80019ec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019f4:	00d2      	lsls	r2, r2, #3
 80019f6:	4935      	ldr	r1, [pc, #212]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80019fc:	4b33      	ldr	r3, [pc, #204]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 80019fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a00:	4a32      	ldr	r2, [pc, #200]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001a02:	f043 0310 	orr.w	r3, r3, #16
 8001a06:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001a08:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0c:	f023 020c 	bic.w	r2, r3, #12
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	492d      	ldr	r1, [pc, #180]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001a1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d105      	bne.n	8001a2e <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001a22:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_RCC_OscConfig+0xd08>)
 8001a24:	68db      	ldr	r3, [r3, #12]
 8001a26:	4a2a      	ldr	r2, [pc, #168]	; (8001ad0 <HAL_RCC_OscConfig+0xd08>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001a2e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001a36:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3c:	4a23      	ldr	r2, [pc, #140]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001a3e:	f023 0304 	bic.w	r3, r3, #4
 8001a42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4a:	4a20      	ldr	r2, [pc, #128]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001a58:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a5c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a5e:	f7fe fde7 	bl	8000630 <HAL_GetTick>
 8001a62:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7fe fde3 	bl	8000630 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e077      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0f0      	beq.n	8001a66 <HAL_RCC_OscConfig+0xc9e>
 8001a84:	e06f      	b.n	8001b66 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001a86:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a10      	ldr	r2, [pc, #64]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001a8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a90:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001a92:	f7fe fdcd 	bl	8000630 <HAL_GetTick>
 8001a96:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7fe fdc9 	bl	8000630 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e05d      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001aac:	4b07      	ldr	r3, [pc, #28]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d1f0      	bne.n	8001a9a <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	4a03      	ldr	r2, [pc, #12]	; (8001acc <HAL_RCC_OscConfig+0xd04>)
 8001abe:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001ac2:	f023 0303 	bic.w	r3, r3, #3
 8001ac6:	6293      	str	r3, [r2, #40]	; 0x28
 8001ac8:	e04d      	b.n	8001b66 <HAL_RCC_OscConfig+0xd9e>
 8001aca:	bf00      	nop
 8001acc:	46020c00 	.word	0x46020c00
 8001ad0:	46020800 	.word	0x46020800
 8001ad4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_RCC_OscConfig+0xda8>)
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_RCC_OscConfig+0xda8>)
 8001ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d03a      	beq.n	8001b62 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0203 	and.w	r2, r3, #3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d133      	bne.n	8001b62 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d12a      	bne.n	8001b62 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	0b1b      	lsrs	r3, r3, #12
 8001b10:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d122      	bne.n	8001b62 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b26:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d11a      	bne.n	8001b62 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	0a5b      	lsrs	r3, r3, #9
 8001b30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b38:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d111      	bne.n	8001b62 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b4a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d108      	bne.n	8001b62 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	0e1b      	lsrs	r3, r3, #24
 8001b54:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3738      	adds	r7, #56	; 0x38
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	46020c00 	.word	0x46020c00

08001b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e1d9      	b.n	8001f3c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b88:	4b9b      	ldr	r3, [pc, #620]	; (8001df8 <HAL_RCC_ClockConfig+0x284>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d910      	bls.n	8001bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b98      	ldr	r3, [pc, #608]	; (8001df8 <HAL_RCC_ClockConfig+0x284>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f023 020f 	bic.w	r2, r3, #15
 8001b9e:	4996      	ldr	r1, [pc, #600]	; (8001df8 <HAL_RCC_ClockConfig+0x284>)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba6:	4b94      	ldr	r3, [pc, #592]	; (8001df8 <HAL_RCC_ClockConfig+0x284>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 030f 	and.w	r3, r3, #15
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e1c1      	b.n	8001f3c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d010      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	695a      	ldr	r2, [r3, #20]
 8001bc8:	4b8c      	ldr	r3, [pc, #560]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d908      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001bd4:	4b89      	ldr	r3, [pc, #548]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	4986      	ldr	r1, [pc, #536]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d012      	beq.n	8001c18 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691a      	ldr	r2, [r3, #16]
 8001bf6:	4b81      	ldr	r3, [pc, #516]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d909      	bls.n	8001c18 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001c04:	4b7d      	ldr	r3, [pc, #500]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	497a      	ldr	r1, [pc, #488]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d010      	beq.n	8001c46 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	4b74      	ldr	r3, [pc, #464]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d908      	bls.n	8001c46 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b71      	ldr	r3, [pc, #452]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001c36:	6a1b      	ldr	r3, [r3, #32]
 8001c38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	496e      	ldr	r1, [pc, #440]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d010      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	4b69      	ldr	r3, [pc, #420]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001c58:	6a1b      	ldr	r3, [r3, #32]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d908      	bls.n	8001c74 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001c62:	4b66      	ldr	r3, [pc, #408]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	f023 020f 	bic.w	r2, r3, #15
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	4963      	ldr	r1, [pc, #396]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80d2 	beq.w	8001e26 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d143      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8e:	4b5b      	ldr	r3, [pc, #364]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d110      	bne.n	8001cbe <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	4b57      	ldr	r3, [pc, #348]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001c9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca2:	4a56      	ldr	r2, [pc, #344]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001cac:	4b53      	ldr	r3, [pc, #332]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8001cbe:	f7fe fcb7 	bl	8000630 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001cc4:	4b4e      	ldr	r3, [pc, #312]	; (8001e00 <HAL_RCC_ClockConfig+0x28c>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00f      	beq.n	8001cf0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8001cd2:	f7fe fcad 	bl	8000630 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e12b      	b.n	8001f3c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001ce4:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <HAL_RCC_ClockConfig+0x28c>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d107      	bne.n	8001d06 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001cf6:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfc:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001cfe:	f023 0304 	bic.w	r3, r3, #4
 8001d02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001d06:	4b3d      	ldr	r3, [pc, #244]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d121      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e112      	b.n	8001f3c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1e:	4b37      	ldr	r3, [pc, #220]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d115      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e106      	b.n	8001f3c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d107      	bne.n	8001d46 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001d36:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0304 	and.w	r3, r3, #4
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d109      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e0fa      	b.n	8001f3c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d46:	4b2d      	ldr	r3, [pc, #180]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0f2      	b.n	8001f3c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001d56:	4b29      	ldr	r3, [pc, #164]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f023 0203 	bic.w	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4926      	ldr	r1, [pc, #152]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8001d68:	f7fe fc62 	bl	8000630 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	d112      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d76:	e00a      	b.n	8001d8e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f7fe fc5a 	bl	8000630 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e0d6      	b.n	8001f3c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d1ee      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x204>
 8001d9a:	e044      	b.n	8001e26 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d112      	bne.n	8001dca <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da4:	e00a      	b.n	8001dbc <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001da6:	f7fe fc43 	bl	8000630 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e0bf      	b.n	8001f3c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	d1ee      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x232>
 8001dc8:	e02d      	b.n	8001e26 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d123      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dd2:	e00a      	b.n	8001dea <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd4:	f7fe fc2c 	bl	8000630 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e0a8      	b.n	8001f3c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001dea:	4b04      	ldr	r3, [pc, #16]	; (8001dfc <HAL_RCC_ClockConfig+0x288>)
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ee      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x260>
 8001df6:	e016      	b.n	8001e26 <HAL_RCC_ClockConfig+0x2b2>
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	46020c00 	.word	0x46020c00
 8001e00:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e04:	f7fe fc14 	bl	8000630 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e090      	b.n	8001f3c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e1a:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d1ee      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d010      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	f003 030f 	and.w	r3, r3, #15
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d208      	bcs.n	8001e54 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001e42:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	f023 020f 	bic.w	r2, r3, #15
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	493d      	ldr	r1, [pc, #244]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e54:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <HAL_RCC_ClockConfig+0x3d4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d210      	bcs.n	8001e84 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e62:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <HAL_RCC_ClockConfig+0x3d4>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 020f 	bic.w	r2, r3, #15
 8001e6a:	4937      	ldr	r1, [pc, #220]	; (8001f48 <HAL_RCC_ClockConfig+0x3d4>)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e72:	4b35      	ldr	r3, [pc, #212]	; (8001f48 <HAL_RCC_ClockConfig+0x3d4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	683a      	ldr	r2, [r7, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e05b      	b.n	8001f3c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d010      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d208      	bcs.n	8001eb2 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001ea0:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	4925      	ldr	r1, [pc, #148]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d012      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691a      	ldr	r2, [r3, #16]
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001ec4:	6a1b      	ldr	r3, [r3, #32]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d209      	bcs.n	8001ee4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001ed0:	4b1c      	ldr	r3, [pc, #112]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	4919      	ldr	r1, [pc, #100]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0310 	and.w	r3, r3, #16
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d010      	beq.n	8001f12 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	695a      	ldr	r2, [r3, #20]
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d208      	bcs.n	8001f12 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	490d      	ldr	r1, [pc, #52]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001f12:	f000 f821 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x3d0>)
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	490a      	ldr	r1, [pc, #40]	; (8001f4c <HAL_RCC_ClockConfig+0x3d8>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_RCC_ClockConfig+0x3dc>)
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_RCC_ClockConfig+0x3e0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fb33 	bl	800059c <HAL_InitTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	46020c00 	.word	0x46020c00
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	08002318 	.word	0x08002318
 8001f50:	20000004 	.word	0x20000004
 8001f54:	20000008 	.word	0x20000008

08001f58 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b08b      	sub	sp, #44	; 0x2c
 8001f5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f66:	4b7b      	ldr	r3, [pc, #492]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f70:	4b78      	ldr	r3, [pc, #480]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x34>
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d121      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d11e      	bne.n	8001fca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8001f8c:	4b71      	ldr	r3, [pc, #452]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8001f98:	4b6e      	ldr	r3, [pc, #440]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001f9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f9e:	0b1b      	lsrs	r3, r3, #12
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa6:	e005      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8001fa8:	4b6a      	ldr	r3, [pc, #424]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	0f1b      	lsrs	r3, r3, #28
 8001fae:	f003 030f 	and.w	r3, r3, #15
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fb4:	4a68      	ldr	r2, [pc, #416]	; (8002158 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d110      	bne.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001fc8:	e00d      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fca:	4b62      	ldr	r3, [pc, #392]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b04      	cmp	r3, #4
 8001fd4:	d102      	bne.n	8001fdc <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd6:	4b61      	ldr	r3, [pc, #388]	; (800215c <HAL_RCC_GetSysClockFreq+0x204>)
 8001fd8:	623b      	str	r3, [r7, #32]
 8001fda:	e004      	b.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fe2:	4b5e      	ldr	r3, [pc, #376]	; (800215c <HAL_RCC_GetSysClockFreq+0x204>)
 8001fe4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	f040 80ac 	bne.w	8002146 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001fee:	4b59      	ldr	r3, [pc, #356]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8001ff8:	4b56      	ldr	r3, [pc, #344]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	3301      	adds	r3, #1
 8002004:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002006:	4b53      	ldr	r3, [pc, #332]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f003 0301 	and.w	r3, r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002012:	4b50      	ldr	r3, [pc, #320]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002016:	08db      	lsrs	r3, r3, #3
 8002018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	ee07 3a90 	vmov	s15, r3
 8002026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800202a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8086 	beq.w	8002142 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	2b02      	cmp	r3, #2
 800203a:	d003      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0xec>
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d022      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x130>
 8002042:	e043      	b.n	80020cc <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8002160 <HAL_RCC_GetSysClockFreq+0x208>
 8002052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002056:	4b3f      	ldr	r3, [pc, #252]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002066:	ed97 6a01 	vldr	s12, [r7, #4]
 800206a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002164 <HAL_RCC_GetSysClockFreq+0x20c>
 800206e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002072:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800207a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002086:	e046      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002092:	eddf 6a33 	vldr	s13, [pc, #204]	; 8002160 <HAL_RCC_GetSysClockFreq+0x208>
 8002096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800209a:	4b2e      	ldr	r3, [pc, #184]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800209c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80020aa:	ed97 6a01 	vldr	s12, [r7, #4]
 80020ae:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002164 <HAL_RCC_GetSysClockFreq+0x20c>
 80020b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80020ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020be:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80020ca:	e024      	b.n	8002116 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80020e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020ec:	ee07 3a90 	vmov	s15, r3
 80020f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80020f4:	ed97 6a01 	vldr	s12, [r7, #4]
 80020f8:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8002164 <HAL_RCC_GetSysClockFreq+0x20c>
 80020fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002100:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002104:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002108:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800210c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002110:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8002114:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8002116:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8002118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800211a:	0e1b      	lsrs	r3, r3, #24
 800211c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002120:	3301      	adds	r3, #1
 8002122:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	ee07 3a90 	vmov	s15, r3
 800212a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800212e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800213a:	ee17 3a90 	vmov	r3, s15
 800213e:	623b      	str	r3, [r7, #32]
 8002140:	e001      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8002146:	6a3b      	ldr	r3, [r7, #32]
}
 8002148:	4618      	mov	r0, r3
 800214a:	372c      	adds	r7, #44	; 0x2c
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	46020c00 	.word	0x46020c00
 8002158:	08002328 	.word	0x08002328
 800215c:	00f42400 	.word	0x00f42400
 8002160:	4b742400 	.word	0x4b742400
 8002164:	46000000 	.word	0x46000000

08002168 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800216c:	f7ff fef4 	bl	8001f58 <HAL_RCC_GetSysClockFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b07      	ldr	r3, [pc, #28]	; (8002190 <HAL_RCC_GetHCLKFreq+0x28>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	4906      	ldr	r1, [pc, #24]	; (8002194 <HAL_RCC_GetHCLKFreq+0x2c>)
 800217c:	5ccb      	ldrb	r3, [r1, r3]
 800217e:	fa22 f303 	lsr.w	r3, r2, r3
 8002182:	4a05      	ldr	r2, [pc, #20]	; (8002198 <HAL_RCC_GetHCLKFreq+0x30>)
 8002184:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8002186:	4b04      	ldr	r3, [pc, #16]	; (8002198 <HAL_RCC_GetHCLKFreq+0x30>)
 8002188:	681b      	ldr	r3, [r3, #0]
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	46020c00 	.word	0x46020c00
 8002194:	08002318 	.word	0x08002318
 8002198:	20000004 	.word	0x20000004

0800219c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021a4:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80021a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021b2:	f7fe fdab 	bl	8000d0c <HAL_PWREx_GetVoltageRange>
 80021b6:	6178      	str	r0, [r7, #20]
 80021b8:	e019      	b.n	80021ee <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80021bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021c0:	4a37      	ldr	r2, [pc, #220]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80021c2:	f043 0304 	orr.w	r3, r3, #4
 80021c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80021ca:	4b35      	ldr	r3, [pc, #212]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80021cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021d8:	f7fe fd98 	bl	8000d0c <HAL_PWREx_GetVoltageRange>
 80021dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	4b30      	ldr	r3, [pc, #192]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80021e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021e4:	4a2e      	ldr	r2, [pc, #184]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80021e6:	f023 0304 	bic.w	r3, r3, #4
 80021ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021f4:	d003      	beq.n	80021fe <RCC_SetFlashLatencyFromMSIRange+0x62>
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021fc:	d109      	bne.n	8002212 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002204:	d202      	bcs.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002206:	2301      	movs	r3, #1
 8002208:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800220a:	e033      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002210:	e030      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002218:	d208      	bcs.n	800222c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002220:	d102      	bne.n	8002228 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002222:	2303      	movs	r3, #3
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	e025      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e035      	b.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002232:	d90f      	bls.n	8002254 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d109      	bne.n	800224e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002240:	d902      	bls.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002242:	2300      	movs	r3, #0
 8002244:	613b      	str	r3, [r7, #16]
 8002246:	e015      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002248:	2301      	movs	r3, #1
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	e012      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	e00f      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800225a:	d109      	bne.n	8002270 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002262:	d102      	bne.n	800226a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002264:	2301      	movs	r3, #1
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	e004      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800226a:	2302      	movs	r3, #2
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	e001      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002270:	2301      	movs	r3, #1
 8002272:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 020f 	bic.w	r2, r3, #15
 800227c:	4909      	ldr	r1, [pc, #36]	; (80022a4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 030f 	and.w	r3, r3, #15
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	429a      	cmp	r2, r3
 8002290:	d001      	beq.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	46020c00 	.word	0x46020c00
 80022a4:	40022000 	.word	0x40022000

080022a8 <__libc_init_array>:
 80022a8:	b570      	push	{r4, r5, r6, lr}
 80022aa:	4d0d      	ldr	r5, [pc, #52]	; (80022e0 <__libc_init_array+0x38>)
 80022ac:	2600      	movs	r6, #0
 80022ae:	4c0d      	ldr	r4, [pc, #52]	; (80022e4 <__libc_init_array+0x3c>)
 80022b0:	1b64      	subs	r4, r4, r5
 80022b2:	10a4      	asrs	r4, r4, #2
 80022b4:	42a6      	cmp	r6, r4
 80022b6:	d109      	bne.n	80022cc <__libc_init_array+0x24>
 80022b8:	4d0b      	ldr	r5, [pc, #44]	; (80022e8 <__libc_init_array+0x40>)
 80022ba:	2600      	movs	r6, #0
 80022bc:	4c0b      	ldr	r4, [pc, #44]	; (80022ec <__libc_init_array+0x44>)
 80022be:	f000 f81f 	bl	8002300 <_init>
 80022c2:	1b64      	subs	r4, r4, r5
 80022c4:	10a4      	asrs	r4, r4, #2
 80022c6:	42a6      	cmp	r6, r4
 80022c8:	d105      	bne.n	80022d6 <__libc_init_array+0x2e>
 80022ca:	bd70      	pop	{r4, r5, r6, pc}
 80022cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80022d0:	3601      	adds	r6, #1
 80022d2:	4798      	blx	r3
 80022d4:	e7ee      	b.n	80022b4 <__libc_init_array+0xc>
 80022d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80022da:	3601      	adds	r6, #1
 80022dc:	4798      	blx	r3
 80022de:	e7f2      	b.n	80022c6 <__libc_init_array+0x1e>
 80022e0:	080023e8 	.word	0x080023e8
 80022e4:	080023e8 	.word	0x080023e8
 80022e8:	080023e8 	.word	0x080023e8
 80022ec:	080023ec 	.word	0x080023ec

080022f0 <memset>:
 80022f0:	4402      	add	r2, r0
 80022f2:	4603      	mov	r3, r0
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d100      	bne.n	80022fa <memset+0xa>
 80022f8:	4770      	bx	lr
 80022fa:	f803 1b01 	strb.w	r1, [r3], #1
 80022fe:	e7f9      	b.n	80022f4 <memset+0x4>

08002300 <_init>:
 8002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002302:	bf00      	nop
 8002304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002306:	bc08      	pop	{r3}
 8002308:	469e      	mov	lr, r3
 800230a:	4770      	bx	lr

0800230c <_fini>:
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	bf00      	nop
 8002310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002312:	bc08      	pop	{r3}
 8002314:	469e      	mov	lr, r3
 8002316:	4770      	bx	lr
